
Assignment02.IoT303x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004100  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b74  08004b74  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004b74  08004b74  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b74  08004b74  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  20000064  08004be0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  08004be0  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138e6  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e88  00000000  00000000  000339bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00036848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a2  00000000  00000000  00037440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000d678  00000000  00000000  00037ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce40  00000000  00000000  0004535a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004999b  00000000  00000000  0005219a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003410  00000000  00000000  0009bb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0009ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004288 	.word	0x08004288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004288 	.word	0x08004288

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <SystemInit+0x60>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <SystemInit+0x60>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <SystemInit+0x64>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <SystemInit+0x64>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <SystemInit+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <SystemInit+0x64>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <SystemInit+0x64>)
 80002ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <SystemInit+0x64>)
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <SystemInit+0x68>)
 80002ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <SystemInit+0x64>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <SystemInit+0x64>)
 80002c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SystemInit+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80002ce:	f000 f80d 	bl	80002ec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <SystemInit+0x60>)
 80002d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002d8:	609a      	str	r2, [r3, #8]
#endif
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	40023800 	.word	0x40023800
 80002e8:	24003010 	.word	0x24003010

080002ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002f0:	4b23      	ldr	r3, [pc, #140]	; (8000380 <SetSysClock+0x94>)
 80002f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f4:	4a22      	ldr	r2, [pc, #136]	; (8000380 <SetSysClock+0x94>)
 80002f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002fa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002fc:	4b21      	ldr	r3, [pc, #132]	; (8000384 <SetSysClock+0x98>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a20      	ldr	r2, [pc, #128]	; (8000384 <SetSysClock+0x98>)
 8000302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000306:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000308:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <SetSysClock+0x94>)
 800030a:	4a1d      	ldr	r2, [pc, #116]	; (8000380 <SetSysClock+0x94>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <SetSysClock+0x94>)
 8000312:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <SetSysClock+0x94>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <SetSysClock+0x94>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a18      	ldr	r2, [pc, #96]	; (8000380 <SetSysClock+0x94>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000324:	4b16      	ldr	r3, [pc, #88]	; (8000380 <SetSysClock+0x94>)
 8000326:	4a18      	ldr	r2, [pc, #96]	; (8000388 <SetSysClock+0x9c>)
 8000328:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <SetSysClock+0x94>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a14      	ldr	r2, [pc, #80]	; (8000380 <SetSysClock+0x94>)
 8000330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000334:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000336:	bf00      	nop
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <SetSysClock+0x94>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f9      	beq.n	8000338 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <SetSysClock+0xa0>)
 8000346:	f240 6202 	movw	r2, #1538	; 0x602
 800034a:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <SetSysClock+0x94>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <SetSysClock+0x94>)
 8000352:	f023 0303 	bic.w	r3, r3, #3
 8000356:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <SetSysClock+0x94>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <SetSysClock+0x94>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000364:	bf00      	nop
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <SetSysClock+0x94>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	f003 030c 	and.w	r3, r3, #12
 800036e:	2b08      	cmp	r3, #8
 8000370:	d1f9      	bne.n	8000366 <SetSysClock+0x7a>
}
 8000372:	bf00      	nop
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40007000 	.word	0x40007000
 8000388:	08015410 	.word	0x08015410
 800038c:	40023c00 	.word	0x40023c00

08000390 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000390:	b480      	push	{r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
 80003aa:	e076      	b.n	800049a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003ac:	2201      	movs	r2, #1
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	fa02 f303 	lsl.w	r3, r2, r3
 80003b4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	693a      	ldr	r2, [r7, #16]
 80003bc:	4013      	ands	r3, r2
 80003be:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d165      	bne.n	8000494 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	2103      	movs	r1, #3
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	43db      	mvns	r3, r3
 80003d8:	401a      	ands	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	4619      	mov	r1, r3
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	fa01 f303 	lsl.w	r3, r1, r3
 80003f0:	431a      	orrs	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	791b      	ldrb	r3, [r3, #4]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d003      	beq.n	8000406 <GPIO_Init+0x76>
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	791b      	ldrb	r3, [r3, #4]
 8000402:	2b02      	cmp	r3, #2
 8000404:	d12e      	bne.n	8000464 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	689a      	ldr	r2, [r3, #8]
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	2103      	movs	r1, #3
 8000410:	fa01 f303 	lsl.w	r3, r1, r3
 8000414:	43db      	mvns	r3, r3
 8000416:	401a      	ands	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	795b      	ldrb	r3, [r3, #5]
 8000424:	4619      	mov	r1, r3
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	431a      	orrs	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685a      	ldr	r2, [r3, #4]
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	b29b      	uxth	r3, r3
 800043c:	4619      	mov	r1, r3
 800043e:	2301      	movs	r3, #1
 8000440:	408b      	lsls	r3, r1
 8000442:	43db      	mvns	r3, r3
 8000444:	401a      	ands	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	7992      	ldrb	r2, [r2, #6]
 8000452:	4611      	mov	r1, r2
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	b292      	uxth	r2, r2
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	b292      	uxth	r2, r2
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	68da      	ldr	r2, [r3, #12]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	b29b      	uxth	r3, r3
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	2103      	movs	r1, #3
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	401a      	ands	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68da      	ldr	r2, [r3, #12]
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	79db      	ldrb	r3, [r3, #7]
 8000484:	4619      	mov	r1, r3
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	431a      	orrs	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	3301      	adds	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	2b0f      	cmp	r3, #15
 800049e:	d985      	bls.n	80003ac <GPIO_Init+0x1c>
    }
  }
}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	371c      	adds	r7, #28
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	460b      	mov	r3, r1
 80004b8:	807b      	strh	r3, [r7, #2]
 80004ba:	4613      	mov	r3, r2
 80004bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80004be:	787b      	ldrb	r3, [r7, #1]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d003      	beq.n	80004cc <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	887a      	ldrh	r2, [r7, #2]
 80004c8:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80004ca:	e002      	b.n	80004d2 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	887a      	ldrh	r2, [r7, #2]
 80004d0:	835a      	strh	r2, [r3, #26]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004de:	b480      	push	{r7}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	460b      	mov	r3, r1
 80004e8:	807b      	strh	r3, [r7, #2]
 80004ea:	4613      	mov	r3, r2
 80004ec:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004f6:	787a      	ldrb	r2, [r7, #1]
 80004f8:	887b      	ldrh	r3, [r7, #2]
 80004fa:	f003 0307 	and.w	r3, r3, #7
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000506:	887b      	ldrh	r3, [r7, #2]
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	b29b      	uxth	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3208      	adds	r2, #8
 8000512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000516:	887b      	ldrh	r3, [r7, #2]
 8000518:	f003 0307 	and.w	r3, r3, #7
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	210f      	movs	r1, #15
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	8879      	ldrh	r1, [r7, #2]
 8000528:	08c9      	lsrs	r1, r1, #3
 800052a:	b289      	uxth	r1, r1
 800052c:	4608      	mov	r0, r1
 800052e:	ea02 0103 	and.w	r1, r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f100 0208 	add.w	r2, r0, #8
 8000538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	08db      	lsrs	r3, r3, #3
 8000540:	b29b      	uxth	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3208      	adds	r2, #8
 8000548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	4313      	orrs	r3, r2
 8000550:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000552:	887b      	ldrh	r3, [r7, #2]
 8000554:	08db      	lsrs	r3, r3, #3
 8000556:	b29b      	uxth	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3208      	adds	r2, #8
 800055e:	68b9      	ldr	r1, [r7, #8]
 8000560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800057e:	2300      	movs	r3, #0
 8000580:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000582:	2304      	movs	r3, #4
 8000584:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000586:	4b57      	ldr	r3, [pc, #348]	; (80006e4 <I2C_Init+0x174>)
 8000588:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	889b      	ldrh	r3, [r3, #4]
 800058e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000592:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000596:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f97b 	bl	8000898 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	4a4f      	ldr	r2, [pc, #316]	; (80006e8 <I2C_Init+0x178>)
 80005aa:	fba2 2303 	umull	r2, r3, r2, r3
 80005ae:	0c9b      	lsrs	r3, r3, #18
 80005b0:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80005b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80005b6:	4313      	orrs	r3, r2
 80005b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005be:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	f023 0301 	bic.w	r3, r3, #1
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a44      	ldr	r2, [pc, #272]	; (80006ec <I2C_Init+0x17c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d815      	bhi.n	800060a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	69fa      	ldr	r2, [r7, #28]
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80005ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d801      	bhi.n	80005f6 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80005f2:	2304      	movs	r3, #4
 80005f4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80005f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80005fa:	4313      	orrs	r3, r2
 80005fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80005fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000600:	3301      	adds	r3, #1
 8000602:	b29a      	uxth	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	841a      	strh	r2, [r3, #32]
 8000608:	e040      	b.n	800068c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	88db      	ldrh	r3, [r3, #6]
 800060e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000612:	4293      	cmp	r3, r2
 8000614:	d109      	bne.n	800062a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	69fa      	ldr	r2, [r7, #28]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000628:	e00e      	b.n	8000648 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4613      	mov	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	009a      	lsls	r2, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	69fa      	ldr	r2, [r7, #28]
 800063a:	fbb2 f3f3 	udiv	r3, r2, r3
 800063e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800064a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800064e:	2b00      	cmp	r3, #0
 8000650:	d103      	bne.n	800065a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800065a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800065c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800065e:	4313      	orrs	r3, r2
 8000660:	b29b      	uxth	r3, r3
 8000662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800066a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800066c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800066e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <I2C_Init+0x180>)
 8000678:	fb82 1203 	smull	r1, r2, r2, r3
 800067c:	1192      	asrs	r2, r2, #6
 800067e:	17db      	asrs	r3, r3, #31
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	b29b      	uxth	r3, r3
 8000684:	3301      	adds	r3, #1
 8000686:	b29a      	uxth	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000690:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	b29b      	uxth	r3, r3
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	b29a      	uxth	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80006a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006aa:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80006ae:	f023 0302 	bic.w	r3, r3, #2
 80006b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	889a      	ldrh	r2, [r3, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	895b      	ldrh	r3, [r3, #10]
 80006bc:	4313      	orrs	r3, r2
 80006be:	b29a      	uxth	r2, r3
 80006c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006c2:	4313      	orrs	r3, r2
 80006c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006ca:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	899a      	ldrh	r2, [r3, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	891b      	ldrh	r3, [r3, #8]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	811a      	strh	r2, [r3, #8]
}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	007a1200 	.word	0x007a1200
 80006e8:	431bde83 	.word	0x431bde83
 80006ec:	000186a0 	.word	0x000186a0
 80006f0:	10624dd3 	.word	0x10624dd3

080006f4 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d008      	beq.n	8000718 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b29b      	uxth	r3, r3
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000716:	e007      	b.n	8000728 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	b29b      	uxth	r3, r3
 800071e:	f023 0301 	bic.w	r3, r3, #1
 8000722:	b29a      	uxth	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	801a      	strh	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d008      	beq.n	8000758 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000756:	e007      	b.n	8000768 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	801a      	strh	r2, [r3, #0]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
 8000780:	4613      	mov	r3, r2
 8000782:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000784:	78bb      	ldrb	r3, [r7, #2]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d004      	beq.n	8000794 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800078a:	78fb      	ldrb	r3, [r7, #3]
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	70fb      	strb	r3, [r7, #3]
 8000792:	e003      	b.n	800079c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	f023 0301 	bic.w	r3, r3, #1
 800079a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	821a      	strh	r2, [r3, #16]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	821a      	strh	r2, [r3, #16]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80007e6:	2300      	movs	r3, #0
 80007e8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8a9b      	ldrh	r3, [r3, #20]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	8b1b      	ldrh	r3, [r3, #24]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	041b      	lsls	r3, r3, #16
 80007fe:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	4313      	orrs	r3, r2
 8000806:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800080a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	4013      	ands	r3, r2
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d102      	bne.n	800081e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000818:	2301      	movs	r3, #1
 800081a:	75fb      	strb	r3, [r7, #23]
 800081c:	e001      	b.n	8000822 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800081e:	2300      	movs	r3, #0
 8000820:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000822:	7dfb      	ldrb	r3, [r7, #23]
}
 8000824:	4618      	mov	r0, r3
 8000826:	371c      	adds	r7, #28
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000830:	b480      	push	{r7}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	0f1b      	lsrs	r3, r3, #28
 800084e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000856:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3314      	adds	r3, #20
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	e005      	b.n	8000872 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	0c1b      	lsrs	r3, r3, #16
 800086a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3318      	adds	r3, #24
 8000870:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	4013      	ands	r3, r2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800087e:	2301      	movs	r3, #1
 8000880:	75fb      	strb	r3, [r7, #23]
 8000882:	e001      	b.n	8000888 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000888:	7dfb      	ldrb	r3, [r7, #23]
}
 800088a:	4618      	mov	r0, r3
 800088c:	371c      	adds	r7, #28
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	2302      	movs	r3, #2
 80008b6:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008b8:	4b4a      	ldr	r3, [pc, #296]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f003 030c 	and.w	r3, r3, #12
 80008c0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	2b08      	cmp	r3, #8
 80008c6:	d011      	beq.n	80008ec <RCC_GetClocksFreq+0x54>
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d844      	bhi.n	8000958 <RCC_GetClocksFreq+0xc0>
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d003      	beq.n	80008dc <RCC_GetClocksFreq+0x44>
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d004      	beq.n	80008e4 <RCC_GetClocksFreq+0x4c>
 80008da:	e03d      	b.n	8000958 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a42      	ldr	r2, [pc, #264]	; (80009e8 <RCC_GetClocksFreq+0x150>)
 80008e0:	601a      	str	r2, [r3, #0]
    break;
 80008e2:	e03d      	b.n	8000960 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a41      	ldr	r2, [pc, #260]	; (80009ec <RCC_GetClocksFreq+0x154>)
 80008e8:	601a      	str	r2, [r3, #0]
    break;
 80008ea:	e039      	b.n	8000960 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008ec:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	0d9b      	lsrs	r3, r3, #22
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008f8:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000900:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00c      	beq.n	8000922 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000908:	4a38      	ldr	r2, [pc, #224]	; (80009ec <RCC_GetClocksFreq+0x154>)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000910:	4a34      	ldr	r2, [pc, #208]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 8000912:	6852      	ldr	r2, [r2, #4]
 8000914:	0992      	lsrs	r2, r2, #6
 8000916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	61fb      	str	r3, [r7, #28]
 8000920:	e00b      	b.n	800093a <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000922:	4a31      	ldr	r2, [pc, #196]	; (80009e8 <RCC_GetClocksFreq+0x150>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 800092c:	6852      	ldr	r2, [r2, #4]
 800092e:	0992      	lsrs	r2, r2, #6
 8000930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	0c1b      	lsrs	r3, r3, #16
 8000940:	f003 0303 	and.w	r3, r3, #3
 8000944:	3301      	adds	r3, #1
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
    break;
 8000956:	e003      	b.n	8000960 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <RCC_GetClocksFreq+0x150>)
 800095c:	601a      	str	r2, [r3, #0]
    break;
 800095e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000968:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	091b      	lsrs	r3, r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000970:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <RCC_GetClocksFreq+0x158>)
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	40da      	lsrs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000990:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	0a9b      	lsrs	r3, r3, #10
 8000996:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000998:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <RCC_GetClocksFreq+0x158>)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	40da      	lsrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <RCC_GetClocksFreq+0x14c>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80009b8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	0b5b      	lsrs	r3, r3, #13
 80009be:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <RCC_GetClocksFreq+0x158>)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	40da      	lsrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	; 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40023800 	.word	0x40023800
 80009e8:	00f42400 	.word	0x00f42400
 80009ec:	017d7840 	.word	0x017d7840
 80009f0:	20000000 	.word	0x20000000

080009f4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a0a:	4909      	ldr	r1, [pc, #36]	; (8000a30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a12:	e006      	b.n	8000a22 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4904      	ldr	r1, [pc, #16]	; (8000a30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a4a:	4909      	ldr	r1, [pc, #36]	; (8000a70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000a52:	e006      	b.n	8000a62 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a5e:	4013      	ands	r3, r2
 8000a60:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	889b      	ldrh	r3, [r3, #4]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a86:	b29b      	uxth	r3, r3
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ab0:	887b      	ldrh	r3, [r7, #2]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	095b      	lsrs	r3, r3, #5
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	f003 031f 	and.w	r3, r3, #31
 8000ac0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d107      	bne.n	8000ae2 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	4013      	ands	r3, r2
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e011      	b.n	8000b06 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d107      	bne.n	8000af8 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	8a1b      	ldrh	r3, [r3, #16]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	4013      	ands	r3, r2
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	e006      	b.n	8000b06 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	8a9b      	ldrh	r3, [r3, #20]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	4013      	ands	r3, r2
 8000b04:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000b0e:	2201      	movs	r2, #1
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4013      	ands	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d005      	beq.n	8000b38 <USART_GetITStatus+0xa4>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000b32:	2301      	movs	r3, #1
 8000b34:	74fb      	strb	r3, [r7, #19]
 8000b36:	e001      	b.n	8000b3c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000b3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	371c      	adds	r7, #28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000b56:	2300      	movs	r3, #0
 8000b58:	81fb      	strh	r3, [r7, #14]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	2201      	movs	r2, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000b6e:	89bb      	ldrh	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	801a      	strh	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	da0b      	bge.n	8000bb0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <NVIC_SetPriority+0x4c>)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	3b04      	subs	r3, #4
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bae:	e009      	b.n	8000bc4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <NVIC_SetPriority+0x50>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ffc2 	bl	8000b84 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8000c22:	463b      	mov	r3, r7
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fe37 	bl	8000898 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <TimerInit+0x3c>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	099b      	lsrs	r3, r3, #6
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffcf 	bl	8000bd8 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f7ff ffa0 	bl	8000b84 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8000c44:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <TimerInit+0x40>)
 8000c4c:	f002 fcb3 	bl	80035b6 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	10624dd3 	.word	0x10624dd3
 8000c5c:	20000080 	.word	0x20000080

08000c60 <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]
 8000c74:	e04c      	b.n	8000d10 <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 8000c76:	7dfa      	ldrb	r2, [r7, #23]
 8000c78:	4929      	ldr	r1, [pc, #164]	; (8000d20 <TimerStart+0xc0>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	3310      	adds	r3, #16
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d13e      	bne.n	8000d0a <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8000c8c:	7dfa      	ldrb	r2, [r7, #23]
 8000c8e:	4924      	ldr	r1, [pc, #144]	; (8000d20 <TimerStart+0xc0>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 8000c9e:	7dfa      	ldrb	r2, [r7, #23]
 8000ca0:	491f      	ldr	r1, [pc, #124]	; (8000d20 <TimerStart+0xc0>)
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	3310      	adds	r3, #16
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 8000cb2:	7dfa      	ldrb	r2, [r7, #23]
 8000cb4:	491a      	ldr	r1, [pc, #104]	; (8000d20 <TimerStart+0xc0>)
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	440b      	add	r3, r1
 8000cc0:	330c      	adds	r3, #12
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8000cc6:	7dfa      	ldrb	r2, [r7, #23]
 8000cc8:	4915      	ldr	r1, [pc, #84]	; (8000d20 <TimerStart+0xc0>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3314      	adds	r3, #20
 8000cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cd8:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8000cda:	7dfc      	ldrb	r4, [r7, #23]
 8000cdc:	f000 f872 	bl	8000dc4 <GetMilSecTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	490f      	ldr	r1, [pc, #60]	; (8000d20 <TimerStart+0xc0>)
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4423      	add	r3, r4
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	440b      	add	r3, r1
 8000cee:	3304      	adds	r3, #4
 8000cf0:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 8000cf2:	7dfa      	ldrb	r2, [r7, #23]
 8000cf4:	490a      	ldr	r1, [pc, #40]	; (8000d20 <TimerStart+0xc0>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	3308      	adds	r3, #8
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
 8000d08:	e006      	b.n	8000d18 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	75fb      	strb	r3, [r7, #23]
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	2b0f      	cmp	r3, #15
 8000d14:	d9af      	bls.n	8000c76 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 8000d16:	23ff      	movs	r3, #255	; 0xff
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	20000080 	.word	0x20000080

08000d24 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <TimerStop+0x26>
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	4922      	ldr	r1, [pc, #136]	; (8000dc0 <TimerStop+0x9c>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	440b      	add	r3, r1
 8000d42:	3310      	adds	r3, #16
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <TimerStop+0x2a>
        return 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e031      	b.n	8000db2 <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	491b      	ldr	r1, [pc, #108]	; (8000dc0 <TimerStop+0x9c>)
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	440b      	add	r3, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <TimerStop+0x9c>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3310      	adds	r3, #16
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	4912      	ldr	r1, [pc, #72]	; (8000dc0 <TimerStop+0x9c>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	330c      	adds	r3, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <TimerStop+0x9c>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3308      	adds	r3, #8
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8000d9c:	79fa      	ldrb	r2, [r7, #7]
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <TimerStop+0x9c>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	3304      	adds	r3, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
    
    return 1;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000080 	.word	0x20000080

08000dc4 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <GetMilSecTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000200 	.word	0x20000200

08000ddc <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e068      	b.n	8000eba <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	4938      	ldr	r1, [pc, #224]	; (8000ecc <processTimerScheduler+0xf0>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	440b      	add	r3, r1
 8000df6:	3310      	adds	r3, #16
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d05a      	beq.n	8000eb4 <processTimerScheduler+0xd8>
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f865 	bl	8000ed0 <TimeExpired>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d053      	beq.n	8000eb4 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	492f      	ldr	r1, [pc, #188]	; (8000ecc <processTimerScheduler+0xf0>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3310      	adds	r3, #16
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	492a      	ldr	r1, [pc, #168]	; (8000ecc <processTimerScheduler+0xf0>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3314      	adds	r3, #20
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	4925      	ldr	r1, [pc, #148]	; (8000ecc <processTimerScheduler+0xf0>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	330c      	adds	r3, #12
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d020      	beq.n	8000e8e <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	491f      	ldr	r1, [pc, #124]	; (8000ecc <processTimerScheduler+0xf0>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	330c      	adds	r3, #12
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d014      	beq.n	8000e8e <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	4919      	ldr	r1, [pc, #100]	; (8000ecc <processTimerScheduler+0xf0>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	330c      	adds	r3, #12
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b2d8      	uxtb	r0, r3
 8000e7c:	4913      	ldr	r1, [pc, #76]	; (8000ecc <processTimerScheduler+0xf0>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	440b      	add	r3, r1
 8000e88:	330c      	adds	r3, #12
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	490e      	ldr	r1, [pc, #56]	; (8000ecc <processTimerScheduler+0xf0>)
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	330c      	adds	r3, #12
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d103      	bne.n	8000eae <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff3b 	bl	8000d24 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d993      	bls.n	8000de8 <processTimerScheduler+0xc>
        }
    }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000080 	.word	0x20000080

08000ed0 <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ede:	b672      	cpsid	i
}
 8000ee0:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 8000ee2:	f7ff ff6f 	bl	8000dc4 <GetMilSecTick>
 8000ee6:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d80a      	bhi.n	8000f04 <TimeExpired+0x34>
 8000eee:	79fa      	ldrb	r2, [r7, #7]
 8000ef0:	492b      	ldr	r1, [pc, #172]	; (8000fa0 <TimeExpired+0xd0>)
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	440b      	add	r3, r1
 8000efc:	3310      	adds	r3, #16
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f04:	b662      	cpsie	i
}
 8000f06:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e044      	b.n	8000f96 <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 8000f0c:	79fa      	ldrb	r2, [r7, #7]
 8000f0e:	4924      	ldr	r1, [pc, #144]	; (8000fa0 <TimeExpired+0xd0>)
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d30c      	bcc.n	8000f3e <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	491e      	ldr	r1, [pc, #120]	; (8000fa0 <TimeExpired+0xd0>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	e00e      	b.n	8000f5c <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 8000f3e:	79fa      	ldrb	r2, [r7, #7]
 8000f40:	4917      	ldr	r1, [pc, #92]	; (8000fa0 <TimeExpired+0xd0>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	4910      	ldr	r1, [pc, #64]	; (8000fa0 <TimeExpired+0xd0>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d203      	bcs.n	8000f7c <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f74:	b662      	cpsie	i
}
 8000f76:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e00c      	b.n	8000f96 <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <TimeExpired+0xd0>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f90:	b662      	cpsie	i
}
 8000f92:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 8000f94:	2301      	movs	r3, #1
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000080 	.word	0x20000080

08000fa4 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Handler+0x18>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <SysTick_Handler+0x18>)
 8000fb0:	6013      	str	r3, [r2, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000200 	.word	0x20000200

08000fc0 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc6:	b672      	cpsid	i
}
 8000fc8:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000fca:	f240 5125 	movw	r1, #1317	; 0x525
 8000fce:	480f      	ldr	r0, [pc, #60]	; (800100c <USART2_IRQHandler+0x4c>)
 8000fd0:	f7ff fd60 	bl	8000a94 <USART_GetITStatus>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d112      	bne.n	8001000 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <USART2_IRQHandler+0x50>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <USART2_IRQHandler+0x4c>)
 8000fe2:	f7ff fd47 	bl	8000a74 <USART_ReceiveData>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000fec:	1cfb      	adds	r3, r7, #3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f002 fa4b 	bl	800348c <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000ff6:	f240 5125 	movw	r1, #1317	; 0x525
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <USART2_IRQHandler+0x4c>)
 8000ffc:	f7ff fda5 	bl	8000b4a <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001000:	b662      	cpsie	i
}
 8001002:	bf00      	nop
    }
    __enable_irq();
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40004400 	.word	0x40004400
 8001010:	20000204 	.word	0x20000204

08001014 <delayMicroseconds>:
//ucg_int_t get_tx(void) { return tx; };
//ucg_int_t get_ty(void) { return ty; };
//ucg_t *get_ucg(void) { return &ucg; };

static void delayMicroseconds(uint32_t microseconds)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
//	}
//	uint32_t i;
//	for( i = 0; i < microseconds; i++ )
//	{
//	}
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <ucg_gpio_init>:

static void ucg_gpio_init(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 800102e:	2101      	movs	r1, #1
 8001030:	2007      	movs	r0, #7
 8001032:	f7ff fcdf 	bl	80009f4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001036:	2301      	movs	r3, #1
 8001038:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800103a:	2303      	movs	r3, #3
 800103c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800103e:	2300      	movs	r3, #0
 8001040:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 8001046:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800104a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <ucg_gpio_init+0x54>)
 8001052:	f7ff f99d 	bl	8000390 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 8001056:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800105a:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <ucg_gpio_init+0x58>)
 8001062:	f7ff f995 	bl	8000390 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <ucg_gpio_init+0x5c>)
 8001070:	f7ff f98e 	bl	8000390 <GPIO_Init>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800

08001088 <ucg_com_arduino_send_generic_SW_SPI>:

static void ucg_com_arduino_send_generic_SW_SPI(ucg_t *ucg, uint8_t data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 8001094:	2308      	movs	r3, #8
 8001096:	73fb      	strb	r3, [r7, #15]

  do
  {
    if ( data & 128 )
 8001098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800109c:	2b00      	cmp	r3, #0
 800109e:	da05      	bge.n	80010ac <ucg_com_arduino_send_generic_SW_SPI+0x24>
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80010a6:	f7ff fa02 	bl	80004ae <GPIO_WriteBit>
 80010aa:	e004      	b.n	80010b6 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
    }
    else
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80010b2:	f7ff f9fc 	bl	80004ae <GPIO_WriteBit>
    }
    // no delay required, also Arduino Due is slow enough
    // delay required for ESP32
    delayMicroseconds(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff ffac 	bl	8001014 <delayMicroseconds>
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	2120      	movs	r1, #32
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80010c2:	f7ff f9f4 	bl	80004ae <GPIO_WriteBit>
    delayMicroseconds(1);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff ffa4 	bl	8001014 <delayMicroseconds>
    i--;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2120      	movs	r1, #32
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80010d8:	f7ff f9e9 	bl	80004ae <GPIO_WriteBit>
    delayMicroseconds(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ff99 	bl	8001014 <delayMicroseconds>
    data <<= 1;
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	70fb      	strb	r3, [r7, #3]
  } while( i > 0 );
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1d4      	bne.n	8001098 <ucg_com_arduino_send_generic_SW_SPI+0x10>
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020000 	.word	0x40020000

080010fc <ucg_com_arduino_generic_SW_SPI>:

static int16_t ucg_com_arduino_generic_SW_SPI(ucg_t *ucg, int16_t msg, uint16_t arg, uint8_t *data)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	817b      	strh	r3, [r7, #10]
 800110a:	4613      	mov	r3, r2
 800110c:	813b      	strh	r3, [r7, #8]
  switch(msg)
 800110e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001112:	3b0a      	subs	r3, #10
 8001114:	2b0b      	cmp	r3, #11
 8001116:	f200 80dc 	bhi.w	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800111a:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <ucg_com_arduino_generic_SW_SPI+0x24>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	08001151 	.word	0x08001151
 8001124:	080012d3 	.word	0x080012d3
 8001128:	080011a3 	.word	0x080011a3
 800112c:	080011ad 	.word	0x080011ad
 8001130:	080011bd 	.word	0x080011bd
 8001134:	080011cd 	.word	0x080011cd
 8001138:	080011df 	.word	0x080011df
 800113c:	080011ff 	.word	0x080011ff
 8001140:	08001227 	.word	0x08001227
 8001144:	0800125d 	.word	0x0800125d
 8001148:	0800127b 	.word	0x0800127b
 800114c:	080012cb 	.word	0x080012cb
      /* "data" is a pointer to ucg_com_info_t structure with the following information: */
      /*	((ucg_com_info_t *)data)->serial_clk_speed value in nanoseconds */
      /*	((ucg_com_info_t *)data)->parallel_clk_speed value in nanoseconds */
    
      /* setup pins */
      ucg_gpio_init();
 8001150:	f7ff ff6a 	bl	8001028 <ucg_gpio_init>

      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	4860      	ldr	r0, [pc, #384]	; (80012dc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800115a:	f7ff f9a8 	bl	80004ae <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	485f      	ldr	r0, [pc, #380]	; (80012e0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8001164:	f7ff f9a3 	bl	80004ae <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	485d      	ldr	r0, [pc, #372]	; (80012e4 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 800116e:	f7ff f99e 	bl	80004ae <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001178:	4858      	ldr	r0, [pc, #352]	; (80012dc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800117a:	f7ff f998 	bl	80004ae <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2120      	movs	r1, #32
 8001182:	4856      	ldr	r0, [pc, #344]	; (80012dc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001184:	f7ff f993 	bl	80004ae <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_ENABLE_PORT, SPI1_ENABLE_PIN, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118e:	4854      	ldr	r0, [pc, #336]	; (80012e0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8001190:	f7ff f98d 	bl	80004ae <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_MODE_PORT, SPI1_MODE_PIN, 1);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119a:	4850      	ldr	r0, [pc, #320]	; (80012dc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800119c:	f7ff f987 	bl	80004ae <GPIO_WriteBit>
      break;
 80011a0:	e097      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_POWER_DOWN:
      break;

    case UCG_COM_MSG_DELAY:
      delayMicroseconds(arg);
 80011a2:	893b      	ldrh	r3, [r7, #8]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff35 	bl	8001014 <delayMicroseconds>
      break;
 80011aa:	e092      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_RESET_LINE:
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, arg);
 80011ac:	893b      	ldrh	r3, [r7, #8]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	484b      	ldr	r0, [pc, #300]	; (80012e4 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80011b6:	f7ff f97a 	bl	80004ae <GPIO_WriteBit>
      break;
 80011ba:	e08a      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CS_LINE:
	  GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, arg);
 80011bc:	893b      	ldrh	r3, [r7, #8]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4846      	ldr	r0, [pc, #280]	; (80012e0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80011c6:	f7ff f972 	bl	80004ae <GPIO_WriteBit>
      break;
 80011ca:	e082      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CD_LINE:
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, arg);
 80011cc:	893b      	ldrh	r3, [r7, #8]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d6:	4841      	ldr	r0, [pc, #260]	; (80012dc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80011d8:	f7ff f969 	bl	80004ae <GPIO_WriteBit>
      break;
 80011dc:	e079      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_BYTE:
      ucg_com_arduino_send_generic_SW_SPI(ucg, arg);
 80011de:	893b      	ldrh	r3, [r7, #8]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f7ff ff4f 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
      break;
 80011ea:	e072      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_1_BYTE:
      while( arg > 0 ) {
	    ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff ff48 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
	    arg--;
 80011f8:	893b      	ldrh	r3, [r7, #8]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 80011fe:	893b      	ldrh	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f3      	bne.n	80011ec <ucg_com_arduino_generic_SW_SPI+0xf0>
      }
      break;
 8001204:	e065      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_2_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff ff3b 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff ff34 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001220:	893b      	ldrh	r3, [r7, #8]
 8001222:	3b01      	subs	r3, #1
 8001224:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001226:	893b      	ldrh	r3, [r7, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ec      	bne.n	8001206 <ucg_com_arduino_generic_SW_SPI+0x10a>
      }
      break;
 800122c:	e051      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_3_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4619      	mov	r1, r3
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff ff27 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3301      	adds	r3, #1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff ff20 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[2]);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3302      	adds	r3, #2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff ff19 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001256:	893b      	ldrh	r3, [r7, #8]
 8001258:	3b01      	subs	r3, #1
 800125a:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 800125c:	893b      	ldrh	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1e5      	bne.n	800122e <ucg_com_arduino_generic_SW_SPI+0x132>
      }
      break;
 8001262:	e036      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_STR:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data++);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff ff0a 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001274:	893b      	ldrh	r3, [r7, #8]
 8001276:	3b01      	subs	r3, #1
 8001278:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 800127a:	893b      	ldrh	r3, [r7, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f1      	bne.n	8001264 <ucg_com_arduino_generic_SW_SPI+0x168>
      }
      break;
 8001280:	e027      	b.n	80012d2 <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_CD_DATA_SEQUENCE:
      while(arg > 0)
      {
		if ( *data != 0 )
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d010      	beq.n	80012ac <ucg_com_arduino_generic_SW_SPI+0x1b0>
		{
		  if ( *data == 1 )
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d106      	bne.n	80012a0 <ucg_com_arduino_generic_SW_SPI+0x1a4>
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800129a:	f7ff f908 	bl	80004ae <GPIO_WriteBit>
 800129e:	e005      	b.n	80012ac <ucg_com_arduino_generic_SW_SPI+0x1b0>
		  }
		  else
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80012a8:	f7ff f901 	bl	80004ae <GPIO_WriteBit>
		  }
		}
		data++;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f7ff fee5 	bl	8001088 <ucg_com_arduino_send_generic_SW_SPI>
		data++;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3301      	adds	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
		arg--;
 80012c4:	893b      	ldrh	r3, [r7, #8]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	813b      	strh	r3, [r7, #8]
      while(arg > 0)
 80012ca:	893b      	ldrh	r3, [r7, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1d8      	bne.n	8001282 <ucg_com_arduino_generic_SW_SPI+0x186>
      }
      break;
 80012d0:	bf00      	nop
  }
  return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800

080012e8 <Ucglib4WireSWSPI_begin>:

void Ucglib4WireSWSPI_begin(ucg_t *ucg, uint8_t is_transparent)
{ 
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
  ucg_Init(ucg, ucg_dev_st7735_18x128x128, ucg_ext_st7735_18, ucg_com_arduino_generic_SW_SPI);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <Ucglib4WireSWSPI_begin+0x2c>)
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <Ucglib4WireSWSPI_begin+0x30>)
 80012f8:	4908      	ldr	r1, [pc, #32]	; (800131c <Ucglib4WireSWSPI_begin+0x34>)
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 febc 	bl	8003078 <ucg_Init>
  ucg_SetFontMode(ucg, is_transparent);
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	4619      	mov	r1, r3
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f001 fca0 	bl	8002c4a <ucg_SetFontMode>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	080010fd 	.word	0x080010fd
 8001318:	08002379 	.word	0x08002379
 800131c:	080024a1 	.word	0x080024a1

08001320 <ucg_DrawBox>:
*/

#include "ucg.h"

void ucg_DrawBox(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	4603      	mov	r3, r0
 8001330:	817b      	strh	r3, [r7, #10]
 8001332:	460b      	mov	r3, r1
 8001334:	813b      	strh	r3, [r7, #8]
 8001336:	4613      	mov	r3, r2
 8001338:	80fb      	strh	r3, [r7, #6]
  while( h > 0 )
 800133a:	e014      	b.n	8001366 <ucg_DrawBox+0x46>
  {
    ucg_DrawHLine(ucg, x, y, w);
 800133c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001340:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001344:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f001 ff07 	bl	800315c <ucg_DrawHLine>
    h--;
 800134e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001352:	b29b      	uxth	r3, r3
 8001354:	3b01      	subs	r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	833b      	strh	r3, [r7, #24]
    y++;
 800135a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800135e:	b29b      	uxth	r3, r3
 8001360:	3301      	adds	r3, #1
 8001362:	b29b      	uxth	r3, r3
 8001364:	813b      	strh	r3, [r7, #8]
  while( h > 0 )
 8001366:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	dce6      	bgt.n	800133c <ucg_DrawBox+0x1c>
  }  
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ucg_ClearScreen>:
  - clear the screen with black color
  - reset clip range to max
  - set draw color to white
*/
void ucg_ClearScreen(ucg_t *ucg)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af02      	add	r7, sp, #8
 800137e:	6078      	str	r0, [r7, #4]
  ucg_SetColor(ucg, 0, 0, 0, 0);
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f001 ff04 	bl	8003198 <ucg_SetColor>
  ucg_SetMaxClipRange(ucg);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f001 f84c 	bl	800242e <ucg_SetMaxClipRange>
  ucg_DrawBox(ucg, 0, 0, ucg_GetWidth(ucg), ucg_GetHeight(ucg));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffb8 	bl	8001320 <ucg_DrawBox>
  ucg_SetColor(ucg, 0, 255, 255, 255);
 80013b0:	23ff      	movs	r3, #255	; 0xff
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	23ff      	movs	r3, #255	; 0xff
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	2100      	movs	r1, #0
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f001 feec 	bl	8003198 <ucg_SetColor>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ucg_ccs_init>:
/*
  Setup change from "start" to "end" with a specified amount of "steps".
  After calling this procedure, ccs->current will contain the "start" value.
*/
void ucg_ccs_init(ucg_ccs_t *ccs, uint8_t start, uint8_t end, ucg_int_t steps)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4608      	mov	r0, r1
 80013d2:	4611      	mov	r1, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	70fb      	strb	r3, [r7, #3]
 80013da:	460b      	mov	r3, r1
 80013dc:	70bb      	strb	r3, [r7, #2]
 80013de:	4613      	mov	r3, r2
 80013e0:	803b      	strh	r3, [r7, #0]
  ccs->start = start;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	78fa      	ldrb	r2, [r7, #3]
 80013e6:	705a      	strb	r2, [r3, #1]
  ccs->num = end-start;
 80013e8:	78bb      	ldrb	r3, [r7, #2]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	809a      	strh	r2, [r3, #4]
  ccs->den = steps-1;
 80013fa:	883b      	ldrh	r3, [r7, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b21a      	sxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	811a      	strh	r2, [r3, #8]
  ccs->dir = 1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	805a      	strh	r2, [r3, #2]
  
  ccs->quot = ccs->num / ccs->den;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800141a:	fb92 f3f3 	sdiv	r3, r2, r3
 800141e:	b21a      	sxth	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	80da      	strh	r2, [r3, #6]
  if ( ccs->num < 0 )
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	da0c      	bge.n	8001448 <ucg_ccs_init+0x80>
  {
    ccs->num = -ccs->num;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001434:	b29b      	uxth	r3, r3
 8001436:	425b      	negs	r3, r3
 8001438:	b29b      	uxth	r3, r3
 800143a:	b21a      	sxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	809a      	strh	r2, [r3, #4]
    ccs->dir = -1;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001446:	805a      	strh	r2, [r3, #2]
  }
  ccs->rem = ccs->num % ccs->den;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001454:	fb93 f1f2 	sdiv	r1, r3, r2
 8001458:	fb01 f202 	mul.w	r2, r1, r2
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	b21a      	sxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	815a      	strh	r2, [r3, #10]
  
  ccs->frac = ccs->den/2;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800146a:	0fda      	lsrs	r2, r3, #31
 800146c:	4413      	add	r3, r2
 800146e:	105b      	asrs	r3, r3, #1
 8001470:	b21a      	sxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	819a      	strh	r2, [r3, #12]
  ccs->current = start;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	78fa      	ldrb	r2, [r7, #3]
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <ucg_ccs_step>:
/*
  Make one step towards the "end" value. 
  ccs->curront will contain the updated value.
*/
void ucg_ccs_step(ucg_ccs_t *ccs)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  
  ccs->current += ccs->quot;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4413      	add	r3, r2
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	701a      	strb	r2, [r3, #0]
  ccs->frac += ccs->rem;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	819a      	strh	r2, [r3, #12]
  if ( ccs->frac >= ccs->den )
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	db16      	blt.n	80014fc <ucg_ccs_step+0x74>
  {
    ccs->current += ccs->dir;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4413      	add	r3, r2
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	701a      	strb	r2, [r3, #0]
    ccs->frac -= ccs->den;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	819a      	strh	r2, [r3, #12]
  }  
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <ucg_ccs_seek>:
  
  Seek to the specified "pos"ition.
  "pos" must be between 0 and "end"-1
*/
void ucg_ccs_seek(ucg_ccs_t *ccs, ucg_int_t pos)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  ucg_int_t p;
  ccs->current = ccs->quot;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	701a      	strb	r2, [r3, #0]
  ccs->current *= pos;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	fb12 f303 	smulbb	r3, r2, r3
 800152c:	b2da      	uxtb	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	701a      	strb	r2, [r3, #0]
  p = ccs->rem * pos  + ccs->den/2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001538:	b29a      	uxth	r2, r3
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	fb12 f303 	smulbb	r3, r2, r3
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001548:	0fd9      	lsrs	r1, r3, #31
 800154a:	440b      	add	r3, r1
 800154c:	105b      	asrs	r3, r3, #1
 800154e:	b21b      	sxth	r3, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	b29b      	uxth	r3, r3
 8001556:	81fb      	strh	r3, [r7, #14]
  if ( ccs->dir >= 0 )
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0e      	blt.n	8001580 <ucg_ccs_seek+0x78>
    ccs->current += p / ccs->den;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001570:	fb93 f3f1 	sdiv	r3, r3, r1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2da      	uxtb	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e00d      	b.n	800159c <ucg_ccs_seek+0x94>
  else
    ccs->current -= p / ccs->den;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800158e:	fb93 f3f1 	sdiv	r3, r3, r1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	b2da      	uxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	701a      	strb	r2, [r3, #0]
  ccs->frac = p % ccs->den;
 800159c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80015a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80015aa:	fb01 f202 	mul.w	r2, r1, r2
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	819a      	strh	r2, [r3, #12]
  ccs->current += ccs->start;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4413      	add	r3, r2
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	701a      	strb	r2, [r3, #0]
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <ucg_clip_is_x_visible>:

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg) UCG_NOINLINE;
static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg) UCG_NOINLINE;

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.x;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015de:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.x;
 80015e0:	89fa      	ldrh	r2, [r7, #14]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 80015f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da01      	bge.n	80015fc <ucg_clip_is_x_visible+0x2a>
    return 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e009      	b.n	8001610 <ucg_clip_is_x_visible+0x3e>
  if ( t >= ucg->clip_box.size.w )
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8001602:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001606:	429a      	cmp	r2, r3
 8001608:	db01      	blt.n	800160e <ucg_clip_is_x_visible+0x3c>
    return 0;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <ucg_clip_is_x_visible+0x3e>
  
  return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <ucg_clip_is_y_visible>:

static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.y;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001628:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.y;
 800162a:	89fa      	ldrh	r2, [r7, #14]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8001632:	b29b      	uxth	r3, r3
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 800163a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800163e:	2b00      	cmp	r3, #0
 8001640:	da01      	bge.n	8001646 <ucg_clip_is_y_visible+0x2a>
    return 0;
 8001642:	2300      	movs	r3, #0
 8001644:	e009      	b.n	800165a <ucg_clip_is_y_visible+0x3e>
  if ( t >= ucg->clip_box.size.h )
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800164c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001650:	429a      	cmp	r2, r3
 8001652:	db01      	blt.n	8001658 <ucg_clip_is_y_visible+0x3c>
    return 0;
 8001654:	2300      	movs	r3, #0
 8001656:	e000      	b.n	800165a <ucg_clip_is_y_visible+0x3e>
  
  return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <ucg_clip_intersection>:
  Assumptions:
    a <= b
    c <= d
*/
static ucg_int_t ucg_clip_intersection(ucg_int_t *ap, ucg_int_t *bp, ucg_int_t c, ucg_int_t d)
{
 8001666:	b480      	push	{r7}
 8001668:	b087      	sub	sp, #28
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	4611      	mov	r1, r2
 8001672:	461a      	mov	r2, r3
 8001674:	460b      	mov	r3, r1
 8001676:	80fb      	strh	r3, [r7, #6]
 8001678:	4613      	mov	r3, r2
 800167a:	80bb      	strh	r3, [r7, #4]
  ucg_int_t a = *ap;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	82fb      	strh	r3, [r7, #22]
  ucg_int_t b = *bp;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	82bb      	strh	r3, [r7, #20]
  
  if ( a >= d )
 8001688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	db01      	blt.n	8001698 <ucg_clip_intersection+0x32>
    return 0;
 8001694:	2300      	movs	r3, #0
 8001696:	e01a      	b.n	80016ce <ucg_clip_intersection+0x68>
  if ( b <= c )
 8001698:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800169c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dc01      	bgt.n	80016a8 <ucg_clip_intersection+0x42>
    return 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e012      	b.n	80016ce <ucg_clip_intersection+0x68>
  if ( a < c )
 80016a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	da02      	bge.n	80016ba <ucg_clip_intersection+0x54>
    *ap = c;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 80016ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dd02      	ble.n	80016cc <ucg_clip_intersection+0x66>
    *bp = d;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	88ba      	ldrh	r2, [r7, #4]
 80016ca:	801a      	strh	r2, [r3, #0]
  return 1;
 80016cc:	2301      	movs	r3, #1
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <ucg_clip_is_pixel_visible>:

ucg_int_t ucg_clip_is_pixel_visible(ucg_t *ucg)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  if ( ucg_clip_is_x_visible(ucg) == 0 )
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff75 	bl	80015d2 <ucg_clip_is_x_visible>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <ucg_clip_is_pixel_visible+0x18>
    return 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e008      	b.n	8001704 <ucg_clip_is_pixel_visible+0x2a>
  if ( ucg_clip_is_y_visible(ucg) == 0 )
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ff92 	bl	800161c <ucg_clip_is_y_visible>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <ucg_clip_is_pixel_visible+0x28>
    return 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <ucg_clip_is_pixel_visible+0x2a>
  return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <ucg_clip_l90fx>:
/*
  assumes, that ucg->arg contains data for l90fx and does clipping 
  against ucg->clip_box
*/
ucg_int_t ucg_clip_l90fx(ucg_t *ucg)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  ucg_int_t a;
  ucg_int_t b;
  ucg->arg.offset = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	861a      	strh	r2, [r3, #48]	; 0x30
  switch(ucg->arg.dir)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001720:	2b03      	cmp	r3, #3
 8001722:	f200 816d 	bhi.w	8001a00 <ucg_clip_l90fx+0x2f4>
 8001726:	a201      	add	r2, pc, #4	; (adr r2, 800172c <ucg_clip_l90fx+0x20>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	0800173d 	.word	0x0800173d
 8001730:	080017e3 	.word	0x080017e3
 8001734:	08001889 	.word	0x08001889
 8001738:	08001945 	.word	0x08001945
  {
    case 0:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff6d 	bl	800161c <ucg_clip_is_y_visible>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <ucg_clip_l90fx+0x40>
	return 0; 
 8001748:	2300      	movs	r3, #0
 800174a:	e15a      	b.n	8001a02 <ucg_clip_l90fx+0x2f6>
      a = ucg->arg.pixel.pos.x;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001752:	81fb      	strh	r3, [r7, #14]
      b = a;
 8001754:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001758:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001760:	b29a      	uxth	r2, r3
 8001762:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4413      	add	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21b      	sxth	r3, r3
 800176e:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800177c:	b29a      	uxth	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8001784:	b29b      	uxth	r3, r3
 8001786:	4413      	add	r3, r2
 8001788:	b29b      	uxth	r3, r3
 800178a:	b21b      	sxth	r3, r3
 800178c:	f107 010c 	add.w	r1, r7, #12
 8001790:	f107 000e 	add.w	r0, r7, #14
 8001794:	4622      	mov	r2, r4
 8001796:	f7ff ff66 	bl	8001666 <ucg_clip_intersection>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <ucg_clip_l90fx+0x98>
	return 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e12e      	b.n	8001a02 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.offset = a - ucg->arg.pixel.pos.x;
 80017a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = a;
 80017bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	849a      	strh	r2, [r3, #36]	; 0x24
      b -= a;
 80017c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 80017d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 80017e0:	e10e      	b.n	8001a00 <ucg_clip_l90fx+0x2f4>
    case 1:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fef5 	bl	80015d2 <ucg_clip_is_x_visible>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <ucg_clip_l90fx+0xe6>
	return 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e107      	b.n	8001a02 <ucg_clip_l90fx+0x2f6>
      
      a = ucg->arg.pixel.pos.y;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80017f8:	81fb      	strh	r3, [r7, #14]
      b = a;
 80017fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fe:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001806:	b29a      	uxth	r2, r3
 8001808:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4413      	add	r3, r2
 8001810:	b29b      	uxth	r3, r3
 8001812:	b21b      	sxth	r3, r3
 8001814:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8001822:	b29a      	uxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800182a:	b29b      	uxth	r3, r3
 800182c:	4413      	add	r3, r2
 800182e:	b29b      	uxth	r3, r3
 8001830:	b21b      	sxth	r3, r3
 8001832:	f107 010c 	add.w	r1, r7, #12
 8001836:	f107 000e 	add.w	r0, r7, #14
 800183a:	4622      	mov	r2, r4
 800183c:	f7ff ff13 	bl	8001666 <ucg_clip_intersection>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <ucg_clip_l90fx+0x13e>
	return 0;
 8001846:	2300      	movs	r3, #0
 8001848:	e0db      	b.n	8001a02 <ucg_clip_l90fx+0x2f6>

      ucg->arg.offset = a - ucg->arg.pixel.pos.y;
 800184a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184e:	b29a      	uxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001856:	b29b      	uxth	r3, r3
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	b29b      	uxth	r3, r3
 800185c:	b21a      	sxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = a;
 8001862:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	84da      	strh	r2, [r3, #38]	; 0x26
      b -= a;
 800186a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800186e:	b29a      	uxth	r2, r3
 8001870:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001874:	b29b      	uxth	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b29b      	uxth	r3, r3
 800187a:	b21b      	sxth	r3, r3
 800187c:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 800187e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 8001886:	e0bb      	b.n	8001a00 <ucg_clip_l90fx+0x2f4>
    case 2:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fec7 	bl	800161c <ucg_clip_is_y_visible>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <ucg_clip_l90fx+0x18c>
	return 0;
 8001894:	2300      	movs	r3, #0
 8001896:	e0b4      	b.n	8001a02 <ucg_clip_l90fx+0x2f6>
      
      b = ucg->arg.pixel.pos.x;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800189e:	81bb      	strh	r3, [r7, #12]
      b++;
 80018a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 80018ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018b2:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 80018b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	f107 010c 	add.w	r1, r7, #12
 80018ea:	f107 000e 	add.w	r0, r7, #14
 80018ee:	4622      	mov	r2, r4
 80018f0:	f7ff feb9 	bl	8001666 <ucg_clip_intersection>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <ucg_clip_l90fx+0x1f2>
	return 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e081      	b.n	8001a02 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 80018fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001902:	b29a      	uxth	r2, r3
 8001904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001908:	b29b      	uxth	r3, r3
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	b29b      	uxth	r3, r3
 800190e:	b21a      	sxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8001914:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	b21b      	sxth	r3, r3
 8001920:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.x-b;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001928:	b29a      	uxth	r2, r3
 800192a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800192e:	b29b      	uxth	r3, r3
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b29b      	uxth	r3, r3
 8001934:	b21a      	sxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = b;
 800193a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	849a      	strh	r2, [r3, #36]	; 0x24
      
      break;
 8001942:	e05d      	b.n	8001a00 <ucg_clip_l90fx+0x2f4>
    case 3:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fe44 	bl	80015d2 <ucg_clip_is_x_visible>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <ucg_clip_l90fx+0x248>
	return 0;
 8001950:	2300      	movs	r3, #0
 8001952:	e056      	b.n	8001a02 <ucg_clip_l90fx+0x2f6>

      b = ucg->arg.pixel.pos.y;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800195a:	81bb      	strh	r3, [r7, #12]
      b++;
 800195c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001960:	b29b      	uxth	r3, r3
 8001962:	3301      	adds	r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 800196a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800196e:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 8001970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001974:	b29a      	uxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800197c:	b29b      	uxth	r3, r3
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	b29b      	uxth	r3, r3
 8001982:	b21b      	sxth	r3, r3
 8001984:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800199a:	b29b      	uxth	r3, r3
 800199c:	4413      	add	r3, r2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	f107 010c 	add.w	r1, r7, #12
 80019a6:	f107 000e 	add.w	r0, r7, #14
 80019aa:	4622      	mov	r2, r4
 80019ac:	f7ff fe5b 	bl	8001666 <ucg_clip_intersection>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <ucg_clip_l90fx+0x2ae>
	return 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e023      	b.n	8001a02 <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 80019ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 80019d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b21b      	sxth	r3, r3
 80019dc:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.y-b;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = b;
 80019f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	84da      	strh	r2, [r3, #38]	; 0x26
      
      
      break;
 80019fe:	bf00      	nop
  }

  return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop

08001a0c <ucg_clip_l90se>:
  return 1;
}
*/

ucg_int_t ucg_clip_l90se(ucg_t *ucg)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if ( ucg_clip_l90fx(ucg) == 0 )
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fe79 	bl	800170c <ucg_clip_l90fx>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <ucg_clip_l90se+0x18>
      return 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e019      	b.n	8001a58 <ucg_clip_l90se+0x4c>
  for ( i = 0; i < 3; i++ )
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e012      	b.n	8001a50 <ucg_clip_l90se+0x44>
  {
    ucg_ccs_seek(ucg->arg.ccs_line+i, ucg->arg.offset);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	18ca      	adds	r2, r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f7ff fd5f 	bl	8001508 <ucg_ccs_seek>
  for ( i = 0; i < 3; i++ )
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d9e9      	bls.n	8001a2a <ucg_clip_l90se+0x1e>
  }  
  return 1;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <ucg_com_PowerDown>:
  return 1;
}


void ucg_com_PowerDown(ucg_t *ucg)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ( (ucg->com_status & UCG_COM_STATUS_MASK_POWER) != 0 )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <ucg_com_PowerDown+0x24>
    ucg->com_cb(ucg, UCG_COM_MSG_POWER_DOWN, 0, NULL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69dc      	ldr	r4, [r3, #28]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	210b      	movs	r1, #11
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	47a0      	blx	r4
  ucg->com_status &= ~UCG_COM_STATUS_MASK_POWER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8001a8a:	f023 0308 	bic.w	r3, r3, #8
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}

08001a9e <ucg_com_PowerUp>:

/*
  clk_speed in nano-seconds, range: 0..4095
*/
int16_t ucg_com_PowerUp(ucg_t *ucg, uint16_t serial_clk_speed, uint16_t parallel_clk_speed)
{
 8001a9e:	b590      	push	{r4, r7, lr}
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	803b      	strh	r3, [r7, #0]
  int16_t r;
  ucg_com_info_t com_info;
  com_info.serial_clk_speed = serial_clk_speed;
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	813b      	strh	r3, [r7, #8]
  com_info.parallel_clk_speed = parallel_clk_speed;
 8001ab2:	883b      	ldrh	r3, [r7, #0]
 8001ab4:	817b      	strh	r3, [r7, #10]
  
  ucg_com_PowerDown(ucg);  
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffd2 	bl	8001a60 <ucg_com_PowerDown>
  ucg->com_initial_change_sent = 0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  r = ucg->com_cb(ucg, UCG_COM_MSG_POWER_UP, 0UL, (uint8_t *)&com_info);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69dc      	ldr	r4, [r3, #28]
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	2200      	movs	r2, #0
 8001ace:	210a      	movs	r1, #10
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	47a0      	blx	r4
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8001ad8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <ucg_com_PowerUp+0x54>
  {
    ucg->com_status |= UCG_COM_STATUS_MASK_POWER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  }
  return r;
 8001af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}

08001afe <ucg_com_SetLineStatus>:

void ucg_com_SetLineStatus(ucg_t *ucg, uint8_t level, uint8_t mask, uint8_t msg)
{
 8001afe:	b590      	push	{r4, r7, lr}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	4608      	mov	r0, r1
 8001b08:	4611      	mov	r1, r2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	70fb      	strb	r3, [r7, #3]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70bb      	strb	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  if ( level == 0 )
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d131      	bne.n	8001b82 <ucg_com_SetLineStatus+0x84>
  {
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == mask )
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8001b24:	78bb      	ldrb	r3, [r7, #2]
 8001b26:	4013      	ands	r3, r2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <ucg_com_SetLineStatus+0x42>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8001b34:	78bb      	ldrb	r3, [r7, #2]
 8001b36:	4013      	ands	r3, r2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	78ba      	ldrb	r2, [r7, #2]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d14b      	bne.n	8001bd8 <ucg_com_SetLineStatus+0xda>
    {
      ucg->com_cb(ucg, msg, level, NULL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69dc      	ldr	r4, [r3, #28]
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	b219      	sxth	r1, r3
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	47a0      	blx	r4
      ucg->com_status &= ~mask;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8001b58:	b25a      	sxtb	r2, r3
 8001b5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	4013      	ands	r3, r2
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8001b74:	78bb      	ldrb	r3, [r7, #2]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
      ucg->com_cb(ucg, msg, level, NULL);
      ucg->com_status |= mask;
      ucg->com_initial_change_sent |= mask;
    }
  }
}
 8001b80:	e02a      	b.n	8001bd8 <ucg_com_SetLineStatus+0xda>
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == 0 )
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8001b88:	78bb      	ldrb	r3, [r7, #2]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <ucg_com_SetLineStatus+0xa4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8001b98:	78bb      	ldrb	r3, [r7, #2]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d11a      	bne.n	8001bd8 <ucg_com_SetLineStatus+0xda>
      ucg->com_cb(ucg, msg, level, NULL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69dc      	ldr	r4, [r3, #28]
 8001ba6:	787b      	ldrb	r3, [r7, #1]
 8001ba8:	b219      	sxth	r1, r3
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	2300      	movs	r3, #0
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	47a0      	blx	r4
      ucg->com_status |= mask;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8001bba:	78bb      	ldrb	r3, [r7, #2]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8001bcc:	78bb      	ldrb	r3, [r7, #2]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <ucg_com_SetResetLineStatus>:

void ucg_com_SetResetLineStatus(ucg_t *ucg, uint8_t level)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_RESET, UCG_COM_MSG_CHANGE_RESET_LINE);
 8001bec:	78f9      	ldrb	r1, [r7, #3]
 8001bee:	230d      	movs	r3, #13
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff83 	bl	8001afe <ucg_com_SetLineStatus>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <ucg_com_SetCSLineStatus>:

void ucg_com_SetCSLineStatus(ucg_t *ucg, uint8_t level)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CS, UCG_COM_MSG_CHANGE_CS_LINE);
 8001c0c:	78f9      	ldrb	r1, [r7, #3]
 8001c0e:	230e      	movs	r3, #14
 8001c10:	2202      	movs	r2, #2
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff73 	bl	8001afe <ucg_com_SetLineStatus>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <ucg_com_SetCDLineStatus>:

void ucg_com_SetCDLineStatus(ucg_t *ucg, uint8_t level)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CD, UCG_COM_MSG_CHANGE_CD_LINE);
 8001c2c:	78f9      	ldrb	r1, [r7, #3]
 8001c2e:	230f      	movs	r3, #15
 8001c30:	2201      	movs	r2, #1
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff63 	bl	8001afe <ucg_com_SetLineStatus>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <ucg_com_DelayMicroseconds>:

/* delay in microseconds */
void ucg_com_DelayMicroseconds(ucg_t *ucg, uint16_t delay)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  ucg->com_cb(ucg, UCG_COM_MSG_DELAY, delay, NULL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69dc      	ldr	r4, [r3, #28]
 8001c50:	887a      	ldrh	r2, [r7, #2]
 8001c52:	2300      	movs	r3, #0
 8001c54:	210c      	movs	r1, #12
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	47a0      	blx	r4
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}

08001c62 <ucg_com_DelayMilliseconds>:

/* delay in milliseconds */
void ucg_com_DelayMilliseconds(ucg_t *ucg, uint16_t delay)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 8001c6e:	e007      	b.n	8001c80 <ucg_com_DelayMilliseconds+0x1e>
  {
    ucg_com_DelayMicroseconds(ucg, 1000);
 8001c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe3 	bl	8001c40 <ucg_com_DelayMicroseconds>
    delay--;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f4      	bne.n	8001c70 <ucg_com_DelayMilliseconds+0xe>
  }
}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <ucg_com_SendByte>:


#ifndef ucg_com_SendByte
void ucg_com_SendByte(ucg_t *ucg, uint8_t byte)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, byte, NULL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69dc      	ldr	r4, [r3, #28]
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	47a0      	blx	r4
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <ucg_com_SendStringP>:
{
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_STR, cnt, (uint8_t *)byte_ptr);
}

void ucg_com_SendStringP(ucg_t *ucg, uint16_t cnt, const ucg_pgm_uint8_t *byte_ptr)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	817b      	strh	r3, [r7, #10]
  uint8_t b;
  while( cnt > 0 )
 8001cc2:	e010      	b.n	8001ce6 <ucg_com_SendStringP+0x32>
  {
    b = ucg_pgm_read(byte_ptr);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	75fb      	strb	r3, [r7, #23]
    //b = *byte_ptr;
    ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, b, NULL);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	69dc      	ldr	r4, [r3, #28]
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	47a0      	blx	r4
    byte_ptr++;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
    cnt--;
 8001ce0:	897b      	ldrh	r3, [r7, #10]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	817b      	strh	r3, [r7, #10]
  while( cnt > 0 )
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1eb      	bne.n	8001cc4 <ucg_com_SendStringP+0x10>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd90      	pop	{r4, r7, pc}

08001cf6 <ucg_com_SendCmdArg>:
#define END()					0x00

*/

static void ucg_com_SendCmdArg(ucg_t *ucg, const ucg_pgm_uint8_t *data, uint8_t cmd_cnt, uint8_t arg_cnt)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	4611      	mov	r1, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	460b      	mov	r3, r1
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	71bb      	strb	r3, [r7, #6]
  ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd>>1)&1 );
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff ff7e 	bl	8001c20 <ucg_com_SetCDLineStatus>
  ucg_com_SendStringP(ucg, cmd_cnt, data);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff ffc1 	bl	8001cb4 <ucg_com_SendStringP>
  if ( arg_cnt > 0 )
 8001d32:	79bb      	ldrb	r3, [r7, #6]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d014      	beq.n	8001d62 <ucg_com_SendCmdArg+0x6c>
  {
    data += cmd_cnt;
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
    ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f7ff ff66 	bl	8001c20 <ucg_com_SetCDLineStatus>
    ucg_com_SendStringP(ucg, arg_cnt, data);
 8001d54:	79bb      	ldrb	r3, [r7, #6]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff ffa9 	bl	8001cb4 <ucg_com_SendStringP>
  }
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <ucg_com_SendCmdSeq>:


//void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint8_t hi;
  uint8_t lo;

  for(;;)
  {
    b = ucg_pgm_read(data);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	73fb      	strb	r3, [r7, #15]
    //b = *data;
    hi = (b) >> 4;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	73bb      	strb	r3, [r7, #14]
    lo = (b) & 0x0f;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	737b      	strb	r3, [r7, #13]
    switch( hi )
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	2b0f      	cmp	r3, #15
 8001d8e:	f200 8127 	bhi.w	8001fe0 <ucg_com_SendCmdSeq+0x274>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <ucg_com_SendCmdSeq+0x2c>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001fe1 	.word	0x08001fe1
 8001d9c:	08001dd9 	.word	0x08001dd9
 8001da0:	08001dd9 	.word	0x08001dd9
 8001da4:	08001dd9 	.word	0x08001dd9
 8001da8:	08001fe1 	.word	0x08001fe1
 8001dac:	08001fe1 	.word	0x08001fe1
 8001db0:	08001df9 	.word	0x08001df9
 8001db4:	08001e2b 	.word	0x08001e2b
 8001db8:	08001e6f 	.word	0x08001e6f
 8001dbc:	08001e9b 	.word	0x08001e9b
 8001dc0:	08001ec7 	.word	0x08001ec7
 8001dc4:	08001f27 	.word	0x08001f27
 8001dc8:	08001fe1 	.word	0x08001fe1
 8001dcc:	08001fe1 	.word	0x08001fe1
 8001dd0:	08001fe1 	.word	0x08001fe1
 8001dd4:	08001f87 	.word	0x08001f87
      case 0:
	return;		/* end marker */
      case 1:
      case 2:
      case 3:
	ucg_com_SendCmdArg(ucg, data+1, hi, lo);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	1c59      	adds	r1, r3, #1
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	7bba      	ldrb	r2, [r7, #14]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff88 	bl	8001cf6 <ucg_com_SendCmdArg>
	data+=1+hi+lo;
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	7b7b      	ldrb	r3, [r7, #13]
 8001dec:	4413      	add	r3, r2
 8001dee:	461a      	mov	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	603b      	str	r3, [r7, #0]
	break;
 8001df6:	e0f2      	b.n	8001fde <ucg_com_SendCmdSeq+0x272>
      case 6:
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff0a 	bl	8001c20 <ucg_com_SetCDLineStatus>
	ucg_com_SendStringP(ucg, lo, data+1);
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	b299      	uxth	r1, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	461a      	mov	r2, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ff4c 	bl	8001cb4 <ucg_com_SendStringP>
	data+=1+lo;      
 8001e1c:	7b7b      	ldrb	r3, [r7, #13]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	461a      	mov	r2, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	603b      	str	r3, [r7, #0]
	break;
 8001e28:	e0d9      	b.n	8001fde <ucg_com_SendCmdSeq+0x272>
      case 7:	/* note: 0x070 is used to set data line status */
	ucg_com_SetCDLineStatus(ucg, ((ucg->com_cfg_cd>>1)&1)^1 );
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4619      	mov	r1, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff feeb 	bl	8001c20 <ucg_com_SetCDLineStatus>
	if ( lo > 0 )
 8001e4a:	7b7b      	ldrb	r3, [r7, #13]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <ucg_com_SendCmdSeq+0xf4>
	  ucg_com_SendStringP(ucg, lo, data+1);
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	b299      	uxth	r1, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ff2a 	bl	8001cb4 <ucg_com_SendStringP>
	data+=1+lo;      
 8001e60:	7b7b      	ldrb	r3, [r7, #13]
 8001e62:	3301      	adds	r3, #1
 8001e64:	461a      	mov	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	603b      	str	r3, [r7, #0]
	break;
 8001e6c:	e0b7      	b.n	8001fde <ucg_com_SendCmdSeq+0x272>
      case 8:
	data++;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMilliseconds(ucg, (((uint16_t)lo)<<8) + b );
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fee8 	bl	8001c62 <ucg_com_DelayMilliseconds>
	data++;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	603b      	str	r3, [r7, #0]
	break;
 8001e98:	e0a1      	b.n	8001fde <ucg_com_SendCmdSeq+0x272>
      case 9:
	data++;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMicroseconds(ucg, (((uint16_t)lo)<<8) + b );
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fec1 	bl	8001c40 <ucg_com_DelayMicroseconds>
	data++;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	603b      	str	r3, [r7, #0]
	break;
 8001ec4:	e08b      	b.n	8001fde <ucg_com_SendCmdSeq+0x272>
      case 10:
	data++;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	73fb      	strb	r3, [r7, #15]
	data++;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	733b      	strb	r3, [r7, #12]
	data++;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fe94 	bl	8001c20 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f06:	441a      	add	r2, r3
 8001f08:	7b7b      	ldrb	r3, [r7, #13]
 8001f0a:	fa42 f303 	asr.w	r3, r2, r3
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	4013      	ands	r3, r2
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	7b3b      	ldrb	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff feb6 	bl	8001c90 <ucg_com_SendByte>
	//data+=2;
	break;
 8001f24:	e05b      	b.n	8001fde <ucg_com_SendCmdSeq+0x272>
      case 11:
	data++;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	73fb      	strb	r3, [r7, #15]
	data++;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	733b      	strb	r3, [r7, #12]
	data++;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4619      	mov	r1, r3
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fe64 	bl	8001c20 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f66:	441a      	add	r2, r3
 8001f68:	7b7b      	ldrb	r3, [r7, #13]
 8001f6a:	fa42 f303 	asr.w	r3, r2, r3
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	4013      	ands	r3, r2
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	7b3b      	ldrb	r3, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fe86 	bl	8001c90 <ucg_com_SendByte>
	//data+=2;
	break;
 8001f84:	e02b      	b.n	8001fde <ucg_com_SendCmdSeq+0x272>
      case 15:
	hi = lo >> 2;
 8001f86:	7b7b      	ldrb	r3, [r7, #13]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	73bb      	strb	r3, [r7, #14]
	lo &= 3;
 8001f8c:	7b7b      	ldrb	r3, [r7, #13]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	737b      	strb	r3, [r7, #13]
	switch(hi)
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d018      	beq.n	8001fcc <ucg_com_SendCmdSeq+0x260>
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	dc1b      	bgt.n	8001fd6 <ucg_com_SendCmdSeq+0x26a>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <ucg_com_SendCmdSeq+0x23c>
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d009      	beq.n	8001fba <ucg_com_SendCmdSeq+0x24e>
 8001fa6:	e016      	b.n	8001fd6 <ucg_com_SendCmdSeq+0x26a>
	{
	  case 0:
	    ucg_com_SetResetLineStatus(ucg, lo&1);
 8001fa8:	7b7b      	ldrb	r3, [r7, #13]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe14 	bl	8001be0 <ucg_com_SetResetLineStatus>
	    break;
 8001fb8:	e00d      	b.n	8001fd6 <ucg_com_SendCmdSeq+0x26a>
	  case 1:
	    ucg_com_SetCSLineStatus(ucg, lo&1);
 8001fba:	7b7b      	ldrb	r3, [r7, #13]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fe1b 	bl	8001c00 <ucg_com_SetCSLineStatus>
	    break;
 8001fca:	e004      	b.n	8001fd6 <ucg_com_SendCmdSeq+0x26a>
	  case 3:
	    ucg->com_cfg_cd = lo;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7b7a      	ldrb	r2, [r7, #13]
 8001fd0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	    break;
 8001fd4:	bf00      	nop
	}
	data++;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	603b      	str	r3, [r7, #0]
	break;
 8001fdc:	bf00      	nop
    b = ucg_pgm_read(data);
 8001fde:	e6ca      	b.n	8001d76 <ucg_com_SendCmdSeq+0xa>
      default:
	return;
 8001fe0:	bf00      	nop
    }  
  }
}
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <ucg_dev_default_cb>:
  this should be (finally) called by any other device callback to handle
  messages, which are not yet handled.
*/

ucg_int_t ucg_dev_default_cb(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8001ff6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d00a      	beq.n	8002014 <ucg_dev_default_cb+0x2c>
 8001ffe:	2b17      	cmp	r3, #23
 8002000:	d10f      	bne.n	8002022 <ucg_dev_default_cb+0x3a>
  {
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	4798      	blx	r3
 8002010:	4603      	mov	r3, r0
 8002012:	e007      	b.n	8002024 <ucg_dev_default_cb+0x3c>
    case UCG_MSG_SET_CLIP_BOX:
      ucg->clip_box = *(ucg_box_t *)data;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	3370      	adds	r3, #112	; 0x70
 800201a:	6810      	ldr	r0, [r2, #0]
 800201c:	6851      	ldr	r1, [r2, #4]
 800201e:	c303      	stmia	r3!, {r0, r1}
      break;
 8002020:	bf00      	nop
  }
  return 1;	/* all ok */
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <ucg_ext_none>:

/*
  will be used as default cb if no extentions callback is provided
*/
ucg_int_t ucg_ext_none(ucg_t *ucg, ucg_int_t msg, void *data)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	460b      	mov	r3, r1
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	817b      	strh	r3, [r7, #10]
  return 1;	/* all ok */  
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <ucg_handle_st7735_l90fx>:
  UCG_DATA(),								/* change to data mode */
  UCG_END()
};

ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  if ( ucg_clip_l90fx(ucg) != 0 )
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fb5b 	bl	800170c <ucg_clip_l90fx>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d056      	beq.n	800210a <ucg_handle_st7735_l90fx+0xc2>
  {
    switch(ucg->arg.dir)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002062:	2b02      	cmp	r3, #2
 8002064:	d010      	beq.n	8002088 <ucg_handle_st7735_l90fx+0x40>
 8002066:	2b02      	cmp	r3, #2
 8002068:	dc20      	bgt.n	80020ac <ucg_handle_st7735_l90fx+0x64>
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <ucg_handle_st7735_l90fx+0x2c>
 800206e:	2b01      	cmp	r3, #1
 8002070:	d005      	beq.n	800207e <ucg_handle_st7735_l90fx+0x36>
 8002072:	e01b      	b.n	80020ac <ucg_handle_st7735_l90fx+0x64>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8002074:	4927      	ldr	r1, [pc, #156]	; (8002114 <ucg_handle_st7735_l90fx+0xcc>)
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fe78 	bl	8001d6c <ucg_com_SendCmdSeq>
	break;
 800207c:	e028      	b.n	80020d0 <ucg_handle_st7735_l90fx+0x88>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 800207e:	4926      	ldr	r1, [pc, #152]	; (8002118 <ucg_handle_st7735_l90fx+0xd0>)
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fe73 	bl	8001d6c <ucg_com_SendCmdSeq>
	break;
 8002086:	e023      	b.n	80020d0 <ucg_handle_st7735_l90fx+0x88>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800208c:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.x = 127-tmp;
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002094:	b29b      	uxth	r3, r3
 8002096:	b21a      	sxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 800209c:	491f      	ldr	r1, [pc, #124]	; (800211c <ucg_handle_st7735_l90fx+0xd4>)
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fe64 	bl	8001d6c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	89fa      	ldrh	r2, [r7, #14]
 80020a8:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 80020aa:	e011      	b.n	80020d0 <ucg_handle_st7735_l90fx+0x88>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b0:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.y = 127-tmp;
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 80020c0:	4917      	ldr	r1, [pc, #92]	; (8002120 <ucg_handle_st7735_l90fx+0xd8>)
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fe52 	bl	8001d6c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	89fa      	ldrh	r2, [r7, #14]
 80020cc:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 80020ce:	bf00      	nop
    }
    c[0] = ucg->arg.pixel.rgb.color[0];
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020d6:	723b      	strb	r3, [r7, #8]
    c[1] = ucg->arg.pixel.rgb.color[1];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020de:	727b      	strb	r3, [r7, #9]
    c[2] = ucg->arg.pixel.rgb.color[2];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80020e6:	72bb      	strb	r3, [r7, #10]
    ucg_com_SendRepeat3Bytes(ucg, ucg->arg.len, c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69dc      	ldr	r4, [r3, #28]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	2113      	movs	r1, #19
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	47a0      	blx	r4
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 80020fe:	2101      	movs	r1, #1
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fd7d 	bl	8001c00 <ucg_com_SetCSLineStatus>
    return 1;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <ucg_handle_st7735_l90fx+0xc4>
  }
  return 0;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	080042d8 	.word	0x080042d8
 8002118:	080042f8 	.word	0x080042f8
 800211c:	0800431c 	.word	0x0800431c
 8002120:	08004340 	.word	0x08004340

08002124 <ucg_handle_st7735_l90se>:
  return 0;
}


ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  
  /* Setup ccs for l90se. This will be updated by ucg_clip_l90se if required */
  
  for ( i = 0; i < 3; i++ )
 800212c:	2300      	movs	r3, #0
 800212e:	75fb      	strb	r3, [r7, #23]
 8002130:	e01a      	b.n	8002168 <ucg_handle_st7735_l90se+0x44>
  {
    ucg_ccs_init(ucg->arg.ccs_line+i, ucg->arg.rgb[0].color[i], ucg->arg.rgb[1].color[i], ucg->arg.len);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002138:	7dfa      	ldrb	r2, [r7, #23]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	18c8      	adds	r0, r1, r3
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800215e:	f7ff f933 	bl	80013c8 <ucg_ccs_init>
  for ( i = 0; i < 3; i++ )
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	3301      	adds	r3, #1
 8002166:	75fb      	strb	r3, [r7, #23]
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d9e1      	bls.n	8002132 <ucg_handle_st7735_l90se+0xe>
  }
  
  /* check if the line is visible */
  
  if ( ucg_clip_l90se(ucg) != 0 )
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fc4c 	bl	8001a0c <ucg_clip_l90se>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d074      	beq.n	8002264 <ucg_handle_st7735_l90se+0x140>
  {
    ucg_int_t i;
    switch(ucg->arg.dir)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002180:	2b02      	cmp	r3, #2
 8002182:	d010      	beq.n	80021a6 <ucg_handle_st7735_l90se+0x82>
 8002184:	2b02      	cmp	r3, #2
 8002186:	dc20      	bgt.n	80021ca <ucg_handle_st7735_l90se+0xa6>
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <ucg_handle_st7735_l90se+0x6e>
 800218c:	2b01      	cmp	r3, #1
 800218e:	d005      	beq.n	800219c <ucg_handle_st7735_l90se+0x78>
 8002190:	e01b      	b.n	80021ca <ucg_handle_st7735_l90se+0xa6>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8002192:	4937      	ldr	r1, [pc, #220]	; (8002270 <ucg_handle_st7735_l90se+0x14c>)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fde9 	bl	8001d6c <ucg_com_SendCmdSeq>
	break;
 800219a:	e028      	b.n	80021ee <ucg_handle_st7735_l90se+0xca>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 800219c:	4935      	ldr	r1, [pc, #212]	; (8002274 <ucg_handle_st7735_l90se+0x150>)
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fde4 	bl	8001d6c <ucg_com_SendCmdSeq>
	break;
 80021a4:	e023      	b.n	80021ee <ucg_handle_st7735_l90se+0xca>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80021aa:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.x = 127-tmp;
 80021ac:	8a7b      	ldrh	r3, [r7, #18]
 80021ae:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 80021ba:	492f      	ldr	r1, [pc, #188]	; (8002278 <ucg_handle_st7735_l90se+0x154>)
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fdd5 	bl	8001d6c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8a7a      	ldrh	r2, [r7, #18]
 80021c6:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 80021c8:	e011      	b.n	80021ee <ucg_handle_st7735_l90se+0xca>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ce:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.y = 127-tmp;
 80021d0:	8a7b      	ldrh	r3, [r7, #18]
 80021d2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	b21a      	sxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 80021de:	4927      	ldr	r1, [pc, #156]	; (800227c <ucg_handle_st7735_l90se+0x158>)
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fdc3 	bl	8001d6c <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8a7a      	ldrh	r2, [r7, #18]
 80021ea:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 80021ec:	bf00      	nop
    }
    
    for( i = 0; i < ucg->arg.len; i++ )
 80021ee:	2300      	movs	r3, #0
 80021f0:	82bb      	strh	r3, [r7, #20]
 80021f2:	e02a      	b.n	800224a <ucg_handle_st7735_l90se+0x126>
    {
      c[0] = ucg->arg.ccs_line[0].current;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80021fa:	733b      	strb	r3, [r7, #12]
      c[1] = ucg->arg.ccs_line[1].current; 
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002202:	737b      	strb	r3, [r7, #13]
      c[2] = ucg->arg.ccs_line[2].current;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800220a:	73bb      	strb	r3, [r7, #14]
      ucg_com_SendRepeat3Bytes(ucg, 1, c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69dc      	ldr	r4, [r3, #28]
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2201      	movs	r2, #1
 8002216:	2113      	movs	r1, #19
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	47a0      	blx	r4
      ucg_ccs_step(ucg->arg.ccs_line+0);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3346      	adds	r3, #70	; 0x46
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff f931 	bl	8001488 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3346      	adds	r3, #70	; 0x46
 800222a:	330e      	adds	r3, #14
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f92b 	bl	8001488 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+2);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3346      	adds	r3, #70	; 0x46
 8002236:	331c      	adds	r3, #28
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f925 	bl	8001488 <ucg_ccs_step>
    for( i = 0; i < ucg->arg.len; i++ )
 800223e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002242:	b29b      	uxth	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	b29b      	uxth	r3, r3
 8002248:	82bb      	strh	r3, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002250:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbcd      	blt.n	80021f4 <ucg_handle_st7735_l90se+0xd0>
    }
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002258:	2101      	movs	r1, #1
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fcd0 	bl	8001c00 <ucg_com_SetCSLineStatus>
    return 1;
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <ucg_handle_st7735_l90se+0x142>
  }
  return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	bf00      	nop
 8002270:	080042d8 	.word	0x080042d8
 8002274:	080042f8 	.word	0x080042f8
 8002278:	0800431c 	.word	0x0800431c
 800227c:	08004340 	.word	0x08004340

08002280 <ucg_dev_ic_st7735_18>:
	UCG_CS(1),					/* disable chip */
	UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	817b      	strh	r3, [r7, #10]
  switch(msg)
 800228e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002292:	3b0a      	subs	r3, #10
 8002294:	2b0b      	cmp	r3, #11
 8002296:	d85f      	bhi.n	8002358 <ucg_dev_ic_st7735_18+0xd8>
 8002298:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <ucg_dev_ic_st7735_18+0x20>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022d1 	.word	0x080022d1
 80022a4:	080022eb 	.word	0x080022eb
 80022a8:	08002359 	.word	0x08002359
 80022ac:	08002359 	.word	0x08002359
 80022b0:	08002359 	.word	0x08002359
 80022b4:	080022f7 	.word	0x080022f7
 80022b8:	08002359 	.word	0x08002359
 80022bc:	08002359 	.word	0x08002359
 80022c0:	08002359 	.word	0x08002359
 80022c4:	08002359 	.word	0x08002359
 80022c8:	08002307 	.word	0x08002307
 80022cc:	0800234f 	.word	0x0800234f
  {
    case UCG_MSG_DEV_POWER_UP:
      /* setup com interface and provide information on the clock speed */
      /* of the serial and parallel interface. Values are nanoseconds. */
	  ucg->display_offset.x = 2;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2202      	movs	r2, #2
 80022d4:	841a      	strh	r2, [r3, #32]
	  ucg->display_offset.y = 1;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	845a      	strh	r2, [r3, #34]	; 0x22
      return ucg_com_PowerUp(ucg, 100, 66);
 80022dc:	2242      	movs	r2, #66	; 0x42
 80022de:	2164      	movs	r1, #100	; 0x64
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff fbdc 	bl	8001a9e <ucg_com_PowerUp>
 80022e6:	4603      	mov	r3, r0
 80022e8:	e03e      	b.n	8002368 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DEV_POWER_DOWN:
      ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
 80022ea:	4921      	ldr	r1, [pc, #132]	; (8002370 <ucg_dev_ic_st7735_18+0xf0>)
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fd3d 	bl	8001d6c <ucg_com_SendCmdSeq>
      return 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e038      	b.n	8002368 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	805a      	strh	r2, [r3, #2]
      return 1;
 8002302:	2301      	movs	r3, #1
 8002304:	e030      	b.n	8002368 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_PIXEL:
      if ( ucg_clip_is_pixel_visible(ucg) !=0 )
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff f9e7 	bl	80016da <ucg_clip_is_pixel_visible>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01b      	beq.n	800234a <ucg_dev_ic_st7735_18+0xca>
      {
	uint8_t c[3];
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_seq);	
 8002312:	4918      	ldr	r1, [pc, #96]	; (8002374 <ucg_dev_ic_st7735_18+0xf4>)
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff fd29 	bl	8001d6c <ucg_com_SendCmdSeq>
	c[0] = ucg->arg.pixel.rgb.color[0];
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002320:	753b      	strb	r3, [r7, #20]
	c[1] = ucg->arg.pixel.rgb.color[1];
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002328:	757b      	strb	r3, [r7, #21]
	c[2] = ucg->arg.pixel.rgb.color[2];
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002330:	75bb      	strb	r3, [r7, #22]
	ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	69dc      	ldr	r4, [r3, #28]
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	2201      	movs	r2, #1
 800233c:	2113      	movs	r1, #19
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	47a0      	blx	r4
	ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002342:	2101      	movs	r1, #1
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff fc5b 	bl	8001c00 <ucg_com_SetCSLineStatus>
      }
      return 1;
 800234a:	2301      	movs	r3, #1
 800234c:	e00c      	b.n	8002368 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_L90FX:
      //ucg_handle_l90fx(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90fx(ucg);
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff fe7a 	bl	8002048 <ucg_handle_st7735_l90fx>
      return 1;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <ucg_dev_ic_st7735_18+0xe8>
    /*
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
    */
  }
  return ucg_dev_default_cb(ucg, msg, data);  
 8002358:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4619      	mov	r1, r3
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff fe41 	bl	8001fe8 <ucg_dev_default_cb>
 8002366:	4603      	mov	r3, r0
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd90      	pop	{r4, r7, pc}
 8002370:	08004364 	.word	0x08004364
 8002374:	080042b8 	.word	0x080042b8

08002378 <ucg_ext_st7735_18>:

ucg_int_t ucg_ext_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	460b      	mov	r3, r1
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002386:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800238a:	2b17      	cmp	r3, #23
 800238c:	d103      	bne.n	8002396 <ucg_ext_st7735_18+0x1e>
  {
    case UCG_MSG_DRAW_L90SE:
      //ucg_handle_l90se(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90se(ucg);
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff fec8 	bl	8002124 <ucg_handle_st7735_l90se>
      break;
 8002394:	bf00      	nop
  }
  return 1;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <ucg_PowerDown>:

#include "ucg.h"
#include <stddef.h>

void ucg_PowerDown(ucg_t *ucg)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ( ucg->is_power_up != 0 )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <ucg_PowerDown+0x2c>
  {
    ucg->device_cb(ucg, UCG_MSG_DEV_POWER_DOWN, NULL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	210b      	movs	r1, #11
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
    ucg->is_power_up = 0;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	7813      	ldrb	r3, [r2, #0]
 80023c6:	f36f 0300 	bfc	r3, #0, #1
 80023ca:	7013      	strb	r3, [r2, #0]
  }
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <ucg_PowerUp>:

ucg_int_t ucg_PowerUp(ucg_t *ucg)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  ucg_int_t r;
  /* power down first. will do nothing if power is already down */
  ucg_PowerDown(ucg);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ffdf 	bl	80023a0 <ucg_PowerDown>
  /* now try to power up the display */
  r = ucg->device_cb(ucg, UCG_MSG_DEV_POWER_UP, NULL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2200      	movs	r2, #0
 80023e8:	210a      	movs	r1, #10
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 80023f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <ucg_PowerUp+0x30>
  {
    ucg->is_power_up = 1;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	7813      	ldrb	r3, [r2, #0]
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	7013      	strb	r3, [r2, #0]
  }
  return r;
 8002404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <ucg_SetClipBox>:

void ucg_SetClipBox(ucg_t *ucg, ucg_box_t *clip_box)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  ucg->device_cb(ucg, UCG_MSG_SET_CLIP_BOX, (void *)(clip_box));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	210c      	movs	r1, #12
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <ucg_SetMaxClipRange>:
  clip_box.size.h = h;
  ucg_SetClipBox(ucg, &clip_box);
}

void ucg_SetMaxClipRange(ucg_t *ucg)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  ucg_box_t new_clip_box;
  new_clip_box.size = ucg->dimension;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	3202      	adds	r2, #2
 800243e:	6810      	ldr	r0, [r2, #0]
 8002440:	6018      	str	r0, [r3, #0]
  new_clip_box.ul.x = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	813b      	strh	r3, [r7, #8]
  new_clip_box.ul.y = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	817b      	strh	r3, [r7, #10]
  ucg_SetClipBox(ucg, &new_clip_box);
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ffdd 	bl	8002410 <ucg_SetClipBox>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <ucg_GetDimension>:
/* 
  Query the display dimension from the driver, reset clip window to maximum 
  new dimension
*/
void ucg_GetDimension(ucg_t *ucg)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_GET_DIMENSION, &(ucg->dimension));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	3202      	adds	r2, #2
 800246e:	210f      	movs	r1, #15
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
  ucg_SetMaxClipRange(ucg);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffda 	bl	800242e <ucg_SetMaxClipRange>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <ucg_DrawL90FXWithArg>:
{
  ucg->device_cb(ucg, UCG_MSG_DRAW_PIXEL, NULL);
}

void ucg_DrawL90FXWithArg(ucg_t *ucg)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_L90FX, &(ucg->arg));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	3224      	adds	r2, #36	; 0x24
 8002492:	2115      	movs	r1, #21
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <ucg_dev_st7735_18x128x128>:
  UCG_CS(1),					/* disable chip */
  UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_st7735_18x128x128(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	460b      	mov	r3, r1
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	817b      	strh	r3, [r7, #10]
  switch(msg)
 80024ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d021      	beq.n	80024fa <ucg_dev_st7735_18x128x128+0x5a>
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	dc27      	bgt.n	800250a <ucg_dev_st7735_18x128x128+0x6a>
 80024ba:	2b0a      	cmp	r3, #10
 80024bc:	d002      	beq.n	80024c4 <ucg_dev_st7735_18x128x128+0x24>
 80024be:	2b0b      	cmp	r3, #11
 80024c0:	d012      	beq.n	80024e8 <ucg_dev_st7735_18x128x128+0x48>
 80024c2:	e022      	b.n	800250a <ucg_dev_st7735_18x128x128+0x6a>
  {
    case UCG_MSG_DEV_POWER_UP:
      /* 1. Call to the controller procedures to setup the com interface */
      if ( ucg_dev_ic_st7735_18(ucg, msg, data) == 0 )
 80024c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fed7 	bl	8002280 <ucg_dev_ic_st7735_18>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <ucg_dev_st7735_18x128x128+0x3c>
	return 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	e01e      	b.n	800251a <ucg_dev_st7735_18x128x128+0x7a>

      /* 2. Send specific init sequence for this display module */
      ucg_com_SendCmdSeq(ucg, ucg_tft_128x160_st7735_init_seq);
 80024dc:	4911      	ldr	r1, [pc, #68]	; (8002524 <ucg_dev_st7735_18x128x128+0x84>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f7ff fc44 	bl	8001d6c <ucg_com_SendCmdSeq>
      
      return 1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e018      	b.n	800251a <ucg_dev_st7735_18x128x128+0x7a>
      
    case UCG_MSG_DEV_POWER_DOWN:
      /* let do power down by the conroller procedures */
      return ucg_dev_ic_st7735_18(ucg, msg, data);  
 80024e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	4619      	mov	r1, r3
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff fec5 	bl	8002280 <ucg_dev_ic_st7735_18>
 80024f6:	4603      	mov	r3, r0
 80024f8:	e00f      	b.n	800251a <ucg_dev_st7735_18x128x128+0x7a>
    
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	805a      	strh	r2, [r3, #2]
      return 1;
 8002506:	2301      	movs	r3, #1
 8002508:	e007      	b.n	800251a <ucg_dev_st7735_18x128x128+0x7a>
  }
  
  /* all other messages are handled by the controller procedures */
  return ucg_dev_ic_st7735_18(ucg, msg, data);  
 800250a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4619      	mov	r1, r3
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff feb4 	bl	8002280 <ucg_dev_ic_st7735_18>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	0800436c 	.word	0x0800436c

08002528 <ucg_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE;
static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	607b      	str	r3, [r7, #4]
  return ucg_pgm_read( (ucg_pgm_uint8_t *)font );  
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	781b      	ldrb	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <ucg_font_get_word>:

static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE; 
static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	607b      	str	r3, [r7, #4]
    pos = ucg_pgm_read( (ucg_pgm_uint8_t *)font );
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	81fb      	strh	r3, [r7, #14]
    font++;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3301      	adds	r3, #1
 800256a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	81fb      	strh	r3, [r7, #14]
    pos += ucg_pgm_read( (ucg_pgm_uint8_t *)font);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b29a      	uxth	r2, r3
 8002578:	89fb      	ldrh	r3, [r7, #14]
 800257a:	4413      	add	r3, r2
 800257c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800257e:	89fb      	ldrh	r3, [r7, #14]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <ucg_read_font_info>:

/*========================================================================*/
/* new font format */
void ucg_read_font_info(ucg_font_info_t *font_info, const ucg_fntpgm_uint8_t *font)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = ucg_font_get_byte(font, 0);
 8002596:	2100      	movs	r1, #0
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	f7ff ffc5 	bl	8002528 <ucg_font_get_byte>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = ucg_font_get_byte(font, 1);
 80025a6:	2101      	movs	r1, #1
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	f7ff ffbd 	bl	8002528 <ucg_font_get_byte>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = ucg_font_get_byte(font, 2);
 80025b6:	2102      	movs	r1, #2
 80025b8:	6838      	ldr	r0, [r7, #0]
 80025ba:	f7ff ffb5 	bl	8002528 <ucg_font_get_byte>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = ucg_font_get_byte(font, 3);
 80025c6:	2103      	movs	r1, #3
 80025c8:	6838      	ldr	r0, [r7, #0]
 80025ca:	f7ff ffad 	bl	8002528 <ucg_font_get_byte>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = ucg_font_get_byte(font, 4);
 80025d6:	2104      	movs	r1, #4
 80025d8:	6838      	ldr	r0, [r7, #0]
 80025da:	f7ff ffa5 	bl	8002528 <ucg_font_get_byte>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = ucg_font_get_byte(font, 5);
 80025e6:	2105      	movs	r1, #5
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f7ff ff9d 	bl	8002528 <ucg_font_get_byte>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = ucg_font_get_byte(font, 6);
 80025f6:	2106      	movs	r1, #6
 80025f8:	6838      	ldr	r0, [r7, #0]
 80025fa:	f7ff ff95 	bl	8002528 <ucg_font_get_byte>
 80025fe:	4603      	mov	r3, r0
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = ucg_font_get_byte(font, 7);
 8002606:	2107      	movs	r1, #7
 8002608:	6838      	ldr	r0, [r7, #0]
 800260a:	f7ff ff8d 	bl	8002528 <ucg_font_get_byte>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = ucg_font_get_byte(font, 8);
 8002616:	2108      	movs	r1, #8
 8002618:	6838      	ldr	r0, [r7, #0]
 800261a:	f7ff ff85 	bl	8002528 <ucg_font_get_byte>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = ucg_font_get_byte(font, 9);
 8002626:	2109      	movs	r1, #9
 8002628:	6838      	ldr	r0, [r7, #0]
 800262a:	f7ff ff7d 	bl	8002528 <ucg_font_get_byte>
 800262e:	4603      	mov	r3, r0
 8002630:	b25a      	sxtb	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = ucg_font_get_byte(font, 10);
 8002636:	210a      	movs	r1, #10
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	f7ff ff75 	bl	8002528 <ucg_font_get_byte>
 800263e:	4603      	mov	r3, r0
 8002640:	b25a      	sxtb	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = ucg_font_get_byte(font, 11);
 8002646:	210b      	movs	r1, #11
 8002648:	6838      	ldr	r0, [r7, #0]
 800264a:	f7ff ff6d 	bl	8002528 <ucg_font_get_byte>
 800264e:	4603      	mov	r3, r0
 8002650:	b25a      	sxtb	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = ucg_font_get_byte(font, 12);
 8002656:	210c      	movs	r1, #12
 8002658:	6838      	ldr	r0, [r7, #0]
 800265a:	f7ff ff65 	bl	8002528 <ucg_font_get_byte>
 800265e:	4603      	mov	r3, r0
 8002660:	b25a      	sxtb	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = ucg_font_get_byte(font, 13);
 8002666:	210d      	movs	r1, #13
 8002668:	6838      	ldr	r0, [r7, #0]
 800266a:	f7ff ff5d 	bl	8002528 <ucg_font_get_byte>
 800266e:	4603      	mov	r3, r0
 8002670:	b25a      	sxtb	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = ucg_font_get_byte(font, 14);
 8002676:	210e      	movs	r1, #14
 8002678:	6838      	ldr	r0, [r7, #0]
 800267a:	f7ff ff55 	bl	8002528 <ucg_font_get_byte>
 800267e:	4603      	mov	r3, r0
 8002680:	b25a      	sxtb	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = ucg_font_get_byte(font, 15);
 8002686:	210f      	movs	r1, #15
 8002688:	6838      	ldr	r0, [r7, #0]
 800268a:	f7ff ff4d 	bl	8002528 <ucg_font_get_byte>
 800268e:	4603      	mov	r3, r0
 8002690:	b25a      	sxtb	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = ucg_font_get_byte(font, 16);
 8002696:	2110      	movs	r1, #16
 8002698:	6838      	ldr	r0, [r7, #0]
 800269a:	f7ff ff45 	bl	8002528 <ucg_font_get_byte>
 800269e:	4603      	mov	r3, r0
 80026a0:	b25a      	sxtb	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = ucg_font_get_word(font, 17);
 80026a6:	2111      	movs	r1, #17
 80026a8:	6838      	ldr	r0, [r7, #0]
 80026aa:	f7ff ff4f 	bl	800254c <ucg_font_get_word>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = ucg_font_get_word(font, 19);  
 80026b6:	2113      	movs	r1, #19
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	f7ff ff47 	bl	800254c <ucg_font_get_word>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	829a      	strh	r2, [r3, #20]
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <ucg_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t ucg_font_decode_get_unsigned_bits(ucg_font_decode_t *f, uint8_t cnt) 
{
 80026ce:	b480      	push	{r7}
 80026d0:	b085      	sub	sp, #20
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7b1b      	ldrb	r3, [r3, #12]
 80026de:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) );  
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	7b7b      	ldrb	r3, [r7, #13]
 80026ec:	fa42 f303 	asr.w	r3, r2, r3
 80026f0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80026f2:	7b7b      	ldrb	r3, [r7, #13]
 80026f4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80026f6:	7bba      	ldrb	r2, [r7, #14]
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	4413      	add	r3, r2
 80026fc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80026fe:	7bbb      	ldrb	r3, [r7, #14]
 8002700:	2b07      	cmp	r3, #7
 8002702:	d91a      	bls.n	800273a <ucg_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002704:	2308      	movs	r3, #8
 8002706:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002708:	7b3a      	ldrb	r2, [r7, #12]
 800270a:	7b7b      	ldrb	r3, [r7, #13]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) ) << (s);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	7b3b      	ldrb	r3, [r7, #12]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4313      	orrs	r3, r2
 8002730:	b25b      	sxtb	r3, r3
 8002732:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002734:	7bbb      	ldrb	r3, [r7, #14]
 8002736:	3b08      	subs	r3, #8
 8002738:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	b2da      	uxtb	r2, r3
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	4013      	ands	r3, r2
 800274e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7bba      	ldrb	r2, [r7, #14]
 8002754:	731a      	strb	r2, [r3, #12]
  return val;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <ucg_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t ucg_font_decode_get_signed_bits(ucg_font_decode_t *f, uint8_t cnt)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt);
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	4619      	mov	r1, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffaa 	bl	80026ce <ucg_font_decode_get_unsigned_bits>
 800277a:	4603      	mov	r3, r0
 800277c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	3b01      	subs	r3, #1
 8002786:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8002788:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	73fb      	strb	r3, [r7, #15]
  return v;
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <ucg_add_vector_y>:
}
*/

static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80027aa:	b490      	push	{r4, r7}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4604      	mov	r4, r0
 80027b2:	4608      	mov	r0, r1
 80027b4:	4611      	mov	r1, r2
 80027b6:	461a      	mov	r2, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	80fb      	strh	r3, [r7, #6]
 80027bc:	4603      	mov	r3, r0
 80027be:	717b      	strb	r3, [r7, #5]
 80027c0:	460b      	mov	r3, r1
 80027c2:	713b      	strb	r3, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d016      	beq.n	80027fc <ucg_add_vector_y+0x52>
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	dc1c      	bgt.n	800280c <ucg_add_vector_y+0x62>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <ucg_add_vector_y+0x32>
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d008      	beq.n	80027ec <ucg_add_vector_y+0x42>
 80027da:	e017      	b.n	800280c <ucg_add_vector_y+0x62>
  {
    case 0:
      dy += y;
 80027dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	4413      	add	r3, r2
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	80fb      	strh	r3, [r7, #6]
      break;
 80027ea:	e017      	b.n	800281c <ucg_add_vector_y+0x72>
    case 1:
      dy += x;
 80027ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4413      	add	r3, r2
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	80fb      	strh	r3, [r7, #6]
      break;
 80027fa:	e00f      	b.n	800281c <ucg_add_vector_y+0x72>
    case 2:
      dy -= y;
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002802:	b29b      	uxth	r3, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b29b      	uxth	r3, r3
 8002808:	80fb      	strh	r3, [r7, #6]
      break;
 800280a:	e007      	b.n	800281c <ucg_add_vector_y+0x72>
    default:
      dy -= x;
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002812:	b29b      	uxth	r3, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b29b      	uxth	r3, r3
 8002818:	80fb      	strh	r3, [r7, #6]
      break;      
 800281a:	bf00      	nop
  }
  return dy;
 800281c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bc90      	pop	{r4, r7}
 8002828:	4770      	bx	lr

0800282a <ucg_add_vector_x>:

static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800282a:	b490      	push	{r4, r7}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4604      	mov	r4, r0
 8002832:	4608      	mov	r0, r1
 8002834:	4611      	mov	r1, r2
 8002836:	461a      	mov	r2, r3
 8002838:	4623      	mov	r3, r4
 800283a:	80fb      	strh	r3, [r7, #6]
 800283c:	4603      	mov	r3, r0
 800283e:	717b      	strb	r3, [r7, #5]
 8002840:	460b      	mov	r3, r1
 8002842:	713b      	strb	r3, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d016      	beq.n	800287c <ucg_add_vector_x+0x52>
 800284e:	2b02      	cmp	r3, #2
 8002850:	dc1c      	bgt.n	800288c <ucg_add_vector_x+0x62>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <ucg_add_vector_x+0x32>
 8002856:	2b01      	cmp	r3, #1
 8002858:	d008      	beq.n	800286c <ucg_add_vector_x+0x42>
 800285a:	e017      	b.n	800288c <ucg_add_vector_x+0x62>
  {
    case 0:
      dx += x;
 800285c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002860:	b29a      	uxth	r2, r3
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	4413      	add	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	80fb      	strh	r3, [r7, #6]
      break;
 800286a:	e017      	b.n	800289c <ucg_add_vector_x+0x72>
    case 1:
      dx -= y;
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002872:	b29b      	uxth	r3, r3
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	b29b      	uxth	r3, r3
 8002878:	80fb      	strh	r3, [r7, #6]
      break;
 800287a:	e00f      	b.n	800289c <ucg_add_vector_x+0x72>
    case 2:
      dx -= x;
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002882:	b29b      	uxth	r3, r3
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	b29b      	uxth	r3, r3
 8002888:	80fb      	strh	r3, [r7, #6]
      break;
 800288a:	e007      	b.n	800289c <ucg_add_vector_x+0x72>
    default:
      dx += y;
 800288c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002890:	b29a      	uxth	r2, r3
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	4413      	add	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	80fb      	strh	r3, [r7, #6]
      break;      
 800289a:	bf00      	nop
  }
  return dx;
 800289c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc90      	pop	{r4, r7}
 80028a8:	4770      	bx	lr

080028aa <ucg_font_decode_len>:
  Called by:
    ucg_font_decode_glyph()
*/
/* optimized */
void ucg_font_decode_len(ucg_t *ucg, uint8_t len, uint8_t is_foreground)
{
 80028aa:	b590      	push	{r4, r7, lr}
 80028ac:	b089      	sub	sp, #36	; 0x24
 80028ae:	af02      	add	r7, sp, #8
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
 80028b6:	4613      	mov	r3, r2
 80028b8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  ucg_int_t x, y;
  
  ucg_font_decode_t *decode = &(ucg->font_decode);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3380      	adds	r3, #128	; 0x80
 80028be:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80028ca:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80028d2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80028da:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	7d7b      	ldrb	r3, [r7, #21]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80028e8:	7dfa      	ldrb	r2, [r7, #23]
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d201      	bcs.n	80028f4 <ucg_font_decode_len+0x4a>
      current = cnt;
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //ucg_font_decode_draw_pixel(ucg, lx, ly, current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	889b      	ldrh	r3, [r3, #4]
 80028f8:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	88db      	ldrh	r3, [r3, #6]
 80028fe:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
    x = ucg_add_vector_x(x, lx, ly, decode->dir);
 8002900:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002904:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	7b9b      	ldrb	r3, [r3, #14]
 800290c:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8002910:	f7ff ff8b 	bl	800282a <ucg_add_vector_x>
 8002914:	4603      	mov	r3, r0
 8002916:	81bb      	strh	r3, [r7, #12]
    y = ucg_add_vector_y(y, lx, ly, decode->dir);
 8002918:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800291c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	7b9b      	ldrb	r3, [r3, #14]
 8002924:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8002928:	f7ff ff3f 	bl	80027aa <ucg_add_vector_y>
 800292c:	4603      	mov	r3, r0
 800292e:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002930:	78bb      	ldrb	r3, [r7, #2]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d010      	beq.n	8002958 <ucg_font_decode_len+0xae>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 0);
 8002936:	7dbb      	ldrb	r3, [r7, #22]
 8002938:	b218      	sxth	r0, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	7b9b      	ldrb	r3, [r3, #14]
 800293e:	b21b      	sxth	r3, r3
 8002940:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002944:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002948:	2400      	movs	r4, #0
 800294a:	9401      	str	r4, [sp, #4]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4603      	mov	r3, r0
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fbbf 	bl	80030d4 <ucg_Draw90Line>
 8002956:	e013      	b.n	8002980 <ucg_font_decode_len+0xd6>
    }
    else if ( decode->is_transparent == 0 )    
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	7b5b      	ldrb	r3, [r3, #13]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10f      	bne.n	8002980 <ucg_font_decode_len+0xd6>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 1);
 8002960:	7dbb      	ldrb	r3, [r7, #22]
 8002962:	b218      	sxth	r0, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	7b9b      	ldrb	r3, [r3, #14]
 8002968:	b21b      	sxth	r3, r3
 800296a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800296e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002972:	2401      	movs	r4, #1
 8002974:	9401      	str	r4, [sp, #4]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4603      	mov	r3, r0
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fbaa 	bl	80030d4 <ucg_Draw90Line>
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002980:	7dfa      	ldrb	r2, [r7, #23]
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	429a      	cmp	r2, r3
 8002986:	d309      	bcc.n	800299c <ucg_font_decode_len+0xf2>
      break;
    cnt -= rem;
 8002988:	7dfa      	ldrb	r2, [r7, #23]
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	757b      	strb	r3, [r7, #21]
    ly++;
 8002994:	7d3b      	ldrb	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800299a:	e79b      	b.n	80028d4 <ucg_font_decode_len+0x2a>
      break;
 800299c:	bf00      	nop
  }
  //ucg_font_decode_draw_pixel(ucg, x,y, cnt, is_foreground);
  lx += cnt;
 800299e:	7d7a      	ldrb	r2, [r7, #21]
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	4413      	add	r3, r2
 80029a4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80029a6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80029ae:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	725a      	strb	r2, [r3, #9]
  
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}

080029be <ucg_font_setup_decode>:

static void ucg_font_setup_decode(ucg_t *ucg, const uint8_t *glyph_data)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  ucg_font_decode_t *decode = &(ucg->font_decode);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3380      	adds	r3, #128	; 0x80
 80029cc:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	731a      	strb	r2, [r3, #12]
  
  decode->decode_ptr += 1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]
  decode->decode_ptr += 1;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]
  
  decode->glyph_width = ucg_font_decode_get_unsigned_bits(decode, ucg->font_info.bits_per_char_width);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80029f4:	4619      	mov	r1, r3
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f7ff fe69 	bl	80026ce <ucg_font_decode_get_unsigned_bits>
 80029fc:	4603      	mov	r3, r0
 80029fe:	b25a      	sxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = ucg_font_decode_get_unsigned_bits(decode,ucg->font_info.bits_per_char_height);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fe5e 	bl	80026ce <ucg_font_decode_get_unsigned_bits>
 8002a12:	4603      	mov	r3, r0
 8002a14:	b25a      	sxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	72da      	strb	r2, [r3, #11]
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <ucg_font_decode_glyph>:
    ucg_font_decode_len()
*/
/* optimized */

int8_t ucg_font_decode_glyph(ucg_t *ucg, const uint8_t *glyph_data)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  int8_t d;
  int8_t h;
//  ucg_scan = ucg;
//  decode = &(ucg_scan->font_decode);
    
  ucg_font_setup_decode(ucg, glyph_data);
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ffc5 	bl	80029be <ucg_font_setup_decode>
  h = ucg->font_decode.glyph_height;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8002a3a:	73fb      	strb	r3, [r7, #15]
  
  x = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_x);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f7ff fe8a 	bl	8002764 <ucg_font_decode_get_signed_bits>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73bb      	strb	r3, [r7, #14]
  y = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_y);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f7ff fe7e 	bl	8002764 <ucg_font_decode_get_signed_bits>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	737b      	strb	r3, [r7, #13]
  d = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_delta_x);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f7ff fe72 	bl	8002764 <ucg_font_decode_get_signed_bits>
 8002a80:	4603      	mov	r3, r0
 8002a82:	733b      	strb	r3, [r7, #12]
  
  if ( ucg->font_decode.glyph_width > 0 )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dd69      	ble.n	8002b62 <ucg_font_decode_glyph+0x140>
  {
	ucg->font_decode.target_x = ucg_add_vector_x(ucg->font_decode.target_x, x, -(h+y), ucg->font_decode.dir);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	7b7b      	ldrb	r3, [r7, #13]
 8002a98:	4413      	add	r3, r2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8002aa8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8002aac:	f7ff febd 	bl	800282a <ucg_add_vector_x>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ucg->font_decode.target_y = ucg_add_vector_y(ucg->font_decode.target_y, x, -(h+y), ucg->font_decode.dir);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	7b7b      	ldrb	r3, [r7, #13]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	425b      	negs	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	b25a      	sxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8002ad4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8002ad8:	f7ff fe67 	bl	80027aa <ucg_add_vector_y>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    //ucg_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

    /* reset local x/y position */
	ucg->font_decode.x = 0;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	ucg->font_decode.y = 0;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    for(;;)
    {
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f7ff fde2 	bl	80026ce <ucg_font_decode_get_unsigned_bits>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	72fb      	strb	r3, [r7, #11]
      b = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f7ff fdd6 	bl	80026ce <ucg_font_decode_get_unsigned_bits>
 8002b22:	4603      	mov	r3, r0
 8002b24:	72bb      	strb	r3, [r7, #10]
      do
      {
		ucg_font_decode_len(ucg, a, 0);
 8002b26:	7afb      	ldrb	r3, [r7, #11]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff febc 	bl	80028aa <ucg_font_decode_len>
		ucg_font_decode_len(ucg, b, 1);
 8002b32:	7abb      	ldrb	r3, [r7, #10]
 8002b34:	2201      	movs	r2, #1
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff feb6 	bl	80028aa <ucg_font_decode_len>
      } while( ucg_font_decode_get_unsigned_bits(&ucg->font_decode, 1) != 0 );
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3380      	adds	r3, #128	; 0x80
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fdc2 	bl	80026ce <ucg_font_decode_get_unsigned_bits>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ea      	bne.n	8002b26 <ucg_font_decode_glyph+0x104>

      if ( ucg->font_decode.y >= h )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8002b56:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	dd00      	ble.n	8002b60 <ucg_font_decode_glyph+0x13e>
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 8002b5e:	e7ca      	b.n	8002af6 <ucg_font_decode_glyph+0xd4>
	    break;
 8002b60:	bf00      	nop
    }
  }
  return d;
 8002b62:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <ucg_font_get_glyph_data>:
    encoding: Encoding (ASCII code) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *ucg_font_get_glyph_data(ucg_t *ucg, uint8_t encoding)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	70fb      	strb	r3, [r7, #3]
  const uint8_t *font = ucg->font;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7e:	60fb      	str	r3, [r7, #12]
  font += UCG_FONT_DATA_STRUCT_SIZE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3315      	adds	r3, #21
 8002b84:	60fb      	str	r3, [r7, #12]
  
  if ( encoding >= 'a' )
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	2b60      	cmp	r3, #96	; 0x60
 8002b8a:	d907      	bls.n	8002b9c <ucg_font_get_glyph_data+0x2e>
  {
    font += ucg->font_info.start_pos_lower_a;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	e009      	b.n	8002bb0 <ucg_font_get_glyph_data+0x42>
  }
  else if ( encoding >= 'A' )
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d906      	bls.n	8002bb0 <ucg_font_get_glyph_data+0x42>
  {
    font += ucg->font_info.start_pos_upper_A;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  }
  
  for(;;)
  {
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00e      	beq.n	8002bd8 <ucg_font_get_glyph_data+0x6a>
      break;
    if ( ucg_pgm_read( (ucg_pgm_uint8_t *)font ) == encoding )
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d101      	bne.n	8002bc8 <ucg_font_get_glyph_data+0x5a>
    {
      return font;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	e009      	b.n	8002bdc <ucg_font_get_glyph_data+0x6e>
    }
    font += ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8002bd6:	e7eb      	b.n	8002bb0 <ucg_font_get_glyph_data+0x42>
      break;
 8002bd8:	bf00      	nop
  }
  return NULL;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <ucg_font_draw_glyph>:

ucg_int_t ucg_font_draw_glyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	817b      	strh	r3, [r7, #10]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	813b      	strh	r3, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	71fb      	strb	r3, [r7, #7]
  ucg_int_t dx = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	82fb      	strh	r3, [r7, #22]
  ucg->font_decode.target_x = x;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	897a      	ldrh	r2, [r7, #10]
 8002c0a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  ucg->font_decode.target_y = y;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  //ucg->font_decode.is_transparent = is_transparent; this is already set
  ucg->font_decode.dir = dir;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	79fa      	ldrb	r2, [r7, #7]
 8002c1a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  const uint8_t *glyph_data = ucg_font_get_glyph_data(ucg, encoding);
 8002c1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c22:	4619      	mov	r1, r3
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff ffa2 	bl	8002b6e <ucg_font_get_glyph_data>
 8002c2a:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <ucg_font_draw_glyph+0x56>
  {
    dx = ucg_font_decode_glyph(ucg, glyph_data);
 8002c32:	6939      	ldr	r1, [r7, #16]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7ff fef4 	bl	8002a22 <ucg_font_decode_glyph>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8002c3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <ucg_SetFontMode>:
    UCG_FONT_MODE_SOLID
    UCG_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void ucg_SetFontMode(ucg_t *ucg, uint8_t is_transparent)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
  ucg->font_decode.is_transparent = is_transparent;		// new font procedures
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <ucg_DrawGlyph>:

ucg_int_t ucg_DrawGlyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	4608      	mov	r0, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	813b      	strh	r3, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	71fb      	strb	r3, [r7, #7]
  switch(dir)
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d837      	bhi.n	8002cfc <ucg_DrawGlyph+0x90>
 8002c8c:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <ucg_DrawGlyph+0x28>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cbb 	.word	0x08002cbb
 8002c9c:	08002cd1 	.word	0x08002cd1
 8002ca0:	08002ce7 	.word	0x08002ce7
  {
    case 0:
      y += ucg->font_calc_vref(ucg);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	4798      	blx	r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	893b      	ldrh	r3, [r7, #8]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	813b      	strh	r3, [r7, #8]
      break;
 8002cb8:	e020      	b.n	8002cfc <ucg_DrawGlyph+0x90>
    case 1:
      x -= ucg->font_calc_vref(ucg);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	4798      	blx	r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	897a      	ldrh	r2, [r7, #10]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	817b      	strh	r3, [r7, #10]
      break;
 8002cce:	e015      	b.n	8002cfc <ucg_DrawGlyph+0x90>
    case 2:
      y -= ucg->font_calc_vref(ucg);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	4798      	blx	r3
 8002cd8:	4603      	mov	r3, r0
 8002cda:	893a      	ldrh	r2, [r7, #8]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	813b      	strh	r3, [r7, #8]
      break;
 8002ce4:	e00a      	b.n	8002cfc <ucg_DrawGlyph+0x90>
    case 3:
      x += ucg->font_calc_vref(ucg);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	4798      	blx	r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	817b      	strh	r3, [r7, #10]
      break;
 8002cfa:	bf00      	nop
  }
  return ucg_font_draw_glyph(ucg, x, y, dir, encoding);
 8002cfc:	79f8      	ldrb	r0, [r7, #7]
 8002cfe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d02:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002d06:	7e3b      	ldrb	r3, [r7, #24]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff6b 	bl	8002be8 <ucg_font_draw_glyph>
 8002d12:	4603      	mov	r3, r0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <task_drawString>:

ucg_draw_string_t ucg_draw_str;

void task_drawString(void *arg)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
	ucg_int_t delta = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	81fb      	strh	r3, [r7, #14]
	ucg_t *ucg = (ucg_t *)arg;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60bb      	str	r3, [r7, #8]

	static uint8_t next = 0;
	switch (next)
 8002d2c:	4b45      	ldr	r3, [pc, #276]	; (8002e44 <task_drawString+0x128>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <task_drawString+0x1e>
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d01e      	beq.n	8002d76 <task_drawString+0x5a>
 8002d38:	e07b      	b.n	8002e32 <task_drawString+0x116>
	{
		case 0:
			if (bufNumItems(&fontQueue) != 0)
 8002d3a:	4843      	ldr	r0, [pc, #268]	; (8002e48 <task_drawString+0x12c>)
 8002d3c:	f000 fb5b 	bl	80033f6 <bufNumItems>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <task_drawString+0x3a>
			{
				bufDeDat(&fontQueue, (uint8_t *)&ucg_draw_str);
 8002d46:	4941      	ldr	r1, [pc, #260]	; (8002e4c <task_drawString+0x130>)
 8002d48:	483f      	ldr	r0, [pc, #252]	; (8002e48 <task_drawString+0x12c>)
 8002d4a:	f000 fbef 	bl	800352c <bufDeDat>
				next = 1;
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <task_drawString+0x128>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
					TimerStop(idTaskScanDecodeLen);
					idTaskScanDecodeLen = NO_TIMER;
				}
				next = 0;
			}
			break;
 8002d54:	e071      	b.n	8002e3a <task_drawString+0x11e>
				if (idTaskScanDecodeLen != NO_TIMER)
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <task_drawString+0x134>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2bff      	cmp	r3, #255	; 0xff
 8002d5c:	d007      	beq.n	8002d6e <task_drawString+0x52>
					TimerStop(idTaskScanDecodeLen);
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <task_drawString+0x134>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd ffde 	bl	8000d24 <TimerStop>
					idTaskScanDecodeLen = NO_TIMER;
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <task_drawString+0x134>)
 8002d6a:	22ff      	movs	r2, #255	; 0xff
 8002d6c:	701a      	strb	r2, [r3, #0]
				next = 0;
 8002d6e:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <task_drawString+0x128>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
			break;
 8002d74:	e061      	b.n	8002e3a <task_drawString+0x11e>

		case 1:
			if ( *ucg_draw_str.str != '\0' )
 8002d76:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <task_drawString+0x130>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d054      	beq.n	8002e2a <task_drawString+0x10e>
			{
				delta = ucg_DrawGlyph(ucg, ucg_draw_str.x, ucg_draw_str.y, ucg_draw_str.dir, (uint8_t)*ucg_draw_str.str);
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <task_drawString+0x130>)
 8002d82:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002d86:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <task_drawString+0x130>)
 8002d88:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <task_drawString+0x130>)
 8002d8e:	7918      	ldrb	r0, [r3, #4]
 8002d90:	4b2e      	ldr	r3, [pc, #184]	; (8002e4c <task_drawString+0x130>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4603      	mov	r3, r0
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	f7ff ff66 	bl	8002c6c <ucg_DrawGlyph>
 8002da0:	4603      	mov	r3, r0
 8002da2:	81fb      	strh	r3, [r7, #14]

				switch (ucg_draw_str.dir)
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <task_drawString+0x130>)
 8002da6:	791b      	ldrb	r3, [r3, #4]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d837      	bhi.n	8002e1c <task_drawString+0x100>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <task_drawString+0x98>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002ddb 	.word	0x08002ddb
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002e07 	.word	0x08002e07
				{
					case 0:
						ucg_draw_str.x += delta;
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <task_drawString+0x130>)
 8002dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	89fb      	ldrh	r3, [r7, #14]
 8002dce:	4413      	add	r3, r2
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	b21a      	sxth	r2, r3
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <task_drawString+0x130>)
 8002dd6:	801a      	strh	r2, [r3, #0]
						break;
 8002dd8:	e021      	b.n	8002e1e <task_drawString+0x102>

					case 1:
						ucg_draw_str.y += delta;
 8002dda:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <task_drawString+0x130>)
 8002ddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	89fb      	ldrh	r3, [r7, #14]
 8002de4:	4413      	add	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <task_drawString+0x130>)
 8002dec:	805a      	strh	r2, [r3, #2]
						break;
 8002dee:	e016      	b.n	8002e1e <task_drawString+0x102>

					case 2:
						ucg_draw_str.x -= delta;
 8002df0:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <task_drawString+0x130>)
 8002df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	89fb      	ldrh	r3, [r7, #14]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b21a      	sxth	r2, r3
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <task_drawString+0x130>)
 8002e02:	801a      	strh	r2, [r3, #0]
						break;
 8002e04:	e00b      	b.n	8002e1e <task_drawString+0x102>

					case 3:
						ucg_draw_str.y -= delta;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <task_drawString+0x130>)
 8002e08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	89fb      	ldrh	r3, [r7, #14]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b21a      	sxth	r2, r3
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <task_drawString+0x130>)
 8002e18:	805a      	strh	r2, [r3, #2]
						break;
 8002e1a:	e000      	b.n	8002e1e <task_drawString+0x102>

					default:
						break;
 8002e1c:	bf00      	nop
				}

				ucg_draw_str.str++;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <task_drawString+0x130>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	3301      	adds	r3, #1
 8002e24:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <task_drawString+0x130>)
 8002e26:	6093      	str	r3, [r2, #8]
			}
			else
			{
				next = 0;
			}
			break;
 8002e28:	e007      	b.n	8002e3a <task_drawString+0x11e>
				next = 0;
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <task_drawString+0x128>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
			break;
 8002e30:	e003      	b.n	8002e3a <task_drawString+0x11e>

		default:
			next = 0;
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <task_drawString+0x128>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
			break;
 8002e38:	bf00      	nop
	}
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20001228 	.word	0x20001228
 8002e48:	2000020c 	.word	0x2000020c
 8002e4c:	2000121c 	.word	0x2000121c
 8002e50:	20000010 	.word	0x20000010

08002e54 <ucg_DrawString>:

ucg_int_t ucg_DrawString(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, const char *str)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	71fb      	strb	r3, [r7, #7]
	ucg_int_t sum = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	83fb      	strh	r3, [r7, #30]
	ucg_draw_string_t drawStr;

	drawStr.x = x;
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	823b      	strh	r3, [r7, #16]
	drawStr.y = y;
 8002e76:	893b      	ldrh	r3, [r7, #8]
 8002e78:	827b      	strh	r3, [r7, #18]
	drawStr.dir = dir;
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	753b      	strb	r3, [r7, #20]
    drawStr.str = (char *)str;
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	61bb      	str	r3, [r7, #24]

	bufEnDat(&fontQueue, (uint8_t *)&drawStr);
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	4619      	mov	r1, r3
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <ucg_DrawString+0x68>)
 8002e8a:	f000 faff 	bl	800348c <bufEnDat>

	/* decode glyph */
	if (idTaskScanDecodeLen == NO_TIMER)
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <ucg_DrawString+0x6c>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2bff      	cmp	r3, #255	; 0xff
 8002e94:	d10b      	bne.n	8002eae <ucg_DrawString+0x5a>
	{
		idTaskScanDecodeLen = TimerStart("ucg_DrawString", 30, TIMER_REPEAT_FOREVER, task_drawString, ucg);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <ucg_DrawString+0x70>)
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	211e      	movs	r1, #30
 8002ea0:	4809      	ldr	r0, [pc, #36]	; (8002ec8 <ucg_DrawString+0x74>)
 8002ea2:	f7fd fedd 	bl	8000c60 <TimerStart>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <ucg_DrawString+0x6c>)
 8002eac:	701a      	strb	r2, [r3, #0]
	}

	return sum;
 8002eae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000020c 	.word	0x2000020c
 8002ec0:	20000010 	.word	0x20000010
 8002ec4:	08002d1d 	.word	0x08002d1d
 8002ec8:	080042a0 	.word	0x080042a0

08002ecc <ucg_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void ucg_UpdateRefHeight(ucg_t *ucg)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if ( ucg->font == NULL )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d05d      	beq.n	8002f98 <ucg_UpdateRefHeight+0xcc>
    return;
  ucg->font_ref_ascent = ucg->font_info.ascent_A;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  ucg->font_ref_descent = ucg->font_info.descent_g;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
  if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_TEXT )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d04d      	beq.n	8002f9a <ucg_UpdateRefHeight+0xce>
  {
  }
  else if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_XTEXT )
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d11c      	bne.n	8002f42 <ucg_UpdateRefHeight+0x76>
  {
    if ( ucg->font_ref_ascent < ucg->font_info.ascent_para )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8002f14:	429a      	cmp	r2, r3
 8002f16:	da05      	bge.n	8002f24 <ucg_UpdateRefHeight+0x58>
      ucg->font_ref_ascent = ucg->font_info.ascent_para;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.descent_para )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dd32      	ble.n	8002f9a <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.descent_para;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8002f40:	e02b      	b.n	8002f9a <ucg_UpdateRefHeight+0xce>
  }
  else
  {
    if ( ucg->font_ref_ascent < ucg->font_info.max_char_height+ucg->font_info.y_offset )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8002f50:	4619      	mov	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8002f58:	440b      	add	r3, r1
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	da0d      	bge.n	8002f7a <ucg_UpdateRefHeight+0xae>
      ucg->font_ref_ascent = ucg->font_info.max_char_height+ucg->font_info.y_offset;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	b25a      	sxtb	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.y_offset )
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dd07      	ble.n	8002f9a <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.y_offset;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8002f96:	e000      	b.n	8002f9a <ucg_UpdateRefHeight+0xce>
    return;
 8002f98:	bf00      	nop
  }  
}
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <ucg_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

ucg_int_t ucg_font_calc_vref_font(ucg_t *ucg)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <ucg_SetFontPosBaseline>:

void ucg_SetFontPosBaseline(ucg_t *ucg)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  ucg->font_calc_vref = ucg_font_calc_vref_font;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <ucg_SetFontPosBaseline+0x1c>)
 8002fc8:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	08002fa5 	.word	0x08002fa5

08002fdc <ucg_SetFont>:
}

/*===============================================*/

void ucg_SetFont(ucg_t *ucg, const ucg_fntpgm_uint8_t  *font)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  if ( ucg->font != font )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d012      	beq.n	8003016 <ucg_SetFont+0x3a>
  {
    ucg->font = font;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	679a      	str	r2, [r3, #120]	; 0x78
    ucg_read_font_info(&(ucg->font_info), font);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3390      	adds	r3, #144	; 0x90
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fac5 	bl	800258c <ucg_read_font_info>
    ucg_UpdateRefHeight(ucg);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ff62 	bl	8002ecc <ucg_UpdateRefHeight>
    //ucg_SetFontPosBaseline(ucg);

    // Init queue font
    bufInit(pQueueFont, &fontQueue, sizeof(ucg_draw_string_t), SIZE_QUEUE_DATA_FONT);
 8003008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300c:	220c      	movs	r2, #12
 800300e:	4904      	ldr	r1, [pc, #16]	; (8003020 <ucg_SetFont+0x44>)
 8003010:	4804      	ldr	r0, [pc, #16]	; (8003024 <ucg_SetFont+0x48>)
 8003012:	f000 f9d5 	bl	80033c0 <bufInit>
  }
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	2000020c 	.word	0x2000020c
 8003024:	2000021c 	.word	0x2000021c

08003028 <ucg_init_struct>:
uint8_t global_SREG_backup;		// used by the atomic macros
#endif


void ucg_init_struct(ucg_t *ucg)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  //memset(ucg, 0, sizeof(ucg_t));
  ucg->is_power_up = 0;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	7813      	ldrb	r3, [r2, #0]
 8003034:	f36f 0300 	bfc	r3, #0, #1
 8003038:	7013      	strb	r3, [r2, #0]
  ucg->rotate_chain_device_cb = 0;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  ucg->arg.scale = 1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	865a      	strh	r2, [r3, #50]	; 0x32
  //ucg->display_offset.x = 0;
  //ucg->display_offset.y = 0;
  ucg->font = 0;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	679a      	str	r2, [r3, #120]	; 0x78
  //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
  ucg->font_decode.is_transparent = 1;  // new font procedures
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  
  ucg->com_initial_change_sent = 0;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  ucg->com_status = 0;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  ucg->com_cfg_cd = 0;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <ucg_Init>:


ucg_int_t ucg_Init(ucg_t *ucg, ucg_dev_fnptr device_cb, ucg_dev_fnptr ext_cb, ucg_com_fnptr com_cb)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  ucg_int_t r;
  ucg_init_struct(ucg);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff ffce 	bl	8003028 <ucg_init_struct>
  if ( ext_cb == (ucg_dev_fnptr)0 )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <ucg_Init+0x22>
    ucg->ext_cb = ucg_ext_none;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <ucg_Init+0x58>)
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	e002      	b.n	80030a0 <ucg_Init+0x28>
 else 
    ucg->ext_cb = ext_cb;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]
  ucg->device_cb = device_cb;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	609a      	str	r2, [r3, #8]
  ucg->com_cb = com_cb;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	61da      	str	r2, [r3, #28]
  ucg_SetFontPosBaseline(ucg);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff ff85 	bl	8002fbc <ucg_SetFontPosBaseline>
  r = ucg_PowerUp(ucg);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff f98e 	bl	80023d4 <ucg_PowerUp>
 80030b8:	4603      	mov	r3, r0
 80030ba:	82fb      	strh	r3, [r7, #22]
  ucg_GetDimension(ucg);
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff f9ce 	bl	800245e <ucg_GetDimension>
  return r;
 80030c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	0800202d 	.word	0x0800202d

080030d4 <ucg_Draw90Line>:
*/

#include "ucg.h"

void ucg_Draw90Line(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len, ucg_int_t dir, ucg_int_t col_idx)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	817b      	strh	r3, [r7, #10]
 80030e6:	460b      	mov	r3, r1
 80030e8:	813b      	strh	r3, [r7, #8]
 80030ea:	4613      	mov	r3, r2
 80030ec:	80fb      	strh	r3, [r7, #6]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[col_idx].color[0];
 80030ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	333a      	adds	r3, #58	; 0x3a
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[col_idx].color[1];
 8003106:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	440b      	add	r3, r1
 8003114:	333b      	adds	r3, #59	; 0x3b
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[col_idx].color[2];
 800311e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	440b      	add	r3, r1
 800312c:	333c      	adds	r3, #60	; 0x3c
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  ucg->arg.pixel.pos.x = x;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	897a      	ldrh	r2, [r7, #10]
 800313a:	849a      	strh	r2, [r3, #36]	; 0x24
  ucg->arg.pixel.pos.y = y;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	893a      	ldrh	r2, [r7, #8]
 8003140:	84da      	strh	r2, [r3, #38]	; 0x26
  ucg->arg.len = len;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	859a      	strh	r2, [r3, #44]	; 0x2c
  ucg->arg.dir = dir;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8b3a      	ldrh	r2, [r7, #24]
 800314c:	85da      	strh	r2, [r3, #46]	; 0x2e
  ucg_DrawL90FXWithArg(ucg);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff f997 	bl	8002482 <ucg_DrawL90FXWithArg>
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <ucg_DrawHLine>:

void ucg_DrawHLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 0, 0);
 8003176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800317e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003182:	2000      	movs	r0, #0
 8003184:	9001      	str	r0, [sp, #4]
 8003186:	2000      	movs	r0, #0
 8003188:	9000      	str	r0, [sp, #0]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff ffa2 	bl	80030d4 <ucg_Draw90Line>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <ucg_SetColor>:
*/

#include "ucg.h"

void ucg_SetColor(ucg_t *ucg, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	4608      	mov	r0, r1
 80031a2:	4611      	mov	r1, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	4603      	mov	r3, r0
 80031a8:	70fb      	strb	r3, [r7, #3]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70bb      	strb	r3, [r7, #2]
 80031ae:	4613      	mov	r3, r2
 80031b0:	707b      	strb	r3, [r7, #1]
  //ucg->arg.pixel.rgb.color[0] = r;
  //ucg->arg.pixel.rgb.color[1] = g;
  //ucg->arg.pixel.rgb.color[2] = b;
  ucg->arg.rgb[idx].color[0] = r;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	440b      	add	r3, r1
 80031be:	333a      	adds	r3, #58	; 0x3a
 80031c0:	78ba      	ldrb	r2, [r7, #2]
 80031c2:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[1] = g;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	333b      	adds	r3, #59	; 0x3b
 80031d2:	787a      	ldrb	r2, [r7, #1]
 80031d4:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[2] = b;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	440b      	add	r3, r1
 80031e2:	333c      	adds	r3, #60	; 0x3c
 80031e4:	7c3a      	ldrb	r2, [r7, #16]
 80031e6:	701a      	strb	r2, [r3, #0]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <ucg_UndoRotate>:
#include "ucg.h"
#include <assert.h>

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_UndoRotate(ucg_t *ucg)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if ( ucg->rotate_chain_device_cb != NULL )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <ucg_UndoRotate+0x1e>
  {
    ucg->device_cb = ucg->rotate_chain_device_cb;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]
    ucg->rotate_chain_device_cb = NULL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  }
  ucg_GetDimension(ucg);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff f923 	bl	800245e <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff f908 	bl	800242e <ucg_SetMaxClipRange>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <ucg_rotate_180_xy>:

/*================================================*/
/* 180 degree */

static void ucg_rotate_180_xy(ucg_t *ucg, ucg_xy_t *xy)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
    ucg_int_t x, y;
    y = ucg->rotate_dimension.h;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8adb      	ldrh	r3, [r3, #22]
 8003234:	81fb      	strh	r3, [r7, #14]
    y -= xy->y;
 8003236:	89fa      	ldrh	r2, [r7, #14]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800323e:	b29b      	uxth	r3, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	81fb      	strh	r3, [r7, #14]
    y--;
 8003246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	81fb      	strh	r3, [r7, #14]
    xy->y = y;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	89fa      	ldrh	r2, [r7, #14]
 8003256:	805a      	strh	r2, [r3, #2]
  
    x = ucg->rotate_dimension.w;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8a9b      	ldrh	r3, [r3, #20]
 800325c:	81bb      	strh	r3, [r7, #12]
    x -= xy->x;
 800325e:	89ba      	ldrh	r2, [r7, #12]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003266:	b29b      	uxth	r3, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	81bb      	strh	r3, [r7, #12]
    x--;
 800326e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29b      	uxth	r3, r3
 8003278:	81bb      	strh	r3, [r7, #12]
    xy->x = x;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	89ba      	ldrh	r2, [r7, #12]
 800327e:	801a      	strh	r2, [r3, #0]
  
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <ucg_dev_rotate180>:

ucg_int_t ucg_dev_rotate180(ucg_t *ucg, ucg_int_t msg, void *data)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	460b      	mov	r3, r1
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	817b      	strh	r3, [r7, #10]
  switch(msg)
 800329a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800329e:	3b0c      	subs	r3, #12
 80032a0:	2b0b      	cmp	r3, #11
 80032a2:	d866      	bhi.n	8003372 <ucg_dev_rotate180+0xe6>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <ucg_dev_rotate180+0x20>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032fb 	.word	0x080032fb
 80032b0:	08003373 	.word	0x08003373
 80032b4:	08003373 	.word	0x08003373
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	08003373 	.word	0x08003373
 80032c0:	08003373 	.word	0x08003373
 80032c4:	08003373 	.word	0x08003373
 80032c8:	08003373 	.word	0x08003373
 80032cc:	08003343 	.word	0x08003343
 80032d0:	08003343 	.word	0x08003343
 80032d4:	08003373 	.word	0x08003373
 80032d8:	08003343 	.word	0x08003343
  {
    case UCG_MSG_GET_DIMENSION:
      ucg->rotate_chain_device_cb(ucg, msg, &(ucg->rotate_dimension)); 
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	3214      	adds	r2, #20
 80032e4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	4798      	blx	r3
      *((ucg_wh_t *)data) = (ucg->rotate_dimension);
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3314      	adds	r3, #20
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	6010      	str	r0, [r2, #0]
      return 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e043      	b.n	8003382 <ucg_dev_rotate180+0xf6>
    case UCG_MSG_SET_CLIP_BOX:
      /* calculate and rotate lower right point of the clip box */
      ((ucg_box_t * )data)->ul.y += ((ucg_box_t * )data)->size.h-1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003308:	b29b      	uxth	r3, r3
 800330a:	4413      	add	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29b      	uxth	r3, r3
 8003312:	b21a      	sxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	805a      	strh	r2, [r3, #2]
      ((ucg_box_t * )data)->ul.x += ((ucg_box_t * )data)->size.w-1;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003326:	b29b      	uxth	r3, r3
 8003328:	4413      	add	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	b21a      	sxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	801a      	strh	r2, [r3, #0]
      ucg_rotate_180_xy(ucg, &(((ucg_box_t * )data)->ul)); 
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4619      	mov	r1, r3
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff ff73 	bl	8003226 <ucg_rotate_180_xy>
      /* box dimensions are the same */
      break;
 8003340:	e017      	b.n	8003372 <ucg_dev_rotate180+0xe6>
#ifdef UCG_MSG_DRAW_L90BF
    case UCG_MSG_DRAW_L90BF:
#endif /* UCG_MSG_DRAW_L90BF */
    case UCG_MSG_DRAW_L90SE:
    //case UCG_MSG_DRAW_L90RL:
      ucg->arg.dir+=2;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	3302      	adds	r3, #2
 800334c:	b29b      	uxth	r3, r3
 800334e:	b21a      	sxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg->arg.dir&=3;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	b21a      	sxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg_rotate_180_xy(ucg, &(ucg->arg.pixel.pos)); 
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3324      	adds	r3, #36	; 0x24
 8003368:	4619      	mov	r1, r3
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff ff5b 	bl	8003226 <ucg_rotate_180_xy>
      break;
 8003370:	bf00      	nop
  }
  return ucg->rotate_chain_device_cb(ucg, msg, data);  
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	4798      	blx	r3
 8003380:	4603      	mov	r3, r0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop

0800338c <ucg_SetRotate180>:

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_SetRotate180(ucg_t *ucg)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  ucg_UndoRotate(ucg);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff2d 	bl	80031f4 <ucg_UndoRotate>
  ucg->rotate_chain_device_cb = ucg->device_cb;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	611a      	str	r2, [r3, #16]
  ucg->device_cb = ucg_dev_rotate180;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a05      	ldr	r2, [pc, #20]	; (80033bc <ucg_SetRotate180+0x30>)
 80033a6:	609a      	str	r2, [r3, #8]
  ucg_GetDimension(ucg);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff f858 	bl	800245e <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff f83d 	bl	800242e <ucg_SetMaxClipRange>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	0800328d 	.word	0x0800328d

080033c0 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	4611      	mov	r1, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	460b      	mov	r3, r1
 80033d0:	71fb      	strb	r3, [r7, #7]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	88ba      	ldrh	r2, [r7, #4]
 80033da:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	79fa      	ldrb	r2, [r7, #7]
 80033e0:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 80033e8:	68b8      	ldr	r0, [r7, #8]
 80033ea:	f000 f836 	bl	800345a <bufFlush>
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	885b      	ldrh	r3, [r3, #2]
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	885a      	ldrh	r2, [r3, #2]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	bf2c      	ite	cs
 8003422:	2301      	movcs	r3, #1
 8003424:	2300      	movcc	r3, #0
 8003426:	b2db      	uxtb	r3, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	88da      	ldrh	r2, [r3, #6]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	891b      	ldrh	r3, [r3, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68d8      	ldr	r0, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	2100      	movs	r1, #0
 8003480:	f000 f899 	bl	80035b6 <memsetl>
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003496:	b672      	cpsid	i
}
 8003498:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	e021      	b.n	80034e4 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	88c9      	ldrh	r1, [r1, #6]
 80034ae:	440b      	add	r3, r1
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	88db      	ldrh	r3, [r3, #6]
 80034b8:	3301      	adds	r3, #1
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	b21a      	sxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	4013      	ands	r3, r2
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	885b      	ldrh	r3, [r3, #2]
 80034d6:	3301      	adds	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	3301      	adds	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	791b      	ldrb	r3, [r3, #4]
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3d8      	bcc.n	80034a0 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ff8d 	bl	800340e <bufIsFull>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d011      	beq.n	800351e <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	891a      	ldrh	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	791b      	ldrb	r3, [r3, #4]
 8003502:	b29b      	uxth	r3, r3
 8003504:	4413      	add	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21a      	sxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	3b01      	subs	r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	b21b      	sxth	r3, r3
 8003514:	4013      	ands	r3, r2
 8003516:	b21b      	sxth	r3, r3
 8003518:	b29a      	uxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800351e:	b662      	cpsie	i
}
 8003520:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003536:	b672      	cpsid	i
}
 8003538:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff7a 	bl	8003434 <bufIsEmpty>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800354c:	b662      	cpsie	i
}
 800354e:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 8003550:	2302      	movs	r3, #2
 8003552:	e02c      	b.n	80035ae <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e021      	b.n	800359e <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	8912      	ldrh	r2, [r2, #8]
 8003562:	441a      	add	r2, r3
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	6839      	ldr	r1, [r7, #0]
 8003568:	440b      	add	r3, r1
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	891b      	ldrh	r3, [r3, #8]
 8003572:	3301      	adds	r3, #1
 8003574:	b29b      	uxth	r3, r3
 8003576:	b21a      	sxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	b21b      	sxth	r3, r3
 8003582:	4013      	ands	r3, r2
 8003584:	b21b      	sxth	r3, r3
 8003586:	b29a      	uxth	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	885b      	ldrh	r3, [r3, #2]
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	3301      	adds	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	791b      	ldrb	r3, [r3, #4]
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3d8      	bcc.n	800355a <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80035a8:	b662      	cpsie	i
}
 80035aa:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	70fb      	strb	r3, [r7, #3]
 80035c2:	4613      	mov	r3, r2
 80035c4:	803b      	strh	r3, [r7, #0]
    while (size--) {
 80035c6:	e004      	b.n	80035d2 <memsetl+0x1c>
        *dst++ = value;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	701a      	strb	r2, [r3, #0]
    while (size--) {
 80035d2:	883b      	ldrh	r3, [r7, #0]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	803a      	strh	r2, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f5      	bne.n	80035c8 <memsetl+0x12>
    }    
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <Calculate_time>:
/******************************************************************************/

/******************************************************************************/
/*                              EXPORTED DATA                                 */
/******************************************************************************/
uint32_t Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent){
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
	uint32_t TimeTotal;
	if (TimeInit >= TimeCurrent){
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d304      	bcc.n	8003606 <Calculate_time+0x1c>
		TimeTotal = TimeCurrent - TimeInit;
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e004      	b.n	8003610 <Calculate_time+0x26>
	}else {
		TimeTotal = 0xFFFFFFFFU + TimeCurrent - TimeInit;
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
	}
	return TimeTotal;
 8003610:	68fb      	ldr	r3, [r7, #12]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <main>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
int main(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b0c4      	sub	sp, #272	; 0x110
 8003624:	af02      	add	r7, sp, #8
	I2C1_Init();
 8003626:	f000 f87b 	bl	8003720 <I2C1_Init>
	TimerInit();
 800362a:	f7fd faf7 	bl	8000c1c <TimerInit>
	SystemInit();
 800362e:	f7fc fe27 	bl	8000280 <SystemInit>
	char buffer[256] = "b0";
 8003632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800363a:	f243 0262 	movw	r2, #12386	; 0x3062
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	3304      	adds	r3, #4
 8003642:	22fc      	movs	r2, #252	; 0xfc
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f99a 	bl	8003980 <memset>
	uint32_t Timetick = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint16_t  i = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
	AppInitCommon();
 8003658:	f000 f838 	bl	80036cc <AppInitCommon>
    /* Loop forever */
	while (1){
		I2C_Start(I2C_Direction_Receiver);
 800365c:	2001      	movs	r0, #1
 800365e:	f000 f8af 	bl	80037c0 <I2C_Start>
		I2C_TransmitData(0xE5);
 8003662:	20e5      	movs	r0, #229	; 0xe5
 8003664:	f000 f8f0 	bl	8003848 <I2C_TransmitData>


		if (Calculate_time(Timetick, GetMilSecTick()) >= 1000){
 8003668:	f7fd fbac 	bl	8000dc4 <GetMilSecTick>
 800366c:	4603      	mov	r3, r0
 800366e:	4619      	mov	r1, r3
 8003670:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8003674:	f7ff ffb9 	bl	80035ea <Calculate_time>
 8003678:	4603      	mov	r3, r0
 800367a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800367e:	d31e      	bcc.n	80036be <main+0x9e>
			i++;
 8003680:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8003684:	3301      	adds	r3, #1
 8003686:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			Timetick = GetMilSecTick();
 800368a:	f7fd fb9b 	bl	8000dc4 <GetMilSecTick>
 800368e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
			memset(buffer,0,sizeof(buffer));
 8003692:	463b      	mov	r3, r7
 8003694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f970 	bl	8003980 <memset>
			sprintf(buffer,"b: %d",i);
 80036a0:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 80036a4:	463b      	mov	r3, r7
 80036a6:	4907      	ldr	r1, [pc, #28]	; (80036c4 <main+0xa4>)
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f949 	bl	8003940 <siprintf>
			ucg_DrawString(&ucg, 60, 24, 0,buffer);
 80036ae:	463b      	mov	r3, r7
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	2218      	movs	r2, #24
 80036b6:	213c      	movs	r1, #60	; 0x3c
 80036b8:	4803      	ldr	r0, [pc, #12]	; (80036c8 <main+0xa8>)
 80036ba:	f7ff fbcb 	bl	8002e54 <ucg_DrawString>
		}
		processTimerScheduler();
 80036be:	f7fd fb8d 	bl	8000ddc <processTimerScheduler>
		I2C_Start(I2C_Direction_Receiver);
 80036c2:	e7cb      	b.n	800365c <main+0x3c>
 80036c4:	080042b0 	.word	0x080042b0
 80036c8:	2000122c 	.word	0x2000122c

080036cc <AppInitCommon>:
	}
}
/******************************************************************************/

void AppInitCommon(){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af02      	add	r7, sp, #8
	TimerInit();
 80036d2:	f7fd faa3 	bl	8000c1c <TimerInit>
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 80036d6:	2100      	movs	r1, #0
 80036d8:	480f      	ldr	r0, [pc, #60]	; (8003718 <AppInitCommon+0x4c>)
 80036da:	f7fd fe05 	bl	80012e8 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 80036de:	480e      	ldr	r0, [pc, #56]	; (8003718 <AppInitCommon+0x4c>)
 80036e0:	f7fd fe4a 	bl	8001378 <ucg_ClearScreen>
	ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
 80036e4:	490d      	ldr	r1, [pc, #52]	; (800371c <AppInitCommon+0x50>)
 80036e6:	480c      	ldr	r0, [pc, #48]	; (8003718 <AppInitCommon+0x4c>)
 80036e8:	f7ff fc78 	bl	8002fdc <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 80036ec:	23ff      	movs	r3, #255	; 0xff
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	23ff      	movs	r3, #255	; 0xff
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	2100      	movs	r1, #0
 80036f6:	4808      	ldr	r0, [pc, #32]	; (8003718 <AppInitCommon+0x4c>)
 80036f8:	f7ff fd4e 	bl	8003198 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 80036fc:	2300      	movs	r3, #0
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	2200      	movs	r2, #0
 8003704:	2101      	movs	r1, #1
 8003706:	4804      	ldr	r0, [pc, #16]	; (8003718 <AppInitCommon+0x4c>)
 8003708:	f7ff fd46 	bl	8003198 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <AppInitCommon+0x4c>)
 800370e:	f7ff fe3d 	bl	800338c <ucg_SetRotate180>
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	2000122c 	.word	0x2000122c
 800371c:	08004398 	.word	0x08004398

08003720 <I2C1_Init>:

void I2C1_Init(void){
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_APB1PeriphClockCmd(I2C_MASTER_RCC, ENABLE);
 8003726:	2101      	movs	r1, #1
 8003728:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800372c:	f7fd f982 	bl	8000a34 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(I2C_MASTER_GPIO_RCC, ENABLE);
 8003730:	2101      	movs	r1, #1
 8003732:	2002      	movs	r0, #2
 8003734:	f7fd f95e 	bl	80009f4 <RCC_AHB1PeriphClockCmd>

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003738:	2302      	movs	r3, #2
 800373a:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800373c:	2302      	movs	r3, #2
 800373e:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003740:	2301      	movs	r3, #1
 8003742:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003744:	2301      	movs	r3, #1
 8003746:	75bb      	strb	r3, [r7, #22]


	GPIO_InitStructure.GPIO_Pin = SCL_MASTER_PIN;
 8003748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800374c:	613b      	str	r3, [r7, #16]
	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStructure);
 800374e:	f107 0310 	add.w	r3, r7, #16
 8003752:	4619      	mov	r1, r3
 8003754:	4817      	ldr	r0, [pc, #92]	; (80037b4 <I2C1_Init+0x94>)
 8003756:	f7fc fe1b 	bl	8000390 <GPIO_Init>

	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStructure);
 800375a:	f107 0310 	add.w	r3, r7, #16
 800375e:	4619      	mov	r1, r3
 8003760:	4814      	ldr	r0, [pc, #80]	; (80037b4 <I2C1_Init+0x94>)
 8003762:	f7fc fe15 	bl	8000390 <GPIO_Init>

	//Chon PA8 lam chan SCL
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource8, GPIO_AF_I2C1);
 8003766:	2204      	movs	r2, #4
 8003768:	2108      	movs	r1, #8
 800376a:	4812      	ldr	r0, [pc, #72]	; (80037b4 <I2C1_Init+0x94>)
 800376c:	f7fc feb7 	bl	80004de <GPIO_PinAFConfig>
	//Chon PB9 lam chan SDA
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource9, GPIO_AF_I2C1);
 8003770:	2204      	movs	r2, #4
 8003772:	2109      	movs	r1, #9
 8003774:	480f      	ldr	r0, [pc, #60]	; (80037b4 <I2C1_Init+0x94>)
 8003776:	f7fc feb2 	bl	80004de <GPIO_PinAFConfig>

	//Khoi tao ngoai vi I2C3 su dung che do Master
	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800377a:	2300      	movs	r3, #0
 800377c:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <I2C1_Init+0x98>)
 8003780:	603b      	str	r3, [r7, #0]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8003782:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003786:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8003788:	2300      	movs	r3, #0
 800378a:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800378c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003790:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003792:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003796:	81bb      	strh	r3, [r7, #12]

	//Khoi tao I2C
	I2C_Init(I2C_MASTER_INSTANCE, &I2C_InitStructure);
 8003798:	463b      	mov	r3, r7
 800379a:	4619      	mov	r1, r3
 800379c:	4807      	ldr	r0, [pc, #28]	; (80037bc <I2C1_Init+0x9c>)
 800379e:	f7fc fee7 	bl	8000570 <I2C_Init>

	//Bat I2C
	I2C_Cmd(I2C_MASTER_INSTANCE, ENABLE);
 80037a2:	2101      	movs	r1, #1
 80037a4:	4805      	ldr	r0, [pc, #20]	; (80037bc <I2C1_Init+0x9c>)
 80037a6:	f7fc ffa5 	bl	80006f4 <I2C_Cmd>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40020400 	.word	0x40020400
 80037b8:	00061a80 	.word	0x00061a80
 80037bc:	40005400 	.word	0x40005400

080037c0 <I2C_Start>:

void I2C_Start(uint8_t direction){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
	//Doi I2Cx khong ban
	while (I2C_GetFlagStatus(I2C_MASTER_INSTANCE, I2C_FLAG_BUSY));
 80037ca:	bf00      	nop
 80037cc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80037d0:	4819      	ldr	r0, [pc, #100]	; (8003838 <I2C_Start+0x78>)
 80037d2:	f7fd f82d 	bl	8000830 <I2C_GetFlagStatus>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f7      	bne.n	80037cc <I2C_Start+0xc>

	I2C_GenerateSTART(I2C_MASTER_INSTANCE, ENABLE);
 80037dc:	2101      	movs	r1, #1
 80037de:	4816      	ldr	r0, [pc, #88]	; (8003838 <I2C_Start+0x78>)
 80037e0:	f7fc ffa8 	bl	8000734 <I2C_GenerateSTART>

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_MODE_SELECT));
 80037e4:	bf00      	nop
 80037e6:	4915      	ldr	r1, [pc, #84]	; (800383c <I2C_Start+0x7c>)
 80037e8:	4813      	ldr	r0, [pc, #76]	; (8003838 <I2C_Start+0x78>)
 80037ea:	f7fc fff1 	bl	80007d0 <I2C_CheckEvent>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f8      	beq.n	80037e6 <I2C_Start+0x26>

	//gui dia chi Slave de ghi
	I2C_Send7bitAddress(I2C_MASTER_INSTANCE, SLAVE_ADDRESS, direction);
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	461a      	mov	r2, r3
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	480f      	ldr	r0, [pc, #60]	; (8003838 <I2C_Start+0x78>)
 80037fc:	f7fc ffba 	bl	8000774 <I2C_Send7bitAddress>


	if(direction == I2C_Direction_Transmitter){
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d108      	bne.n	8003818 <I2C_Start+0x58>
		while(!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8003806:	bf00      	nop
 8003808:	490d      	ldr	r1, [pc, #52]	; (8003840 <I2C_Start+0x80>)
 800380a:	480b      	ldr	r0, [pc, #44]	; (8003838 <I2C_Start+0x78>)
 800380c:	f7fc ffe0 	bl	80007d0 <I2C_CheckEvent>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f8      	beq.n	8003808 <I2C_Start+0x48>
	}
	else if(direction == I2C_Direction_Receiver){
		while(!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	}
}
 8003816:	e00a      	b.n	800382e <I2C_Start+0x6e>
	else if(direction == I2C_Direction_Receiver){
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <I2C_Start+0x6e>
		while(!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 800381e:	bf00      	nop
 8003820:	4908      	ldr	r1, [pc, #32]	; (8003844 <I2C_Start+0x84>)
 8003822:	4805      	ldr	r0, [pc, #20]	; (8003838 <I2C_Start+0x78>)
 8003824:	f7fc ffd4 	bl	80007d0 <I2C_CheckEvent>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f8      	beq.n	8003820 <I2C_Start+0x60>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40005400 	.word	0x40005400
 800383c:	00030001 	.word	0x00030001
 8003840:	00070082 	.word	0x00070082
 8003844:	00030002 	.word	0x00030002

08003848 <I2C_TransmitData>:


void I2C_TransmitData(uint8_t data){
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
	I2C_SendData(I2C_MASTER_INSTANCE, data);
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	4619      	mov	r1, r3
 8003856:	4808      	ldr	r0, [pc, #32]	; (8003878 <I2C_TransmitData+0x30>)
 8003858:	f7fc ffaa 	bl	80007b0 <I2C_SendData>

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800385c:	bf00      	nop
 800385e:	4907      	ldr	r1, [pc, #28]	; (800387c <I2C_TransmitData+0x34>)
 8003860:	4805      	ldr	r0, [pc, #20]	; (8003878 <I2C_TransmitData+0x30>)
 8003862:	f7fc ffb5 	bl	80007d0 <I2C_CheckEvent>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f8      	beq.n	800385e <I2C_TransmitData+0x16>
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40005400 	.word	0x40005400
 800387c:	00070084 	.word	0x00070084

08003880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <_sbrk+0x5c>)
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <_sbrk+0x60>)
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <_sbrk+0x64>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <_sbrk+0x64>)
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <_sbrk+0x68>)
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <_sbrk+0x64>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d207      	bcs.n	80038c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038b0:	f000 f86e 	bl	8003990 <__errno>
 80038b4:	4603      	mov	r3, r0
 80038b6:	220c      	movs	r2, #12
 80038b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	e009      	b.n	80038d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <_sbrk+0x64>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <_sbrk+0x64>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <_sbrk+0x64>)
 80038d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20018000 	.word	0x20018000
 80038e0:	00000400 	.word	0x00000400
 80038e4:	200012e0 	.word	0x200012e0
 80038e8:	20001430 	.word	0x20001430

080038ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80038f0:	f7fc fcc6 	bl	8000280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038f4:	480c      	ldr	r0, [pc, #48]	; (8003928 <LoopForever+0x6>)
  ldr r1, =_edata
 80038f6:	490d      	ldr	r1, [pc, #52]	; (800392c <LoopForever+0xa>)
  ldr r2, =_sidata
 80038f8:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <LoopForever+0xe>)
  movs r3, #0
 80038fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038fc:	e002      	b.n	8003904 <LoopCopyDataInit>

080038fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003902:	3304      	adds	r3, #4

08003904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003908:	d3f9      	bcc.n	80038fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800390a:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800390c:	4c0a      	ldr	r4, [pc, #40]	; (8003938 <LoopForever+0x16>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003910:	e001      	b.n	8003916 <LoopFillZerobss>

08003912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003914:	3204      	adds	r2, #4

08003916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003918:	d3fb      	bcc.n	8003912 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800391a:	f000 f83f 	bl	800399c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800391e:	f7ff fe7f 	bl	8003620 <main>

08003922 <LoopForever>:

LoopForever:
  b LoopForever
 8003922:	e7fe      	b.n	8003922 <LoopForever>
  ldr   r0, =_estack
 8003924:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800392c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003930:	08004b7c 	.word	0x08004b7c
  ldr r2, =_sbss
 8003934:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8003938:	2000142c 	.word	0x2000142c

0800393c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800393c:	e7fe      	b.n	800393c <ADC_IRQHandler>
	...

08003940 <siprintf>:
 8003940:	b40e      	push	{r1, r2, r3}
 8003942:	b500      	push	{lr}
 8003944:	b09c      	sub	sp, #112	; 0x70
 8003946:	ab1d      	add	r3, sp, #116	; 0x74
 8003948:	9002      	str	r0, [sp, #8]
 800394a:	9006      	str	r0, [sp, #24]
 800394c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003950:	4809      	ldr	r0, [pc, #36]	; (8003978 <siprintf+0x38>)
 8003952:	9107      	str	r1, [sp, #28]
 8003954:	9104      	str	r1, [sp, #16]
 8003956:	4909      	ldr	r1, [pc, #36]	; (800397c <siprintf+0x3c>)
 8003958:	f853 2b04 	ldr.w	r2, [r3], #4
 800395c:	9105      	str	r1, [sp, #20]
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	a902      	add	r1, sp, #8
 8003964:	f000 f992 	bl	8003c8c <_svfiprintf_r>
 8003968:	9b02      	ldr	r3, [sp, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	b01c      	add	sp, #112	; 0x70
 8003970:	f85d eb04 	ldr.w	lr, [sp], #4
 8003974:	b003      	add	sp, #12
 8003976:	4770      	bx	lr
 8003978:	20000060 	.word	0x20000060
 800397c:	ffff0208 	.word	0xffff0208

08003980 <memset>:
 8003980:	4402      	add	r2, r0
 8003982:	4603      	mov	r3, r0
 8003984:	4293      	cmp	r3, r2
 8003986:	d100      	bne.n	800398a <memset+0xa>
 8003988:	4770      	bx	lr
 800398a:	f803 1b01 	strb.w	r1, [r3], #1
 800398e:	e7f9      	b.n	8003984 <memset+0x4>

08003990 <__errno>:
 8003990:	4b01      	ldr	r3, [pc, #4]	; (8003998 <__errno+0x8>)
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000060 	.word	0x20000060

0800399c <__libc_init_array>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4d0d      	ldr	r5, [pc, #52]	; (80039d4 <__libc_init_array+0x38>)
 80039a0:	4c0d      	ldr	r4, [pc, #52]	; (80039d8 <__libc_init_array+0x3c>)
 80039a2:	1b64      	subs	r4, r4, r5
 80039a4:	10a4      	asrs	r4, r4, #2
 80039a6:	2600      	movs	r6, #0
 80039a8:	42a6      	cmp	r6, r4
 80039aa:	d109      	bne.n	80039c0 <__libc_init_array+0x24>
 80039ac:	4d0b      	ldr	r5, [pc, #44]	; (80039dc <__libc_init_array+0x40>)
 80039ae:	4c0c      	ldr	r4, [pc, #48]	; (80039e0 <__libc_init_array+0x44>)
 80039b0:	f000 fc6a 	bl	8004288 <_init>
 80039b4:	1b64      	subs	r4, r4, r5
 80039b6:	10a4      	asrs	r4, r4, #2
 80039b8:	2600      	movs	r6, #0
 80039ba:	42a6      	cmp	r6, r4
 80039bc:	d105      	bne.n	80039ca <__libc_init_array+0x2e>
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c4:	4798      	blx	r3
 80039c6:	3601      	adds	r6, #1
 80039c8:	e7ee      	b.n	80039a8 <__libc_init_array+0xc>
 80039ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ce:	4798      	blx	r3
 80039d0:	3601      	adds	r6, #1
 80039d2:	e7f2      	b.n	80039ba <__libc_init_array+0x1e>
 80039d4:	08004b74 	.word	0x08004b74
 80039d8:	08004b74 	.word	0x08004b74
 80039dc:	08004b74 	.word	0x08004b74
 80039e0:	08004b78 	.word	0x08004b78

080039e4 <__retarget_lock_acquire_recursive>:
 80039e4:	4770      	bx	lr

080039e6 <__retarget_lock_release_recursive>:
 80039e6:	4770      	bx	lr

080039e8 <_free_r>:
 80039e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ea:	2900      	cmp	r1, #0
 80039ec:	d044      	beq.n	8003a78 <_free_r+0x90>
 80039ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f2:	9001      	str	r0, [sp, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f1a1 0404 	sub.w	r4, r1, #4
 80039fa:	bfb8      	it	lt
 80039fc:	18e4      	addlt	r4, r4, r3
 80039fe:	f000 f8df 	bl	8003bc0 <__malloc_lock>
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <_free_r+0x94>)
 8003a04:	9801      	ldr	r0, [sp, #4]
 8003a06:	6813      	ldr	r3, [r2, #0]
 8003a08:	b933      	cbnz	r3, 8003a18 <_free_r+0x30>
 8003a0a:	6063      	str	r3, [r4, #4]
 8003a0c:	6014      	str	r4, [r2, #0]
 8003a0e:	b003      	add	sp, #12
 8003a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a14:	f000 b8da 	b.w	8003bcc <__malloc_unlock>
 8003a18:	42a3      	cmp	r3, r4
 8003a1a:	d908      	bls.n	8003a2e <_free_r+0x46>
 8003a1c:	6825      	ldr	r5, [r4, #0]
 8003a1e:	1961      	adds	r1, r4, r5
 8003a20:	428b      	cmp	r3, r1
 8003a22:	bf01      	itttt	eq
 8003a24:	6819      	ldreq	r1, [r3, #0]
 8003a26:	685b      	ldreq	r3, [r3, #4]
 8003a28:	1949      	addeq	r1, r1, r5
 8003a2a:	6021      	streq	r1, [r4, #0]
 8003a2c:	e7ed      	b.n	8003a0a <_free_r+0x22>
 8003a2e:	461a      	mov	r2, r3
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b10b      	cbz	r3, 8003a38 <_free_r+0x50>
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	d9fa      	bls.n	8003a2e <_free_r+0x46>
 8003a38:	6811      	ldr	r1, [r2, #0]
 8003a3a:	1855      	adds	r5, r2, r1
 8003a3c:	42a5      	cmp	r5, r4
 8003a3e:	d10b      	bne.n	8003a58 <_free_r+0x70>
 8003a40:	6824      	ldr	r4, [r4, #0]
 8003a42:	4421      	add	r1, r4
 8003a44:	1854      	adds	r4, r2, r1
 8003a46:	42a3      	cmp	r3, r4
 8003a48:	6011      	str	r1, [r2, #0]
 8003a4a:	d1e0      	bne.n	8003a0e <_free_r+0x26>
 8003a4c:	681c      	ldr	r4, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	6053      	str	r3, [r2, #4]
 8003a52:	440c      	add	r4, r1
 8003a54:	6014      	str	r4, [r2, #0]
 8003a56:	e7da      	b.n	8003a0e <_free_r+0x26>
 8003a58:	d902      	bls.n	8003a60 <_free_r+0x78>
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	6003      	str	r3, [r0, #0]
 8003a5e:	e7d6      	b.n	8003a0e <_free_r+0x26>
 8003a60:	6825      	ldr	r5, [r4, #0]
 8003a62:	1961      	adds	r1, r4, r5
 8003a64:	428b      	cmp	r3, r1
 8003a66:	bf04      	itt	eq
 8003a68:	6819      	ldreq	r1, [r3, #0]
 8003a6a:	685b      	ldreq	r3, [r3, #4]
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	bf04      	itt	eq
 8003a70:	1949      	addeq	r1, r1, r5
 8003a72:	6021      	streq	r1, [r4, #0]
 8003a74:	6054      	str	r4, [r2, #4]
 8003a76:	e7ca      	b.n	8003a0e <_free_r+0x26>
 8003a78:	b003      	add	sp, #12
 8003a7a:	bd30      	pop	{r4, r5, pc}
 8003a7c:	20001424 	.word	0x20001424

08003a80 <sbrk_aligned>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4e0e      	ldr	r6, [pc, #56]	; (8003abc <sbrk_aligned+0x3c>)
 8003a84:	460c      	mov	r4, r1
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	4605      	mov	r5, r0
 8003a8a:	b911      	cbnz	r1, 8003a92 <sbrk_aligned+0x12>
 8003a8c:	f000 fba6 	bl	80041dc <_sbrk_r>
 8003a90:	6030      	str	r0, [r6, #0]
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 fba1 	bl	80041dc <_sbrk_r>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d00a      	beq.n	8003ab4 <sbrk_aligned+0x34>
 8003a9e:	1cc4      	adds	r4, r0, #3
 8003aa0:	f024 0403 	bic.w	r4, r4, #3
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d007      	beq.n	8003ab8 <sbrk_aligned+0x38>
 8003aa8:	1a21      	subs	r1, r4, r0
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 fb96 	bl	80041dc <_sbrk_r>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d101      	bne.n	8003ab8 <sbrk_aligned+0x38>
 8003ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	20001428 	.word	0x20001428

08003ac0 <_malloc_r>:
 8003ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac4:	1ccd      	adds	r5, r1, #3
 8003ac6:	f025 0503 	bic.w	r5, r5, #3
 8003aca:	3508      	adds	r5, #8
 8003acc:	2d0c      	cmp	r5, #12
 8003ace:	bf38      	it	cc
 8003ad0:	250c      	movcc	r5, #12
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	db01      	blt.n	8003adc <_malloc_r+0x1c>
 8003ad8:	42a9      	cmp	r1, r5
 8003ada:	d905      	bls.n	8003ae8 <_malloc_r+0x28>
 8003adc:	230c      	movs	r3, #12
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	2600      	movs	r6, #0
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bbc <_malloc_r+0xfc>
 8003aec:	f000 f868 	bl	8003bc0 <__malloc_lock>
 8003af0:	f8d8 3000 	ldr.w	r3, [r8]
 8003af4:	461c      	mov	r4, r3
 8003af6:	bb5c      	cbnz	r4, 8003b50 <_malloc_r+0x90>
 8003af8:	4629      	mov	r1, r5
 8003afa:	4638      	mov	r0, r7
 8003afc:	f7ff ffc0 	bl	8003a80 <sbrk_aligned>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	4604      	mov	r4, r0
 8003b04:	d155      	bne.n	8003bb2 <_malloc_r+0xf2>
 8003b06:	f8d8 4000 	ldr.w	r4, [r8]
 8003b0a:	4626      	mov	r6, r4
 8003b0c:	2e00      	cmp	r6, #0
 8003b0e:	d145      	bne.n	8003b9c <_malloc_r+0xdc>
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	d048      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4631      	mov	r1, r6
 8003b18:	4638      	mov	r0, r7
 8003b1a:	eb04 0903 	add.w	r9, r4, r3
 8003b1e:	f000 fb5d 	bl	80041dc <_sbrk_r>
 8003b22:	4581      	cmp	r9, r0
 8003b24:	d13f      	bne.n	8003ba6 <_malloc_r+0xe6>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	1a6d      	subs	r5, r5, r1
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f7ff ffa7 	bl	8003a80 <sbrk_aligned>
 8003b32:	3001      	adds	r0, #1
 8003b34:	d037      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	442b      	add	r3, r5
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d038      	beq.n	8003bb6 <_malloc_r+0xf6>
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	42a2      	cmp	r2, r4
 8003b48:	d12b      	bne.n	8003ba2 <_malloc_r+0xe2>
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e00f      	b.n	8003b70 <_malloc_r+0xb0>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	d41f      	bmi.n	8003b96 <_malloc_r+0xd6>
 8003b56:	2a0b      	cmp	r2, #11
 8003b58:	d917      	bls.n	8003b8a <_malloc_r+0xca>
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	6025      	str	r5, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	6059      	strne	r1, [r3, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	bf08      	it	eq
 8003b68:	f8c8 1000 	streq.w	r1, [r8]
 8003b6c:	5162      	str	r2, [r4, r5]
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	4638      	mov	r0, r7
 8003b72:	f104 060b 	add.w	r6, r4, #11
 8003b76:	f000 f829 	bl	8003bcc <__malloc_unlock>
 8003b7a:	f026 0607 	bic.w	r6, r6, #7
 8003b7e:	1d23      	adds	r3, r4, #4
 8003b80:	1af2      	subs	r2, r6, r3
 8003b82:	d0ae      	beq.n	8003ae2 <_malloc_r+0x22>
 8003b84:	1b9b      	subs	r3, r3, r6
 8003b86:	50a3      	str	r3, [r4, r2]
 8003b88:	e7ab      	b.n	8003ae2 <_malloc_r+0x22>
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	6862      	ldr	r2, [r4, #4]
 8003b8e:	d1dd      	bne.n	8003b4c <_malloc_r+0x8c>
 8003b90:	f8c8 2000 	str.w	r2, [r8]
 8003b94:	e7ec      	b.n	8003b70 <_malloc_r+0xb0>
 8003b96:	4623      	mov	r3, r4
 8003b98:	6864      	ldr	r4, [r4, #4]
 8003b9a:	e7ac      	b.n	8003af6 <_malloc_r+0x36>
 8003b9c:	4634      	mov	r4, r6
 8003b9e:	6876      	ldr	r6, [r6, #4]
 8003ba0:	e7b4      	b.n	8003b0c <_malloc_r+0x4c>
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	e7cc      	b.n	8003b40 <_malloc_r+0x80>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4638      	mov	r0, r7
 8003bac:	f000 f80e 	bl	8003bcc <__malloc_unlock>
 8003bb0:	e797      	b.n	8003ae2 <_malloc_r+0x22>
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	e7dc      	b.n	8003b70 <_malloc_r+0xb0>
 8003bb6:	605b      	str	r3, [r3, #4]
 8003bb8:	deff      	udf	#255	; 0xff
 8003bba:	bf00      	nop
 8003bbc:	20001424 	.word	0x20001424

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f7ff bf0f 	b.w	80039e4 <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	20001420 	.word	0x20001420

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f7ff bf0a 	b.w	80039e6 <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	20001420 	.word	0x20001420

08003bd8 <__ssputs_r>:
 8003bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bdc:	688e      	ldr	r6, [r1, #8]
 8003bde:	461f      	mov	r7, r3
 8003be0:	42be      	cmp	r6, r7
 8003be2:	680b      	ldr	r3, [r1, #0]
 8003be4:	4682      	mov	sl, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	4690      	mov	r8, r2
 8003bea:	d82c      	bhi.n	8003c46 <__ssputs_r+0x6e>
 8003bec:	898a      	ldrh	r2, [r1, #12]
 8003bee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bf2:	d026      	beq.n	8003c42 <__ssputs_r+0x6a>
 8003bf4:	6965      	ldr	r5, [r4, #20]
 8003bf6:	6909      	ldr	r1, [r1, #16]
 8003bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bfc:	eba3 0901 	sub.w	r9, r3, r1
 8003c00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c04:	1c7b      	adds	r3, r7, #1
 8003c06:	444b      	add	r3, r9
 8003c08:	106d      	asrs	r5, r5, #1
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	bf38      	it	cc
 8003c0e:	461d      	movcc	r5, r3
 8003c10:	0553      	lsls	r3, r2, #21
 8003c12:	d527      	bpl.n	8003c64 <__ssputs_r+0x8c>
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7ff ff53 	bl	8003ac0 <_malloc_r>
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	b360      	cbz	r0, 8003c78 <__ssputs_r+0xa0>
 8003c1e:	6921      	ldr	r1, [r4, #16]
 8003c20:	464a      	mov	r2, r9
 8003c22:	f000 faeb 	bl	80041fc <memcpy>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	6126      	str	r6, [r4, #16]
 8003c34:	6165      	str	r5, [r4, #20]
 8003c36:	444e      	add	r6, r9
 8003c38:	eba5 0509 	sub.w	r5, r5, r9
 8003c3c:	6026      	str	r6, [r4, #0]
 8003c3e:	60a5      	str	r5, [r4, #8]
 8003c40:	463e      	mov	r6, r7
 8003c42:	42be      	cmp	r6, r7
 8003c44:	d900      	bls.n	8003c48 <__ssputs_r+0x70>
 8003c46:	463e      	mov	r6, r7
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	4632      	mov	r2, r6
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	f000 faab 	bl	80041a8 <memmove>
 8003c52:	68a3      	ldr	r3, [r4, #8]
 8003c54:	1b9b      	subs	r3, r3, r6
 8003c56:	60a3      	str	r3, [r4, #8]
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	4433      	add	r3, r6
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c64:	462a      	mov	r2, r5
 8003c66:	f000 fad7 	bl	8004218 <_realloc_r>
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d1e0      	bne.n	8003c32 <__ssputs_r+0x5a>
 8003c70:	6921      	ldr	r1, [r4, #16]
 8003c72:	4650      	mov	r0, sl
 8003c74:	f7ff feb8 	bl	80039e8 <_free_r>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	f8ca 3000 	str.w	r3, [sl]
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	e7e9      	b.n	8003c60 <__ssputs_r+0x88>

08003c8c <_svfiprintf_r>:
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	4698      	mov	r8, r3
 8003c92:	898b      	ldrh	r3, [r1, #12]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	b09d      	sub	sp, #116	; 0x74
 8003c98:	4607      	mov	r7, r0
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	d50e      	bpl.n	8003cbe <_svfiprintf_r+0x32>
 8003ca0:	690b      	ldr	r3, [r1, #16]
 8003ca2:	b963      	cbnz	r3, 8003cbe <_svfiprintf_r+0x32>
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	f7ff ff0b 	bl	8003ac0 <_malloc_r>
 8003caa:	6028      	str	r0, [r5, #0]
 8003cac:	6128      	str	r0, [r5, #16]
 8003cae:	b920      	cbnz	r0, 8003cba <_svfiprintf_r+0x2e>
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	e0d0      	b.n	8003e5c <_svfiprintf_r+0x1d0>
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	616b      	str	r3, [r5, #20]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ccc:	2330      	movs	r3, #48	; 0x30
 8003cce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e74 <_svfiprintf_r+0x1e8>
 8003cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cd6:	f04f 0901 	mov.w	r9, #1
 8003cda:	4623      	mov	r3, r4
 8003cdc:	469a      	mov	sl, r3
 8003cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce2:	b10a      	cbz	r2, 8003ce8 <_svfiprintf_r+0x5c>
 8003ce4:	2a25      	cmp	r2, #37	; 0x25
 8003ce6:	d1f9      	bne.n	8003cdc <_svfiprintf_r+0x50>
 8003ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cec:	d00b      	beq.n	8003d06 <_svfiprintf_r+0x7a>
 8003cee:	465b      	mov	r3, fp
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f7ff ff6f 	bl	8003bd8 <__ssputs_r>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f000 80a9 	beq.w	8003e52 <_svfiprintf_r+0x1c6>
 8003d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d02:	445a      	add	r2, fp
 8003d04:	9209      	str	r2, [sp, #36]	; 0x24
 8003d06:	f89a 3000 	ldrb.w	r3, [sl]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80a1 	beq.w	8003e52 <_svfiprintf_r+0x1c6>
 8003d10:	2300      	movs	r3, #0
 8003d12:	f04f 32ff 	mov.w	r2, #4294967295
 8003d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d1a:	f10a 0a01 	add.w	sl, sl, #1
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	9307      	str	r3, [sp, #28]
 8003d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d26:	931a      	str	r3, [sp, #104]	; 0x68
 8003d28:	4654      	mov	r4, sl
 8003d2a:	2205      	movs	r2, #5
 8003d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d30:	4850      	ldr	r0, [pc, #320]	; (8003e74 <_svfiprintf_r+0x1e8>)
 8003d32:	f7fc fa55 	bl	80001e0 <memchr>
 8003d36:	9a04      	ldr	r2, [sp, #16]
 8003d38:	b9d8      	cbnz	r0, 8003d72 <_svfiprintf_r+0xe6>
 8003d3a:	06d0      	lsls	r0, r2, #27
 8003d3c:	bf44      	itt	mi
 8003d3e:	2320      	movmi	r3, #32
 8003d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d44:	0711      	lsls	r1, r2, #28
 8003d46:	bf44      	itt	mi
 8003d48:	232b      	movmi	r3, #43	; 0x2b
 8003d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d52:	2b2a      	cmp	r3, #42	; 0x2a
 8003d54:	d015      	beq.n	8003d82 <_svfiprintf_r+0xf6>
 8003d56:	9a07      	ldr	r2, [sp, #28]
 8003d58:	4654      	mov	r4, sl
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f04f 0c0a 	mov.w	ip, #10
 8003d60:	4621      	mov	r1, r4
 8003d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d66:	3b30      	subs	r3, #48	; 0x30
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d94d      	bls.n	8003e08 <_svfiprintf_r+0x17c>
 8003d6c:	b1b0      	cbz	r0, 8003d9c <_svfiprintf_r+0x110>
 8003d6e:	9207      	str	r2, [sp, #28]
 8003d70:	e014      	b.n	8003d9c <_svfiprintf_r+0x110>
 8003d72:	eba0 0308 	sub.w	r3, r0, r8
 8003d76:	fa09 f303 	lsl.w	r3, r9, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	46a2      	mov	sl, r4
 8003d80:	e7d2      	b.n	8003d28 <_svfiprintf_r+0x9c>
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	1d19      	adds	r1, r3, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	9103      	str	r1, [sp, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfbb      	ittet	lt
 8003d8e:	425b      	neglt	r3, r3
 8003d90:	f042 0202 	orrlt.w	r2, r2, #2
 8003d94:	9307      	strge	r3, [sp, #28]
 8003d96:	9307      	strlt	r3, [sp, #28]
 8003d98:	bfb8      	it	lt
 8003d9a:	9204      	strlt	r2, [sp, #16]
 8003d9c:	7823      	ldrb	r3, [r4, #0]
 8003d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003da0:	d10c      	bne.n	8003dbc <_svfiprintf_r+0x130>
 8003da2:	7863      	ldrb	r3, [r4, #1]
 8003da4:	2b2a      	cmp	r3, #42	; 0x2a
 8003da6:	d134      	bne.n	8003e12 <_svfiprintf_r+0x186>
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	1d1a      	adds	r2, r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	9203      	str	r2, [sp, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bfb8      	it	lt
 8003db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003db8:	3402      	adds	r4, #2
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e84 <_svfiprintf_r+0x1f8>
 8003dc0:	7821      	ldrb	r1, [r4, #0]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	4650      	mov	r0, sl
 8003dc6:	f7fc fa0b 	bl	80001e0 <memchr>
 8003dca:	b138      	cbz	r0, 8003ddc <_svfiprintf_r+0x150>
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	eba0 000a 	sub.w	r0, r0, sl
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	4082      	lsls	r2, r0
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	3401      	adds	r4, #1
 8003dda:	9304      	str	r3, [sp, #16]
 8003ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de0:	4825      	ldr	r0, [pc, #148]	; (8003e78 <_svfiprintf_r+0x1ec>)
 8003de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003de6:	2206      	movs	r2, #6
 8003de8:	f7fc f9fa 	bl	80001e0 <memchr>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d038      	beq.n	8003e62 <_svfiprintf_r+0x1d6>
 8003df0:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <_svfiprintf_r+0x1f0>)
 8003df2:	bb1b      	cbnz	r3, 8003e3c <_svfiprintf_r+0x1b0>
 8003df4:	9b03      	ldr	r3, [sp, #12]
 8003df6:	3307      	adds	r3, #7
 8003df8:	f023 0307 	bic.w	r3, r3, #7
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	9303      	str	r3, [sp, #12]
 8003e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e02:	4433      	add	r3, r6
 8003e04:	9309      	str	r3, [sp, #36]	; 0x24
 8003e06:	e768      	b.n	8003cda <_svfiprintf_r+0x4e>
 8003e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e7a6      	b.n	8003d60 <_svfiprintf_r+0xd4>
 8003e12:	2300      	movs	r3, #0
 8003e14:	3401      	adds	r4, #1
 8003e16:	9305      	str	r3, [sp, #20]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f04f 0c0a 	mov.w	ip, #10
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e24:	3a30      	subs	r2, #48	; 0x30
 8003e26:	2a09      	cmp	r2, #9
 8003e28:	d903      	bls.n	8003e32 <_svfiprintf_r+0x1a6>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0c6      	beq.n	8003dbc <_svfiprintf_r+0x130>
 8003e2e:	9105      	str	r1, [sp, #20]
 8003e30:	e7c4      	b.n	8003dbc <_svfiprintf_r+0x130>
 8003e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e36:	4604      	mov	r4, r0
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e7f0      	b.n	8003e1e <_svfiprintf_r+0x192>
 8003e3c:	ab03      	add	r3, sp, #12
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	462a      	mov	r2, r5
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <_svfiprintf_r+0x1f4>)
 8003e44:	a904      	add	r1, sp, #16
 8003e46:	4638      	mov	r0, r7
 8003e48:	f3af 8000 	nop.w
 8003e4c:	1c42      	adds	r2, r0, #1
 8003e4e:	4606      	mov	r6, r0
 8003e50:	d1d6      	bne.n	8003e00 <_svfiprintf_r+0x174>
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	065b      	lsls	r3, r3, #25
 8003e56:	f53f af2d 	bmi.w	8003cb4 <_svfiprintf_r+0x28>
 8003e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e5c:	b01d      	add	sp, #116	; 0x74
 8003e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e62:	ab03      	add	r3, sp, #12
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	462a      	mov	r2, r5
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <_svfiprintf_r+0x1f4>)
 8003e6a:	a904      	add	r1, sp, #16
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f000 f879 	bl	8003f64 <_printf_i>
 8003e72:	e7eb      	b.n	8003e4c <_svfiprintf_r+0x1c0>
 8003e74:	08004b40 	.word	0x08004b40
 8003e78:	08004b4a 	.word	0x08004b4a
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	08003bd9 	.word	0x08003bd9
 8003e84:	08004b46 	.word	0x08004b46

08003e88 <_printf_common>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	4699      	mov	r9, r3
 8003e90:	688a      	ldr	r2, [r1, #8]
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfb8      	it	lt
 8003e9c:	4613      	movlt	r3, r2
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	b10a      	cbz	r2, 8003eae <_printf_common+0x26>
 8003eaa:	3301      	adds	r3, #1
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0699      	lsls	r1, r3, #26
 8003eb2:	bf42      	ittt	mi
 8003eb4:	6833      	ldrmi	r3, [r6, #0]
 8003eb6:	3302      	addmi	r3, #2
 8003eb8:	6033      	strmi	r3, [r6, #0]
 8003eba:	6825      	ldr	r5, [r4, #0]
 8003ebc:	f015 0506 	ands.w	r5, r5, #6
 8003ec0:	d106      	bne.n	8003ed0 <_printf_common+0x48>
 8003ec2:	f104 0a19 	add.w	sl, r4, #25
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	6832      	ldr	r2, [r6, #0]
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dc26      	bgt.n	8003f1e <_printf_common+0x96>
 8003ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed4:	1e13      	subs	r3, r2, #0
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	bf18      	it	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	0692      	lsls	r2, r2, #26
 8003ede:	d42b      	bmi.n	8003f38 <_printf_common+0xb0>
 8003ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c0      	blx	r8
 8003eea:	3001      	adds	r0, #1
 8003eec:	d01e      	beq.n	8003f2c <_printf_common+0xa4>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	6922      	ldr	r2, [r4, #16]
 8003ef2:	f003 0306 	and.w	r3, r3, #6
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf02      	ittt	eq
 8003efa:	68e5      	ldreq	r5, [r4, #12]
 8003efc:	6833      	ldreq	r3, [r6, #0]
 8003efe:	1aed      	subeq	r5, r5, r3
 8003f00:	68a3      	ldr	r3, [r4, #8]
 8003f02:	bf0c      	ite	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	2500      	movne	r5, #0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfc4      	itt	gt
 8003f0e:	1a9b      	subgt	r3, r3, r2
 8003f10:	18ed      	addgt	r5, r5, r3
 8003f12:	2600      	movs	r6, #0
 8003f14:	341a      	adds	r4, #26
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	d11a      	bne.n	8003f50 <_printf_common+0xc8>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e008      	b.n	8003f30 <_printf_common+0xa8>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4649      	mov	r1, r9
 8003f24:	4638      	mov	r0, r7
 8003f26:	47c0      	blx	r8
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_printf_common+0xac>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7c6      	b.n	8003ec6 <_printf_common+0x3e>
 8003f38:	18e1      	adds	r1, r4, r3
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	2030      	movs	r0, #48	; 0x30
 8003f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f42:	4422      	add	r2, r4
 8003f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	e7c7      	b.n	8003ee0 <_printf_common+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4622      	mov	r2, r4
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0e6      	beq.n	8003f2c <_printf_common+0xa4>
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7d9      	b.n	8003f16 <_printf_common+0x8e>
	...

08003f64 <_printf_i>:
 8003f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	7e0f      	ldrb	r7, [r1, #24]
 8003f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f6c:	2f78      	cmp	r7, #120	; 0x78
 8003f6e:	4691      	mov	r9, r2
 8003f70:	4680      	mov	r8, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	469a      	mov	sl, r3
 8003f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f7a:	d807      	bhi.n	8003f8c <_printf_i+0x28>
 8003f7c:	2f62      	cmp	r7, #98	; 0x62
 8003f7e:	d80a      	bhi.n	8003f96 <_printf_i+0x32>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	f000 80d4 	beq.w	800412e <_printf_i+0x1ca>
 8003f86:	2f58      	cmp	r7, #88	; 0x58
 8003f88:	f000 80c0 	beq.w	800410c <_printf_i+0x1a8>
 8003f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f94:	e03a      	b.n	800400c <_printf_i+0xa8>
 8003f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f9a:	2b15      	cmp	r3, #21
 8003f9c:	d8f6      	bhi.n	8003f8c <_printf_i+0x28>
 8003f9e:	a101      	add	r1, pc, #4	; (adr r1, 8003fa4 <_printf_i+0x40>)
 8003fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08003f8d 	.word	0x08003f8d
 8003fb0:	08003f8d 	.word	0x08003f8d
 8003fb4:	08003f8d 	.word	0x08003f8d
 8003fb8:	08003f8d 	.word	0x08003f8d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f8d 	.word	0x08003f8d
 8003fc4:	08003f8d 	.word	0x08003f8d
 8003fc8:	08003f8d 	.word	0x08003f8d
 8003fcc:	08003f8d 	.word	0x08003f8d
 8003fd0:	08004115 	.word	0x08004115
 8003fd4:	0800403d 	.word	0x0800403d
 8003fd8:	080040cf 	.word	0x080040cf
 8003fdc:	08003f8d 	.word	0x08003f8d
 8003fe0:	08003f8d 	.word	0x08003f8d
 8003fe4:	08004137 	.word	0x08004137
 8003fe8:	08003f8d 	.word	0x08003f8d
 8003fec:	0800403d 	.word	0x0800403d
 8003ff0:	08003f8d 	.word	0x08003f8d
 8003ff4:	08003f8d 	.word	0x08003f8d
 8003ff8:	080040d7 	.word	0x080040d7
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800400c:	2301      	movs	r3, #1
 800400e:	e09f      	b.n	8004150 <_printf_i+0x1ec>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	0607      	lsls	r7, r0, #24
 8004016:	f103 0104 	add.w	r1, r3, #4
 800401a:	6029      	str	r1, [r5, #0]
 800401c:	d501      	bpl.n	8004022 <_printf_i+0xbe>
 800401e:	681e      	ldr	r6, [r3, #0]
 8004020:	e003      	b.n	800402a <_printf_i+0xc6>
 8004022:	0646      	lsls	r6, r0, #25
 8004024:	d5fb      	bpl.n	800401e <_printf_i+0xba>
 8004026:	f9b3 6000 	ldrsh.w	r6, [r3]
 800402a:	2e00      	cmp	r6, #0
 800402c:	da03      	bge.n	8004036 <_printf_i+0xd2>
 800402e:	232d      	movs	r3, #45	; 0x2d
 8004030:	4276      	negs	r6, r6
 8004032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004036:	485a      	ldr	r0, [pc, #360]	; (80041a0 <_printf_i+0x23c>)
 8004038:	230a      	movs	r3, #10
 800403a:	e012      	b.n	8004062 <_printf_i+0xfe>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	1d19      	adds	r1, r3, #4
 8004042:	6029      	str	r1, [r5, #0]
 8004044:	0605      	lsls	r5, r0, #24
 8004046:	d501      	bpl.n	800404c <_printf_i+0xe8>
 8004048:	681e      	ldr	r6, [r3, #0]
 800404a:	e002      	b.n	8004052 <_printf_i+0xee>
 800404c:	0641      	lsls	r1, r0, #25
 800404e:	d5fb      	bpl.n	8004048 <_printf_i+0xe4>
 8004050:	881e      	ldrh	r6, [r3, #0]
 8004052:	4853      	ldr	r0, [pc, #332]	; (80041a0 <_printf_i+0x23c>)
 8004054:	2f6f      	cmp	r7, #111	; 0x6f
 8004056:	bf0c      	ite	eq
 8004058:	2308      	moveq	r3, #8
 800405a:	230a      	movne	r3, #10
 800405c:	2100      	movs	r1, #0
 800405e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004062:	6865      	ldr	r5, [r4, #4]
 8004064:	60a5      	str	r5, [r4, #8]
 8004066:	2d00      	cmp	r5, #0
 8004068:	bfa2      	ittt	ge
 800406a:	6821      	ldrge	r1, [r4, #0]
 800406c:	f021 0104 	bicge.w	r1, r1, #4
 8004070:	6021      	strge	r1, [r4, #0]
 8004072:	b90e      	cbnz	r6, 8004078 <_printf_i+0x114>
 8004074:	2d00      	cmp	r5, #0
 8004076:	d04b      	beq.n	8004110 <_printf_i+0x1ac>
 8004078:	4615      	mov	r5, r2
 800407a:	fbb6 f1f3 	udiv	r1, r6, r3
 800407e:	fb03 6711 	mls	r7, r3, r1, r6
 8004082:	5dc7      	ldrb	r7, [r0, r7]
 8004084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004088:	4637      	mov	r7, r6
 800408a:	42bb      	cmp	r3, r7
 800408c:	460e      	mov	r6, r1
 800408e:	d9f4      	bls.n	800407a <_printf_i+0x116>
 8004090:	2b08      	cmp	r3, #8
 8004092:	d10b      	bne.n	80040ac <_printf_i+0x148>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	07de      	lsls	r6, r3, #31
 8004098:	d508      	bpl.n	80040ac <_printf_i+0x148>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	6861      	ldr	r1, [r4, #4]
 800409e:	4299      	cmp	r1, r3
 80040a0:	bfde      	ittt	le
 80040a2:	2330      	movle	r3, #48	; 0x30
 80040a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ac:	1b52      	subs	r2, r2, r5
 80040ae:	6122      	str	r2, [r4, #16]
 80040b0:	f8cd a000 	str.w	sl, [sp]
 80040b4:	464b      	mov	r3, r9
 80040b6:	aa03      	add	r2, sp, #12
 80040b8:	4621      	mov	r1, r4
 80040ba:	4640      	mov	r0, r8
 80040bc:	f7ff fee4 	bl	8003e88 <_printf_common>
 80040c0:	3001      	adds	r0, #1
 80040c2:	d14a      	bne.n	800415a <_printf_i+0x1f6>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b004      	add	sp, #16
 80040ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	f043 0320 	orr.w	r3, r3, #32
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	4833      	ldr	r0, [pc, #204]	; (80041a4 <_printf_i+0x240>)
 80040d8:	2778      	movs	r7, #120	; 0x78
 80040da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	6829      	ldr	r1, [r5, #0]
 80040e2:	061f      	lsls	r7, r3, #24
 80040e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80040e8:	d402      	bmi.n	80040f0 <_printf_i+0x18c>
 80040ea:	065f      	lsls	r7, r3, #25
 80040ec:	bf48      	it	mi
 80040ee:	b2b6      	uxthmi	r6, r6
 80040f0:	07df      	lsls	r7, r3, #31
 80040f2:	bf48      	it	mi
 80040f4:	f043 0320 	orrmi.w	r3, r3, #32
 80040f8:	6029      	str	r1, [r5, #0]
 80040fa:	bf48      	it	mi
 80040fc:	6023      	strmi	r3, [r4, #0]
 80040fe:	b91e      	cbnz	r6, 8004108 <_printf_i+0x1a4>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	f023 0320 	bic.w	r3, r3, #32
 8004106:	6023      	str	r3, [r4, #0]
 8004108:	2310      	movs	r3, #16
 800410a:	e7a7      	b.n	800405c <_printf_i+0xf8>
 800410c:	4824      	ldr	r0, [pc, #144]	; (80041a0 <_printf_i+0x23c>)
 800410e:	e7e4      	b.n	80040da <_printf_i+0x176>
 8004110:	4615      	mov	r5, r2
 8004112:	e7bd      	b.n	8004090 <_printf_i+0x12c>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	6826      	ldr	r6, [r4, #0]
 8004118:	6961      	ldr	r1, [r4, #20]
 800411a:	1d18      	adds	r0, r3, #4
 800411c:	6028      	str	r0, [r5, #0]
 800411e:	0635      	lsls	r5, r6, #24
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	d501      	bpl.n	8004128 <_printf_i+0x1c4>
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	e002      	b.n	800412e <_printf_i+0x1ca>
 8004128:	0670      	lsls	r0, r6, #25
 800412a:	d5fb      	bpl.n	8004124 <_printf_i+0x1c0>
 800412c:	8019      	strh	r1, [r3, #0]
 800412e:	2300      	movs	r3, #0
 8004130:	6123      	str	r3, [r4, #16]
 8004132:	4615      	mov	r5, r2
 8004134:	e7bc      	b.n	80040b0 <_printf_i+0x14c>
 8004136:	682b      	ldr	r3, [r5, #0]
 8004138:	1d1a      	adds	r2, r3, #4
 800413a:	602a      	str	r2, [r5, #0]
 800413c:	681d      	ldr	r5, [r3, #0]
 800413e:	6862      	ldr	r2, [r4, #4]
 8004140:	2100      	movs	r1, #0
 8004142:	4628      	mov	r0, r5
 8004144:	f7fc f84c 	bl	80001e0 <memchr>
 8004148:	b108      	cbz	r0, 800414e <_printf_i+0x1ea>
 800414a:	1b40      	subs	r0, r0, r5
 800414c:	6060      	str	r0, [r4, #4]
 800414e:	6863      	ldr	r3, [r4, #4]
 8004150:	6123      	str	r3, [r4, #16]
 8004152:	2300      	movs	r3, #0
 8004154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004158:	e7aa      	b.n	80040b0 <_printf_i+0x14c>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	462a      	mov	r2, r5
 800415e:	4649      	mov	r1, r9
 8004160:	4640      	mov	r0, r8
 8004162:	47d0      	blx	sl
 8004164:	3001      	adds	r0, #1
 8004166:	d0ad      	beq.n	80040c4 <_printf_i+0x160>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	079b      	lsls	r3, r3, #30
 800416c:	d413      	bmi.n	8004196 <_printf_i+0x232>
 800416e:	68e0      	ldr	r0, [r4, #12]
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	4298      	cmp	r0, r3
 8004174:	bfb8      	it	lt
 8004176:	4618      	movlt	r0, r3
 8004178:	e7a6      	b.n	80040c8 <_printf_i+0x164>
 800417a:	2301      	movs	r3, #1
 800417c:	4632      	mov	r2, r6
 800417e:	4649      	mov	r1, r9
 8004180:	4640      	mov	r0, r8
 8004182:	47d0      	blx	sl
 8004184:	3001      	adds	r0, #1
 8004186:	d09d      	beq.n	80040c4 <_printf_i+0x160>
 8004188:	3501      	adds	r5, #1
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	9903      	ldr	r1, [sp, #12]
 800418e:	1a5b      	subs	r3, r3, r1
 8004190:	42ab      	cmp	r3, r5
 8004192:	dcf2      	bgt.n	800417a <_printf_i+0x216>
 8004194:	e7eb      	b.n	800416e <_printf_i+0x20a>
 8004196:	2500      	movs	r5, #0
 8004198:	f104 0619 	add.w	r6, r4, #25
 800419c:	e7f5      	b.n	800418a <_printf_i+0x226>
 800419e:	bf00      	nop
 80041a0:	08004b51 	.word	0x08004b51
 80041a4:	08004b62 	.word	0x08004b62

080041a8 <memmove>:
 80041a8:	4288      	cmp	r0, r1
 80041aa:	b510      	push	{r4, lr}
 80041ac:	eb01 0402 	add.w	r4, r1, r2
 80041b0:	d902      	bls.n	80041b8 <memmove+0x10>
 80041b2:	4284      	cmp	r4, r0
 80041b4:	4623      	mov	r3, r4
 80041b6:	d807      	bhi.n	80041c8 <memmove+0x20>
 80041b8:	1e43      	subs	r3, r0, #1
 80041ba:	42a1      	cmp	r1, r4
 80041bc:	d008      	beq.n	80041d0 <memmove+0x28>
 80041be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041c6:	e7f8      	b.n	80041ba <memmove+0x12>
 80041c8:	4402      	add	r2, r0
 80041ca:	4601      	mov	r1, r0
 80041cc:	428a      	cmp	r2, r1
 80041ce:	d100      	bne.n	80041d2 <memmove+0x2a>
 80041d0:	bd10      	pop	{r4, pc}
 80041d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041da:	e7f7      	b.n	80041cc <memmove+0x24>

080041dc <_sbrk_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4d06      	ldr	r5, [pc, #24]	; (80041f8 <_sbrk_r+0x1c>)
 80041e0:	2300      	movs	r3, #0
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7ff fb4a 	bl	8003880 <_sbrk>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_sbrk_r+0x1a>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_sbrk_r+0x1a>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	2000141c 	.word	0x2000141c

080041fc <memcpy>:
 80041fc:	440a      	add	r2, r1
 80041fe:	4291      	cmp	r1, r2
 8004200:	f100 33ff 	add.w	r3, r0, #4294967295
 8004204:	d100      	bne.n	8004208 <memcpy+0xc>
 8004206:	4770      	bx	lr
 8004208:	b510      	push	{r4, lr}
 800420a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800420e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004212:	4291      	cmp	r1, r2
 8004214:	d1f9      	bne.n	800420a <memcpy+0xe>
 8004216:	bd10      	pop	{r4, pc}

08004218 <_realloc_r>:
 8004218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421c:	4680      	mov	r8, r0
 800421e:	4614      	mov	r4, r2
 8004220:	460e      	mov	r6, r1
 8004222:	b921      	cbnz	r1, 800422e <_realloc_r+0x16>
 8004224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	4611      	mov	r1, r2
 800422a:	f7ff bc49 	b.w	8003ac0 <_malloc_r>
 800422e:	b92a      	cbnz	r2, 800423c <_realloc_r+0x24>
 8004230:	f7ff fbda 	bl	80039e8 <_free_r>
 8004234:	4625      	mov	r5, r4
 8004236:	4628      	mov	r0, r5
 8004238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800423c:	f000 f81b 	bl	8004276 <_malloc_usable_size_r>
 8004240:	4284      	cmp	r4, r0
 8004242:	4607      	mov	r7, r0
 8004244:	d802      	bhi.n	800424c <_realloc_r+0x34>
 8004246:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800424a:	d812      	bhi.n	8004272 <_realloc_r+0x5a>
 800424c:	4621      	mov	r1, r4
 800424e:	4640      	mov	r0, r8
 8004250:	f7ff fc36 	bl	8003ac0 <_malloc_r>
 8004254:	4605      	mov	r5, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d0ed      	beq.n	8004236 <_realloc_r+0x1e>
 800425a:	42bc      	cmp	r4, r7
 800425c:	4622      	mov	r2, r4
 800425e:	4631      	mov	r1, r6
 8004260:	bf28      	it	cs
 8004262:	463a      	movcs	r2, r7
 8004264:	f7ff ffca 	bl	80041fc <memcpy>
 8004268:	4631      	mov	r1, r6
 800426a:	4640      	mov	r0, r8
 800426c:	f7ff fbbc 	bl	80039e8 <_free_r>
 8004270:	e7e1      	b.n	8004236 <_realloc_r+0x1e>
 8004272:	4635      	mov	r5, r6
 8004274:	e7df      	b.n	8004236 <_realloc_r+0x1e>

08004276 <_malloc_usable_size_r>:
 8004276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800427a:	1f18      	subs	r0, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	bfbc      	itt	lt
 8004280:	580b      	ldrlt	r3, [r1, r0]
 8004282:	18c0      	addlt	r0, r0, r3
 8004284:	4770      	bx	lr
	...

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
