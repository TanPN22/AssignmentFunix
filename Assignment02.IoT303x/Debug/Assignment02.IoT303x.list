
Assignment02.IoT303x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800555c  0800555c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800555c  0800555c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800555c  0800555c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013dc  20000064  080055c8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  080055c8  00021440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138ea  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e87  00000000  00000000  000339c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00036848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a2  00000000  00000000  00037440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000d678  00000000  00000000  00037ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce70  00000000  00000000  0004535a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000499a4  00000000  00000000  000521ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003530  00000000  00000000  0009bb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0009f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c4c 	.word	0x08004c4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004c4c 	.word	0x08004c4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <SystemInit+0x60>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <SystemInit+0x60>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <SystemInit+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <SystemInit+0x64>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <SystemInit+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <SystemInit+0x64>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <SystemInit+0x64>)
 8000a88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <SystemInit+0x64>)
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <SystemInit+0x68>)
 8000a96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <SystemInit+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <SystemInit+0x64>)
 8000a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <SystemInit+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000aaa:	f000 f80d 	bl	8000ac8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aae:	4b03      	ldr	r3, [pc, #12]	; (8000abc <SystemInit+0x60>)
 8000ab0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab4:	609a      	str	r2, [r3, #8]
#endif
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	24003010 	.word	0x24003010

08000ac8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <SetSysClock+0x94>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <SetSysClock+0x94>)
 8000ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <SetSysClock+0x98>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a20      	ldr	r2, [pc, #128]	; (8000b60 <SetSysClock+0x98>)
 8000ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae2:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <SetSysClock+0x94>)
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <SetSysClock+0x94>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <SetSysClock+0x94>)
 8000aee:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <SetSysClock+0x94>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <SetSysClock+0x94>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <SetSysClock+0x94>)
 8000afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000afe:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <SetSysClock+0x94>)
 8000b02:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <SetSysClock+0x9c>)
 8000b04:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <SetSysClock+0x94>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <SetSysClock+0x94>)
 8000b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b12:	bf00      	nop
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <SetSysClock+0x94>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f9      	beq.n	8000b14 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <SetSysClock+0xa0>)
 8000b22:	f240 6202 	movw	r2, #1538	; 0x602
 8000b26:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SetSysClock+0x94>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <SetSysClock+0x94>)
 8000b2e:	f023 0303 	bic.w	r3, r3, #3
 8000b32:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <SetSysClock+0x94>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <SetSysClock+0x94>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b40:	bf00      	nop
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SetSysClock+0x94>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d1f9      	bne.n	8000b42 <SetSysClock+0x7a>
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000
 8000b64:	08015410 	.word	0x08015410
 8000b68:	40023c00 	.word	0x40023c00

08000b6c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e076      	b.n	8000c76 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d165      	bne.n	8000c70 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2103      	movs	r1, #3
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d003      	beq.n	8000be2 <GPIO_Init+0x76>
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d12e      	bne.n	8000c40 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2103      	movs	r1, #3
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	4619      	mov	r1, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	401a      	ands	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	7992      	ldrb	r2, [r2, #6]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	b292      	uxth	r2, r2
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	b292      	uxth	r2, r2
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	79db      	ldrb	r3, [r3, #7]
 8000c60:	4619      	mov	r1, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d985      	bls.n	8000b88 <GPIO_Init+0x1c>
    }
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	460b      	mov	r3, r1
 8000c94:	807b      	strh	r3, [r7, #2]
 8000c96:	4613      	mov	r3, r2
 8000c98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000c9a:	787b      	ldrb	r3, [r7, #1]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000ca6:	e002      	b.n	8000cae <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	835a      	strh	r2, [r3, #26]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	807b      	strh	r3, [r7, #2]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cd2:	787a      	ldrb	r2, [r7, #1]
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	8879      	ldrh	r1, [r7, #2]
 8000d04:	08c9      	lsrs	r1, r1, #3
 8000d06:	b289      	uxth	r1, r1
 8000d08:	4608      	mov	r0, r1
 8000d0a:	ea02 0103 	and.w	r1, r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f100 0208 	add.w	r2, r0, #8
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000d62:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <I2C_Init+0x174>)
 8000d64:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	889b      	ldrh	r3, [r3, #4]
 8000d6a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000d6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d72:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f9c9 	bl	8001110 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <I2C_Init+0x178>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9b      	lsrs	r3, r3, #18
 8000d8c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000d8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d92:	4313      	orrs	r3, r2
 8000d94:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d9a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a44      	ldr	r2, [pc, #272]	; (8000ec8 <I2C_Init+0x17c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d815      	bhi.n	8000de6 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d801      	bhi.n	8000dd2 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000dce:	2304      	movs	r3, #4
 8000dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000dd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000dda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	841a      	strh	r2, [r3, #32]
 8000de4:	e040      	b.n	8000e68 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	88db      	ldrh	r3, [r3, #6]
 8000dea:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d109      	bne.n	8000e06 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e04:	e00e      	b.n	8000e24 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	009a      	lsls	r2, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e22:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e46:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000e48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e4e:	fb02 f303 	mul.w	r3, r2, r3
 8000e52:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <I2C_Init+0x180>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1192      	asrs	r2, r2, #6
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	3301      	adds	r3, #1
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e6c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e86:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000e8a:	f023 0302 	bic.w	r3, r3, #2
 8000e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	889a      	ldrh	r2, [r3, #4]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	895b      	ldrh	r3, [r3, #10]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ea6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	899a      	ldrh	r2, [r3, #12]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	891b      	ldrh	r3, [r3, #8]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	811a      	strh	r2, [r3, #8]
}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	007a1200 	.word	0x007a1200
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	000186a0 	.word	0x000186a0
 8000ecc:	10624dd3 	.word	0x10624dd3

08000ed0 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000ef2:	e007      	b.n	8000f04 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	f023 0301 	bic.w	r3, r3, #1
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	801a      	strh	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d008      	beq.n	8000f34 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000f32:	e007      	b.n	8000f44 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	801a      	strh	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d008      	beq.n	8000f74 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000f72:	e007      	b.n	8000f84 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	801a      	strh	r2, [r3, #0]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000fa0:	78bb      	ldrb	r3, [r7, #2]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d004      	beq.n	8000fb0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	70fb      	strb	r3, [r7, #3]
 8000fae:	e003      	b.n	8000fb8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	f023 0301 	bic.w	r3, r3, #1
 8000fb6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	821a      	strh	r2, [r3, #16]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8000fee:	e007      	b.n	8001000 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	801a      	strh	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	821a      	strh	r2, [r3, #16]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8a1b      	ldrh	r3, [r3, #16]
 8001038:	b29b      	uxth	r3, r3
 800103a:	b2db      	uxtb	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800105e:	2300      	movs	r3, #0
 8001060:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	8a9b      	ldrh	r3, [r3, #20]
 8001066:	b29b      	uxth	r3, r3
 8001068:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	8b1b      	ldrh	r3, [r3, #24]
 800106e:	b29b      	uxth	r3, r3
 8001070:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4313      	orrs	r3, r2
 800107e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001082:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	4013      	ands	r3, r2
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d102      	bne.n	8001096 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001090:	2301      	movs	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
 8001094:	e001      	b.n	800109a <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001096:	2300      	movs	r3, #0
 8001098:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800109a:	7dfb      	ldrb	r3, [r7, #23]
}
 800109c:	4618      	mov	r0, r3
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	0f1b      	lsrs	r3, r3, #28
 80010c6:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80010ce:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3314      	adds	r3, #20
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e005      	b.n	80010ea <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	0c1b      	lsrs	r3, r3, #16
 80010e2:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3318      	adds	r3, #24
 80010e8:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80010f6:	2301      	movs	r3, #1
 80010f8:	75fb      	strb	r3, [r7, #23]
 80010fa:	e001      	b.n	8001100 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001100:	7dfb      	ldrb	r3, [r7, #23]
}
 8001102:	4618      	mov	r0, r3
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	2302      	movs	r3, #2
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001130:	4b4a      	ldr	r3, [pc, #296]	; (800125c <RCC_GetClocksFreq+0x14c>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b08      	cmp	r3, #8
 800113e:	d011      	beq.n	8001164 <RCC_GetClocksFreq+0x54>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b08      	cmp	r3, #8
 8001144:	d844      	bhi.n	80011d0 <RCC_GetClocksFreq+0xc0>
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <RCC_GetClocksFreq+0x44>
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d004      	beq.n	800115c <RCC_GetClocksFreq+0x4c>
 8001152:	e03d      	b.n	80011d0 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a42      	ldr	r2, [pc, #264]	; (8001260 <RCC_GetClocksFreq+0x150>)
 8001158:	601a      	str	r2, [r3, #0]
    break;
 800115a:	e03d      	b.n	80011d8 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a41      	ldr	r2, [pc, #260]	; (8001264 <RCC_GetClocksFreq+0x154>)
 8001160:	601a      	str	r2, [r3, #0]
    break;
 8001162:	e039      	b.n	80011d8 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001164:	4b3d      	ldr	r3, [pc, #244]	; (800125c <RCC_GetClocksFreq+0x14c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	0d9b      	lsrs	r3, r3, #22
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001170:	4b3a      	ldr	r3, [pc, #232]	; (800125c <RCC_GetClocksFreq+0x14c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001178:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001180:	4a38      	ldr	r2, [pc, #224]	; (8001264 <RCC_GetClocksFreq+0x154>)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	fbb2 f3f3 	udiv	r3, r2, r3
 8001188:	4a34      	ldr	r2, [pc, #208]	; (800125c <RCC_GetClocksFreq+0x14c>)
 800118a:	6852      	ldr	r2, [r2, #4]
 800118c:	0992      	lsrs	r2, r2, #6
 800118e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	e00b      	b.n	80011b2 <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800119a:	4a31      	ldr	r2, [pc, #196]	; (8001260 <RCC_GetClocksFreq+0x150>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4a2e      	ldr	r2, [pc, #184]	; (800125c <RCC_GetClocksFreq+0x14c>)
 80011a4:	6852      	ldr	r2, [r2, #4]
 80011a6:	0992      	lsrs	r2, r2, #6
 80011a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <RCC_GetClocksFreq+0x14c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	0c1b      	lsrs	r3, r3, #16
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	3301      	adds	r3, #1
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
    break;
 80011ce:	e003      	b.n	80011d8 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a23      	ldr	r2, [pc, #140]	; (8001260 <RCC_GetClocksFreq+0x150>)
 80011d4:	601a      	str	r2, [r3, #0]
    break;
 80011d6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <RCC_GetClocksFreq+0x14c>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011e0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80011e8:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <RCC_GetClocksFreq+0x158>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	40da      	lsrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <RCC_GetClocksFreq+0x14c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001208:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	0a9b      	lsrs	r3, r3, #10
 800120e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001210:	4a15      	ldr	r2, [pc, #84]	; (8001268 <RCC_GetClocksFreq+0x158>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	40da      	lsrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <RCC_GetClocksFreq+0x14c>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001230:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	0b5b      	lsrs	r3, r3, #13
 8001236:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <RCC_GetClocksFreq+0x158>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	40da      	lsrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	60da      	str	r2, [r3, #12]
}
 8001250:	bf00      	nop
 8001252:	3724      	adds	r7, #36	; 0x24
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40023800 	.word	0x40023800
 8001260:	00f42400 	.word	0x00f42400
 8001264:	017d7840 	.word	0x017d7840
 8001268:	20000000 	.word	0x20000000

0800126c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001282:	4909      	ldr	r1, [pc, #36]	; (80012a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800128a:	e006      	b.n	800129a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 800128e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	43db      	mvns	r3, r3
 8001294:	4904      	ldr	r1, [pc, #16]	; (80012a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001296:	4013      	ands	r3, r2
 8001298:	630b      	str	r3, [r1, #48]	; 0x30
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <RCC_APB1PeriphClockCmd+0x3c>)
 80012c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c2:	4909      	ldr	r1, [pc, #36]	; (80012e8 <RCC_APB1PeriphClockCmd+0x3c>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80012ca:	e006      	b.n	80012da <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <RCC_APB1PeriphClockCmd+0x3c>)
 80012ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <RCC_APB1PeriphClockCmd+0x3c>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	889b      	ldrh	r3, [r3, #4]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012fe:	b29b      	uxth	r3, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	b2db      	uxtb	r3, r3
 8001330:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800133a:	2201      	movs	r2, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d107      	bne.n	800135a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	899b      	ldrh	r3, [r3, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	4013      	ands	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e011      	b.n	800137e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d107      	bne.n	8001370 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	8a1b      	ldrh	r3, [r3, #16]
 8001364:	b29b      	uxth	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4013      	ands	r3, r2
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e006      	b.n	800137e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	8a9b      	ldrh	r3, [r3, #20]
 8001374:	b29b      	uxth	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	4013      	ands	r3, r2
 800137c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	b29b      	uxth	r3, r3
 8001384:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001386:	2201      	movs	r2, #1
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4013      	ands	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <USART_GetITStatus+0xa4>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	74fb      	strb	r3, [r7, #19]
 80013ae:	e001      	b.n	80013b4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80013b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	81fb      	strh	r3, [r7, #14]
 80013d2:	2300      	movs	r3, #0
 80013d4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	2201      	movs	r2, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80013e6:	89bb      	ldrh	r3, [r7, #12]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	801a      	strh	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da0b      	bge.n	8001428 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <NVIC_SetPriority+0x4c>)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	3b04      	subs	r3, #4
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001426:	e009      	b.n	800143c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <NVIC_SetPriority+0x50>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00
 800144c:	e000e100 	.word	0xe000e100

08001450 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ffc2 	bl	80013fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 800149a:	463b      	mov	r3, r7
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe37 	bl	8001110 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <TimerInit+0x3c>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	099b      	lsrs	r3, r3, #6
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ffcf 	bl	8001450 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 80014b2:	2101      	movs	r1, #1
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ffa0 	bl	80013fc <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 80014bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80014c0:	2100      	movs	r1, #0
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <TimerInit+0x40>)
 80014c4:	f002 fcb3 	bl	8003e2e <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	10624dd3 	.word	0x10624dd3
 80014d4:	20000080 	.word	0x20000080

080014d8 <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	75fb      	strb	r3, [r7, #23]
 80014ec:	e04c      	b.n	8001588 <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 80014ee:	7dfa      	ldrb	r2, [r7, #23]
 80014f0:	4929      	ldr	r1, [pc, #164]	; (8001598 <TimerStart+0xc0>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	3310      	adds	r3, #16
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d13e      	bne.n	8001582 <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8001504:	7dfa      	ldrb	r2, [r7, #23]
 8001506:	4924      	ldr	r1, [pc, #144]	; (8001598 <TimerStart+0xc0>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 8001516:	7dfa      	ldrb	r2, [r7, #23]
 8001518:	491f      	ldr	r1, [pc, #124]	; (8001598 <TimerStart+0xc0>)
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	3310      	adds	r3, #16
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 800152a:	7dfa      	ldrb	r2, [r7, #23]
 800152c:	491a      	ldr	r1, [pc, #104]	; (8001598 <TimerStart+0xc0>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	330c      	adds	r3, #12
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 800153e:	7dfa      	ldrb	r2, [r7, #23]
 8001540:	4915      	ldr	r1, [pc, #84]	; (8001598 <TimerStart+0xc0>)
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	3314      	adds	r3, #20
 800154e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001550:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8001552:	7dfc      	ldrb	r4, [r7, #23]
 8001554:	f000 f872 	bl	800163c <GetMilSecTick>
 8001558:	4602      	mov	r2, r0
 800155a:	490f      	ldr	r1, [pc, #60]	; (8001598 <TimerStart+0xc0>)
 800155c:	4623      	mov	r3, r4
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4423      	add	r3, r4
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	3304      	adds	r3, #4
 8001568:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 800156a:	7dfa      	ldrb	r2, [r7, #23]
 800156c:	490a      	ldr	r1, [pc, #40]	; (8001598 <TimerStart+0xc0>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3308      	adds	r3, #8
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	e006      	b.n	8001590 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	3301      	adds	r3, #1
 8001586:	75fb      	strb	r3, [r7, #23]
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d9af      	bls.n	80014ee <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 800158e:	23ff      	movs	r3, #255	; 0xff
}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	20000080 	.word	0x20000080

0800159c <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <TimerStop+0x26>
 80015ac:	79fa      	ldrb	r2, [r7, #7]
 80015ae:	4922      	ldr	r1, [pc, #136]	; (8001638 <TimerStop+0x9c>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	3310      	adds	r3, #16
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <TimerStop+0x2a>
        return 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e031      	b.n	800162a <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	491b      	ldr	r1, [pc, #108]	; (8001638 <TimerStop+0x9c>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 80015d8:	79fa      	ldrb	r2, [r7, #7]
 80015da:	4917      	ldr	r1, [pc, #92]	; (8001638 <TimerStop+0x9c>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	3310      	adds	r3, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	4912      	ldr	r1, [pc, #72]	; (8001638 <TimerStop+0x9c>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	330c      	adds	r3, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <TimerStop+0x9c>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	3308      	adds	r3, #8
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <TimerStop+0x9c>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3304      	adds	r3, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    
    return 1;
 8001628:	2301      	movs	r3, #1
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000080 	.word	0x20000080

0800163c <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <GetMilSecTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000200 	.word	0x20000200

08001654 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e068      	b.n	8001732 <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	4938      	ldr	r1, [pc, #224]	; (8001744 <processTimerScheduler+0xf0>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3310      	adds	r3, #16
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d05a      	beq.n	800172c <processTimerScheduler+0xd8>
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f865 	bl	8001748 <TimeExpired>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d053      	beq.n	800172c <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	492f      	ldr	r1, [pc, #188]	; (8001744 <processTimerScheduler+0xf0>)
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	3310      	adds	r3, #16
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	492a      	ldr	r1, [pc, #168]	; (8001744 <processTimerScheduler+0xf0>)
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	3314      	adds	r3, #20
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	4925      	ldr	r1, [pc, #148]	; (8001744 <processTimerScheduler+0xf0>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	330c      	adds	r3, #12
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2bff      	cmp	r3, #255	; 0xff
 80016c2:	d020      	beq.n	8001706 <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	491f      	ldr	r1, [pc, #124]	; (8001744 <processTimerScheduler+0xf0>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	330c      	adds	r3, #12
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d014      	beq.n	8001706 <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	4919      	ldr	r1, [pc, #100]	; (8001744 <processTimerScheduler+0xf0>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	330c      	adds	r3, #12
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b2d8      	uxtb	r0, r3
 80016f4:	4913      	ldr	r1, [pc, #76]	; (8001744 <processTimerScheduler+0xf0>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	330c      	adds	r3, #12
 8001702:	4602      	mov	r2, r0
 8001704:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	490e      	ldr	r1, [pc, #56]	; (8001744 <processTimerScheduler+0xf0>)
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	330c      	adds	r3, #12
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff3b 	bl	800159c <TimerStop>
            }
            
            callbackfunc(pPrameter);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	3301      	adds	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d993      	bls.n	8001660 <processTimerScheduler+0xc>
        }
    }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000080 	.word	0x20000080

08001748 <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001756:	b672      	cpsid	i
}
 8001758:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 800175a:	f7ff ff6f 	bl	800163c <GetMilSecTick>
 800175e:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	d80a      	bhi.n	800177c <TimeExpired+0x34>
 8001766:	79fa      	ldrb	r2, [r7, #7]
 8001768:	492b      	ldr	r1, [pc, #172]	; (8001818 <TimeExpired+0xd0>)
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	3310      	adds	r3, #16
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 800177c:	b662      	cpsie	i
}
 800177e:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8001780:	2300      	movs	r3, #0
 8001782:	e044      	b.n	800180e <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	4924      	ldr	r1, [pc, #144]	; (8001818 <TimeExpired+0xd0>)
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3304      	adds	r3, #4
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	d30c      	bcc.n	80017b6 <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	491e      	ldr	r1, [pc, #120]	; (8001818 <TimeExpired+0xd0>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3304      	adds	r3, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e00e      	b.n	80017d4 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	4917      	ldr	r1, [pc, #92]	; (8001818 <TimeExpired+0xd0>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3304      	adds	r3, #4
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	4910      	ldr	r1, [pc, #64]	; (8001818 <TimeExpired+0xd0>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	3308      	adds	r3, #8
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d203      	bcs.n	80017f4 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 80017ec:	b662      	cpsie	i
}
 80017ee:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e00c      	b.n	800180e <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 80017f4:	79fa      	ldrb	r2, [r7, #7]
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <TimeExpired+0xd0>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3304      	adds	r3, #4
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001808:	b662      	cpsie	i
}
 800180a:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000080 	.word	0x20000080

0800181c <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Handler+0x18>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a03      	ldr	r2, [pc, #12]	; (8001834 <SysTick_Handler+0x18>)
 8001828:	6013      	str	r3, [r2, #0]
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	20000200 	.word	0x20000200

08001838 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800183e:	b672      	cpsid	i
}
 8001840:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8001842:	f240 5125 	movw	r1, #1317	; 0x525
 8001846:	480f      	ldr	r0, [pc, #60]	; (8001884 <USART2_IRQHandler+0x4c>)
 8001848:	f7ff fd60 	bl	800130c <USART_GetITStatus>
 800184c:	4603      	mov	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d112      	bne.n	8001878 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <USART2_IRQHandler+0x50>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <USART2_IRQHandler+0x4c>)
 800185a:	f7ff fd47 	bl	80012ec <USART_ReceiveData>
 800185e:	4603      	mov	r3, r0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8001864:	1cfb      	adds	r3, r7, #3
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f002 fa4b 	bl	8003d04 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800186e:	f240 5125 	movw	r1, #1317	; 0x525
 8001872:	4804      	ldr	r0, [pc, #16]	; (8001884 <USART2_IRQHandler+0x4c>)
 8001874:	f7ff fda5 	bl	80013c2 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001878:	b662      	cpsie	i
}
 800187a:	bf00      	nop
    }
    __enable_irq();
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40004400 	.word	0x40004400
 8001888:	20000204 	.word	0x20000204

0800188c <delayMicroseconds>:
//ucg_int_t get_tx(void) { return tx; };
//ucg_int_t get_ty(void) { return ty; };
//ucg_t *get_ucg(void) { return &ucg; };

static void delayMicroseconds(uint32_t microseconds)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
//	}
//	uint32_t i;
//	for( i = 0; i < microseconds; i++ )
//	{
//	}
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <ucg_gpio_init>:

static void ucg_gpio_init(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 80018a6:	2101      	movs	r1, #1
 80018a8:	2007      	movs	r0, #7
 80018aa:	f7ff fcdf 	bl	800126c <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80018ae:	2301      	movs	r3, #1
 80018b0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80018b2:	2303      	movs	r3, #3
 80018b4:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 80018be:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 80018c2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80018c4:	463b      	mov	r3, r7
 80018c6:	4619      	mov	r1, r3
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <ucg_gpio_init+0x54>)
 80018ca:	f7ff f94f 	bl	8000b6c <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 80018ce:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80018d2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4807      	ldr	r0, [pc, #28]	; (80018f8 <ucg_gpio_init+0x58>)
 80018da:	f7ff f947 	bl	8000b6c <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80018e2:	463b      	mov	r3, r7
 80018e4:	4619      	mov	r1, r3
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <ucg_gpio_init+0x5c>)
 80018e8:	f7ff f940 	bl	8000b6c <GPIO_Init>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020800 	.word	0x40020800

08001900 <ucg_com_arduino_send_generic_SW_SPI>:

static void ucg_com_arduino_send_generic_SW_SPI(ucg_t *ucg, uint8_t data)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 800190c:	2308      	movs	r3, #8
 800190e:	73fb      	strb	r3, [r7, #15]

  do
  {
    if ( data & 128 )
 8001910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001914:	2b00      	cmp	r3, #0
 8001916:	da05      	bge.n	8001924 <ucg_com_arduino_send_generic_SW_SPI+0x24>
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 8001918:	2201      	movs	r2, #1
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	4814      	ldr	r0, [pc, #80]	; (8001970 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800191e:	f7ff f9b4 	bl	8000c8a <GPIO_WriteBit>
 8001922:	e004      	b.n	800192e <ucg_com_arduino_send_generic_SW_SPI+0x2e>
    }
    else
    {
      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	4811      	ldr	r0, [pc, #68]	; (8001970 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800192a:	f7ff f9ae 	bl	8000c8a <GPIO_WriteBit>
    }
    // no delay required, also Arduino Due is slow enough
    // delay required for ESP32
    delayMicroseconds(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff ffac 	bl	800188c <delayMicroseconds>
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 1);
 8001934:	2201      	movs	r2, #1
 8001936:	2120      	movs	r1, #32
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800193a:	f7ff f9a6 	bl	8000c8a <GPIO_WriteBit>
    delayMicroseconds(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff ffa4 	bl	800188c <delayMicroseconds>
    i--;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	3b01      	subs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
    GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2120      	movs	r1, #32
 800194e:	4808      	ldr	r0, [pc, #32]	; (8001970 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8001950:	f7ff f99b 	bl	8000c8a <GPIO_WriteBit>
    delayMicroseconds(1);
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff ff99 	bl	800188c <delayMicroseconds>
    data <<= 1;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	70fb      	strb	r3, [r7, #3]
  } while( i > 0 );
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1d4      	bne.n	8001910 <ucg_com_arduino_send_generic_SW_SPI+0x10>
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40020000 	.word	0x40020000

08001974 <ucg_com_arduino_generic_SW_SPI>:

static int16_t ucg_com_arduino_generic_SW_SPI(ucg_t *ucg, int16_t msg, uint16_t arg, uint8_t *data)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	817b      	strh	r3, [r7, #10]
 8001982:	4613      	mov	r3, r2
 8001984:	813b      	strh	r3, [r7, #8]
  switch(msg)
 8001986:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800198a:	3b0a      	subs	r3, #10
 800198c:	2b0b      	cmp	r3, #11
 800198e:	f200 80dc 	bhi.w	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8001992:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <ucg_com_arduino_generic_SW_SPI+0x24>)
 8001994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001998:	080019c9 	.word	0x080019c9
 800199c:	08001b4b 	.word	0x08001b4b
 80019a0:	08001a1b 	.word	0x08001a1b
 80019a4:	08001a25 	.word	0x08001a25
 80019a8:	08001a35 	.word	0x08001a35
 80019ac:	08001a45 	.word	0x08001a45
 80019b0:	08001a57 	.word	0x08001a57
 80019b4:	08001a77 	.word	0x08001a77
 80019b8:	08001a9f 	.word	0x08001a9f
 80019bc:	08001ad5 	.word	0x08001ad5
 80019c0:	08001af3 	.word	0x08001af3
 80019c4:	08001b43 	.word	0x08001b43
      /* "data" is a pointer to ucg_com_info_t structure with the following information: */
      /*	((ucg_com_info_t *)data)->serial_clk_speed value in nanoseconds */
      /*	((ucg_com_info_t *)data)->parallel_clk_speed value in nanoseconds */
    
      /* setup pins */
      ucg_gpio_init();
 80019c8:	f7ff ff6a 	bl	80018a0 <ucg_gpio_init>

      GPIO_WriteBit(SPI1_MOSI_PORT, SPI1_MOSI_PIN, 1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	4860      	ldr	r0, [pc, #384]	; (8001b54 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80019d2:	f7ff f95a 	bl	8000c8a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, 1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	2140      	movs	r1, #64	; 0x40
 80019da:	485f      	ldr	r0, [pc, #380]	; (8001b58 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80019dc:	f7ff f955 	bl	8000c8a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	485d      	ldr	r0, [pc, #372]	; (8001b5c <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80019e6:	f7ff f950 	bl	8000c8a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 80019ea:	2201      	movs	r2, #1
 80019ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f0:	4858      	ldr	r0, [pc, #352]	; (8001b54 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80019f2:	f7ff f94a 	bl	8000c8a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_SCK_PORT, SPI1_SCK_PIN, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2120      	movs	r1, #32
 80019fa:	4856      	ldr	r0, [pc, #344]	; (8001b54 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80019fc:	f7ff f945 	bl	8000c8a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_ENABLE_PORT, SPI1_ENABLE_PIN, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a06:	4854      	ldr	r0, [pc, #336]	; (8001b58 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8001a08:	f7ff f93f 	bl	8000c8a <GPIO_WriteBit>
      GPIO_WriteBit(SPI1_MODE_PORT, SPI1_MODE_PIN, 1);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a12:	4850      	ldr	r0, [pc, #320]	; (8001b54 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001a14:	f7ff f939 	bl	8000c8a <GPIO_WriteBit>
      break;
 8001a18:	e097      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_POWER_DOWN:
      break;

    case UCG_COM_MSG_DELAY:
      delayMicroseconds(arg);
 8001a1a:	893b      	ldrh	r3, [r7, #8]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <delayMicroseconds>
      break;
 8001a22:	e092      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_RESET_LINE:
      GPIO_WriteBit(SPI1_RST_PORT, SPI1_RST_PIN, arg);
 8001a24:	893b      	ldrh	r3, [r7, #8]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	484b      	ldr	r0, [pc, #300]	; (8001b5c <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8001a2e:	f7ff f92c 	bl	8000c8a <GPIO_WriteBit>
      break;
 8001a32:	e08a      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CS_LINE:
	  GPIO_WriteBit(SPI1_CS_PORT, SPI1_CS_PIN, arg);
 8001a34:	893b      	ldrh	r3, [r7, #8]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	4846      	ldr	r0, [pc, #280]	; (8001b58 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8001a3e:	f7ff f924 	bl	8000c8a <GPIO_WriteBit>
      break;
 8001a42:	e082      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_CHANGE_CD_LINE:
      GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, arg);
 8001a44:	893b      	ldrh	r3, [r7, #8]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a4e:	4841      	ldr	r0, [pc, #260]	; (8001b54 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001a50:	f7ff f91b 	bl	8000c8a <GPIO_WriteBit>
      break;
 8001a54:	e079      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_BYTE:
      ucg_com_arduino_send_generic_SW_SPI(ucg, arg);
 8001a56:	893b      	ldrh	r3, [r7, #8]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f7ff ff4f 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
      break;
 8001a62:	e072      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_1_BYTE:
      while( arg > 0 ) {
	    ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff ff48 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
	    arg--;
 8001a70:	893b      	ldrh	r3, [r7, #8]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f3      	bne.n	8001a64 <ucg_com_arduino_generic_SW_SPI+0xf0>
      }
      break;
 8001a7c:	e065      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_2_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7ff ff3b 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7ff ff34 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001a98:	893b      	ldrh	r3, [r7, #8]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001a9e:	893b      	ldrh	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ec      	bne.n	8001a7e <ucg_com_arduino_generic_SW_SPI+0x10a>
      }
      break;
 8001aa4:	e051      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_REPEAT_3_BYTES:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[0]);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff ff27 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[1]);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff ff20 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
		ucg_com_arduino_send_generic_SW_SPI(ucg, data[2]);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff ff19 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001ace:	893b      	ldrh	r3, [r7, #8]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001ad4:	893b      	ldrh	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1e5      	bne.n	8001aa6 <ucg_com_arduino_generic_SW_SPI+0x132>
      }
      break;
 8001ada:	e036      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_STR:
      while( arg > 0 ) {
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data++);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff ff0a 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
		arg--;
 8001aec:	893b      	ldrh	r3, [r7, #8]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	813b      	strh	r3, [r7, #8]
      while( arg > 0 ) {
 8001af2:	893b      	ldrh	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f1      	bne.n	8001adc <ucg_com_arduino_generic_SW_SPI+0x168>
      }
      break;
 8001af8:	e027      	b.n	8001b4a <ucg_com_arduino_generic_SW_SPI+0x1d6>

    case UCG_COM_MSG_SEND_CD_DATA_SEQUENCE:
      while(arg > 0)
      {
		if ( *data != 0 )
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <ucg_com_arduino_generic_SW_SPI+0x1b0>
		{
		  if ( *data == 1 )
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d106      	bne.n	8001b18 <ucg_com_arduino_generic_SW_SPI+0x1a4>
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b10:	4810      	ldr	r0, [pc, #64]	; (8001b54 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001b12:	f7ff f8ba 	bl	8000c8a <GPIO_WriteBit>
 8001b16:	e005      	b.n	8001b24 <ucg_com_arduino_generic_SW_SPI+0x1b0>
		  }
		  else
		  {
			GPIO_WriteBit(SPI1_RS_PORT, SPI1_RS_PIN, 1);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8001b20:	f7ff f8b3 	bl	8000c8a <GPIO_WriteBit>
		  }
		}
		data++;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	607b      	str	r3, [r7, #4]
		ucg_com_arduino_send_generic_SW_SPI(ucg, *data);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fee5 	bl	8001900 <ucg_com_arduino_send_generic_SW_SPI>
		data++;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
		arg--;
 8001b3c:	893b      	ldrh	r3, [r7, #8]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	813b      	strh	r3, [r7, #8]
      while(arg > 0)
 8001b42:	893b      	ldrh	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1d8      	bne.n	8001afa <ucg_com_arduino_generic_SW_SPI+0x186>
      }
      break;
 8001b48:	bf00      	nop
  }
  return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800

08001b60 <Ucglib4WireSWSPI_begin>:

void Ucglib4WireSWSPI_begin(ucg_t *ucg, uint8_t is_transparent)
{ 
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
  ucg_Init(ucg, ucg_dev_st7735_18x128x128, ucg_ext_st7735_18, ucg_com_arduino_generic_SW_SPI);
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <Ucglib4WireSWSPI_begin+0x2c>)
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <Ucglib4WireSWSPI_begin+0x30>)
 8001b70:	4908      	ldr	r1, [pc, #32]	; (8001b94 <Ucglib4WireSWSPI_begin+0x34>)
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f001 febc 	bl	80038f0 <ucg_Init>
  ucg_SetFontMode(ucg, is_transparent);
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f001 fca0 	bl	80034c2 <ucg_SetFontMode>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08001975 	.word	0x08001975
 8001b90:	08002bf1 	.word	0x08002bf1
 8001b94:	08002d19 	.word	0x08002d19

08001b98 <ucg_DrawBox>:
*/

#include "ucg.h"

void ucg_DrawBox(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t w, ucg_int_t h)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	817b      	strh	r3, [r7, #10]
 8001baa:	460b      	mov	r3, r1
 8001bac:	813b      	strh	r3, [r7, #8]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80fb      	strh	r3, [r7, #6]
  while( h > 0 )
 8001bb2:	e014      	b.n	8001bde <ucg_DrawBox+0x46>
  {
    ucg_DrawHLine(ucg, x, y, w);
 8001bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001bbc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f001 ff07 	bl	80039d4 <ucg_DrawHLine>
    h--;
 8001bc6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	833b      	strh	r3, [r7, #24]
    y++;
 8001bd2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	813b      	strh	r3, [r7, #8]
  while( h > 0 )
 8001bde:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	dce6      	bgt.n	8001bb4 <ucg_DrawBox+0x1c>
  }  
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <ucg_ClearScreen>:
  - clear the screen with black color
  - reset clip range to max
  - set draw color to white
*/
void ucg_ClearScreen(ucg_t *ucg)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	6078      	str	r0, [r7, #4]
  ucg_SetColor(ucg, 0, 0, 0, 0);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f001 ff04 	bl	8003a10 <ucg_SetColor>
  ucg_SetMaxClipRange(ucg);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f001 f84c 	bl	8002ca6 <ucg_SetMaxClipRange>
  ucg_DrawBox(ucg, 0, 0, ucg_GetWidth(ucg), ucg_GetHeight(ucg));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffb8 	bl	8001b98 <ucg_DrawBox>
  ucg_SetColor(ucg, 0, 255, 255, 255);
 8001c28:	23ff      	movs	r3, #255	; 0xff
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	23ff      	movs	r3, #255	; 0xff
 8001c2e:	22ff      	movs	r2, #255	; 0xff
 8001c30:	2100      	movs	r1, #0
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f001 feec 	bl	8003a10 <ucg_SetColor>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <ucg_ccs_init>:
/*
  Setup change from "start" to "end" with a specified amount of "steps".
  After calling this procedure, ccs->current will contain the "start" value.
*/
void ucg_ccs_init(ucg_ccs_t *ccs, uint8_t start, uint8_t end, ucg_int_t steps)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	70fb      	strb	r3, [r7, #3]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70bb      	strb	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	803b      	strh	r3, [r7, #0]
  ccs->start = start;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	705a      	strb	r2, [r3, #1]
  ccs->num = end-start;
 8001c60:	78bb      	ldrb	r3, [r7, #2]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	809a      	strh	r2, [r3, #4]
  ccs->den = steps-1;
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	811a      	strh	r2, [r3, #8]
  ccs->dir = 1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	805a      	strh	r2, [r3, #2]
  
  ccs->quot = ccs->num / ccs->den;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	80da      	strh	r2, [r3, #6]
  if ( ccs->num < 0 )
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da0c      	bge.n	8001cc0 <ucg_ccs_init+0x80>
  {
    ccs->num = -ccs->num;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	425b      	negs	r3, r3
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	809a      	strh	r2, [r3, #4]
    ccs->dir = -1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cbe:	805a      	strh	r2, [r3, #2]
  }
  ccs->rem = ccs->num % ccs->den;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001ccc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cd0:	fb01 f202 	mul.w	r2, r1, r2
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	815a      	strh	r2, [r3, #10]
  
  ccs->frac = ccs->den/2;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ce2:	0fda      	lsrs	r2, r3, #31
 8001ce4:	4413      	add	r3, r2
 8001ce6:	105b      	asrs	r3, r3, #1
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	819a      	strh	r2, [r3, #12]
  ccs->current = start;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	701a      	strb	r2, [r3, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <ucg_ccs_step>:
/*
  Make one step towards the "end" value. 
  ccs->curront will contain the updated value.
*/
void ucg_ccs_step(ucg_ccs_t *ccs)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  
  ccs->current += ccs->quot;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	701a      	strb	r2, [r3, #0]
  ccs->frac += ccs->rem;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	819a      	strh	r2, [r3, #12]
  if ( ccs->frac >= ccs->den )
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	db16      	blt.n	8001d74 <ucg_ccs_step+0x74>
  {
    ccs->current += ccs->dir;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	701a      	strb	r2, [r3, #0]
    ccs->frac -= ccs->den;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	819a      	strh	r2, [r3, #12]
  }  
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <ucg_ccs_seek>:
  
  Seek to the specified "pos"ition.
  "pos" must be between 0 and "end"-1
*/
void ucg_ccs_seek(ucg_ccs_t *ccs, ucg_int_t pos)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
  ucg_int_t p;
  ccs->current = ccs->quot;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	701a      	strb	r2, [r3, #0]
  ccs->current *= pos;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	fb12 f303 	smulbb	r3, r2, r3
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	701a      	strb	r2, [r3, #0]
  p = ccs->rem * pos  + ccs->den/2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	fb12 f303 	smulbb	r3, r2, r3
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dc0:	0fd9      	lsrs	r1, r3, #31
 8001dc2:	440b      	add	r3, r1
 8001dc4:	105b      	asrs	r3, r3, #1
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	81fb      	strh	r3, [r7, #14]
  if ( ccs->dir >= 0 )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0e      	blt.n	8001df8 <ucg_ccs_seek+0x78>
    ccs->current += p / ccs->den;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001de8:	fb93 f3f1 	sdiv	r3, r3, r1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4413      	add	r3, r2
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e00d      	b.n	8001e14 <ucg_ccs_seek+0x94>
  else
    ccs->current -= p / ccs->den;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8001e06:	fb93 f3f1 	sdiv	r3, r3, r1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	701a      	strb	r2, [r3, #0]
  ccs->frac = p % ccs->den;
 8001e14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001e1e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e22:	fb01 f202 	mul.w	r2, r1, r2
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	819a      	strh	r2, [r3, #12]
  ccs->current += ccs->start;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	4413      	add	r3, r2
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	701a      	strb	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <ucg_clip_is_x_visible>:

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg) UCG_NOINLINE;
static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg) UCG_NOINLINE;

static ucg_int_t ucg_clip_is_x_visible(ucg_t *ucg)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.x;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e56:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.x;
 8001e58:	89fa      	ldrh	r2, [r7, #14]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8001e68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da01      	bge.n	8001e74 <ucg_clip_is_x_visible+0x2a>
    return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e009      	b.n	8001e88 <ucg_clip_is_x_visible+0x3e>
  if ( t >= ucg->clip_box.size.w )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8001e7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	db01      	blt.n	8001e86 <ucg_clip_is_x_visible+0x3c>
    return 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <ucg_clip_is_x_visible+0x3e>
  
  return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <ucg_clip_is_y_visible>:

static ucg_int_t ucg_clip_is_y_visible(ucg_t *ucg)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  ucg_int_t t;
  t = ucg->arg.pixel.pos.y;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ea0:	81fb      	strh	r3, [r7, #14]
  t -= ucg->clip_box.ul.y;
 8001ea2:	89fa      	ldrh	r2, [r7, #14]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	81fb      	strh	r3, [r7, #14]
  if ( t < 0 )
 8001eb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	da01      	bge.n	8001ebe <ucg_clip_is_y_visible+0x2a>
    return 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e009      	b.n	8001ed2 <ucg_clip_is_y_visible+0x3e>
  if ( t >= ucg->clip_box.size.h )
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8001ec4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	db01      	blt.n	8001ed0 <ucg_clip_is_y_visible+0x3c>
    return 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <ucg_clip_is_y_visible+0x3e>
  
  return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <ucg_clip_intersection>:
  Assumptions:
    a <= b
    c <= d
*/
static ucg_int_t ucg_clip_intersection(ucg_int_t *ap, ucg_int_t *bp, ucg_int_t c, ucg_int_t d)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b087      	sub	sp, #28
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	461a      	mov	r2, r3
 8001eec:	460b      	mov	r3, r1
 8001eee:	80fb      	strh	r3, [r7, #6]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	80bb      	strh	r3, [r7, #4]
  ucg_int_t a = *ap;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	82fb      	strh	r3, [r7, #22]
  ucg_int_t b = *bp;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	82bb      	strh	r3, [r7, #20]
  
  if ( a >= d )
 8001f00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	db01      	blt.n	8001f10 <ucg_clip_intersection+0x32>
    return 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e01a      	b.n	8001f46 <ucg_clip_intersection+0x68>
  if ( b <= c )
 8001f10:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dc01      	bgt.n	8001f20 <ucg_clip_intersection+0x42>
    return 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e012      	b.n	8001f46 <ucg_clip_intersection+0x68>
  if ( a < c )
 8001f20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	da02      	bge.n	8001f32 <ucg_clip_intersection+0x54>
    *ap = c;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 8001f32:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dd02      	ble.n	8001f44 <ucg_clip_intersection+0x66>
    *bp = d;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	88ba      	ldrh	r2, [r7, #4]
 8001f42:	801a      	strh	r2, [r3, #0]
  return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <ucg_clip_is_pixel_visible>:

ucg_int_t ucg_clip_is_pixel_visible(ucg_t *ucg)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  if ( ucg_clip_is_x_visible(ucg) == 0 )
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff75 	bl	8001e4a <ucg_clip_is_x_visible>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <ucg_clip_is_pixel_visible+0x18>
    return 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e008      	b.n	8001f7c <ucg_clip_is_pixel_visible+0x2a>
  if ( ucg_clip_is_y_visible(ucg) == 0 )
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff92 	bl	8001e94 <ucg_clip_is_y_visible>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <ucg_clip_is_pixel_visible+0x28>
    return 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <ucg_clip_is_pixel_visible+0x2a>
  return 1;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <ucg_clip_l90fx>:
/*
  assumes, that ucg->arg contains data for l90fx and does clipping 
  against ucg->clip_box
*/
ucg_int_t ucg_clip_l90fx(ucg_t *ucg)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  ucg_int_t a;
  ucg_int_t b;
  ucg->arg.offset = 0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	861a      	strh	r2, [r3, #48]	; 0x30
  switch(ucg->arg.dir)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	f200 816d 	bhi.w	8002278 <ucg_clip_l90fx+0x2f4>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <ucg_clip_l90fx+0x20>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	0800205b 	.word	0x0800205b
 8001fac:	08002101 	.word	0x08002101
 8001fb0:	080021bd 	.word	0x080021bd
  {
    case 0:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff6d 	bl	8001e94 <ucg_clip_is_y_visible>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <ucg_clip_l90fx+0x40>
	return 0; 
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e15a      	b.n	800227a <ucg_clip_l90fx+0x2f6>
      a = ucg->arg.pixel.pos.x;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001fca:	81fb      	strh	r3, [r7, #14]
      b = a;
 8001fcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fd0:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	b29b      	uxth	r3, r3
 8002002:	b21b      	sxth	r3, r3
 8002004:	f107 010c 	add.w	r1, r7, #12
 8002008:	f107 000e 	add.w	r0, r7, #14
 800200c:	4622      	mov	r2, r4
 800200e:	f7ff ff66 	bl	8001ede <ucg_clip_intersection>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <ucg_clip_l90fx+0x98>
	return 0;
 8002018:	2300      	movs	r3, #0
 800201a:	e12e      	b.n	800227a <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.offset = a - ucg->arg.pixel.pos.x;
 800201c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002028:	b29b      	uxth	r3, r3
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	b29b      	uxth	r3, r3
 800202e:	b21a      	sxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = a;
 8002034:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	849a      	strh	r2, [r3, #36]	; 0x24
      b -= a;
 800203c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002040:	b29a      	uxth	r2, r3
 8002042:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002046:	b29b      	uxth	r3, r3
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29b      	uxth	r3, r3
 800204c:	b21b      	sxth	r3, r3
 800204e:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 8002050:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 8002058:	e10e      	b.n	8002278 <ucg_clip_l90fx+0x2f4>
    case 1:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fef5 	bl	8001e4a <ucg_clip_is_x_visible>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <ucg_clip_l90fx+0xe6>
	return 0;
 8002066:	2300      	movs	r3, #0
 8002068:	e107      	b.n	800227a <ucg_clip_l90fx+0x2f6>
      
      a = ucg->arg.pixel.pos.y;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002070:	81fb      	strh	r3, [r7, #14]
      b = a;
 8002072:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002076:	81bb      	strh	r3, [r7, #12]
      b += ucg->arg.len;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800207e:	b29a      	uxth	r2, r3
 8002080:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002084:	b29b      	uxth	r3, r3
 8002086:	4413      	add	r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	b21b      	sxth	r3, r3
 800208c:	81bb      	strh	r3, [r7, #12]
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	f107 010c 	add.w	r1, r7, #12
 80020ae:	f107 000e 	add.w	r0, r7, #14
 80020b2:	4622      	mov	r2, r4
 80020b4:	f7ff ff13 	bl	8001ede <ucg_clip_intersection>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <ucg_clip_l90fx+0x13e>
	return 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	e0db      	b.n	800227a <ucg_clip_l90fx+0x2f6>

      ucg->arg.offset = a - ucg->arg.pixel.pos.y;
 80020c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = a;
 80020da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	84da      	strh	r2, [r3, #38]	; 0x26
      b -= a;
 80020e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	81bb      	strh	r3, [r7, #12]
      ucg->arg.len = b;
 80020f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      break;
 80020fe:	e0bb      	b.n	8002278 <ucg_clip_l90fx+0x2f4>
    case 2:
      if ( ucg_clip_is_y_visible(ucg) == 0 )
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fec7 	bl	8001e94 <ucg_clip_is_y_visible>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <ucg_clip_l90fx+0x18c>
	return 0;
 800210c:	2300      	movs	r3, #0
 800210e:	e0b4      	b.n	800227a <ucg_clip_l90fx+0x2f6>
      
      b = ucg->arg.pixel.pos.x;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002116:	81bb      	strh	r3, [r7, #12]
      b++;
 8002118:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800211c:	b29b      	uxth	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	b29b      	uxth	r3, r3
 8002122:	b21b      	sxth	r3, r3
 8002124:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 8002126:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800212a:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 800212c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002138:	b29b      	uxth	r3, r3
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	b29b      	uxth	r3, r3
 800213e:	b21b      	sxth	r3, r3
 8002140:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.x, ucg->clip_box.ul.x+ucg->clip_box.size.w) == 0 )
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800214e:	b29a      	uxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8002156:	b29b      	uxth	r3, r3
 8002158:	4413      	add	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	b21b      	sxth	r3, r3
 800215e:	f107 010c 	add.w	r1, r7, #12
 8002162:	f107 000e 	add.w	r0, r7, #14
 8002166:	4622      	mov	r2, r4
 8002168:	f7ff feb9 	bl	8001ede <ucg_clip_intersection>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <ucg_clip_l90fx+0x1f2>
	return 0;
 8002172:	2300      	movs	r3, #0
 8002174:	e081      	b.n	800227a <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8002176:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800217a:	b29a      	uxth	r2, r3
 800217c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002180:	b29b      	uxth	r3, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	b21a      	sxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 800218c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	b21b      	sxth	r3, r3
 8002198:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.x-b;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.x = b;
 80021b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	849a      	strh	r2, [r3, #36]	; 0x24
      
      break;
 80021ba:	e05d      	b.n	8002278 <ucg_clip_l90fx+0x2f4>
    case 3:
      if ( ucg_clip_is_x_visible(ucg) == 0 )
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fe44 	bl	8001e4a <ucg_clip_is_x_visible>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <ucg_clip_l90fx+0x248>
	return 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e056      	b.n	800227a <ucg_clip_l90fx+0x2f6>

      b = ucg->arg.pixel.pos.y;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80021d2:	81bb      	strh	r3, [r7, #12]
      b++;
 80021d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	b21b      	sxth	r3, r3
 80021e0:	81bb      	strh	r3, [r7, #12]
      
      a = b;
 80021e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021e6:	81fb      	strh	r3, [r7, #14]
      a -= ucg->arg.len;
 80021e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	81fb      	strh	r3, [r7, #14]
      
      
      if ( ucg_clip_intersection(&a, &b, ucg->clip_box.ul.y, ucg->clip_box.ul.y+ucg->clip_box.size.h) == 0 )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8002212:	b29b      	uxth	r3, r3
 8002214:	4413      	add	r3, r2
 8002216:	b29b      	uxth	r3, r3
 8002218:	b21b      	sxth	r3, r3
 800221a:	f107 010c 	add.w	r1, r7, #12
 800221e:	f107 000e 	add.w	r0, r7, #14
 8002222:	4622      	mov	r2, r4
 8002224:	f7ff fe5b 	bl	8001ede <ucg_clip_intersection>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <ucg_clip_l90fx+0x2ae>
	return 0;
 800222e:	2300      	movs	r3, #0
 8002230:	e023      	b.n	800227a <ucg_clip_l90fx+0x2f6>
      
      ucg->arg.len = b-a;
 8002232:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002236:	b29a      	uxth	r2, r3
 8002238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800223c:	b29b      	uxth	r3, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	b29b      	uxth	r3, r3
 8002242:	b21a      	sxth	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	859a      	strh	r2, [r3, #44]	; 0x2c
      
      b--;
 8002248:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21b      	sxth	r3, r3
 8002254:	81bb      	strh	r3, [r7, #12]
      ucg->arg.offset = ucg->arg.pixel.pos.y-b;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800225c:	b29a      	uxth	r2, r3
 800225e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002262:	b29b      	uxth	r3, r3
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	b29b      	uxth	r3, r3
 8002268:	b21a      	sxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	861a      	strh	r2, [r3, #48]	; 0x30
      ucg->arg.pixel.pos.y = b;
 800226e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	84da      	strh	r2, [r3, #38]	; 0x26
      
      
      break;
 8002276:	bf00      	nop
  }

  return 1;
 8002278:	2301      	movs	r3, #1
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop

08002284 <ucg_clip_l90se>:
  return 1;
}
*/

ucg_int_t ucg_clip_l90se(ucg_t *ucg)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  if ( ucg_clip_l90fx(ucg) == 0 )
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fe79 	bl	8001f84 <ucg_clip_l90fx>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <ucg_clip_l90se+0x18>
      return 0;
 8002298:	2300      	movs	r3, #0
 800229a:	e019      	b.n	80022d0 <ucg_clip_l90se+0x4c>
  for ( i = 0; i < 3; i++ )
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e012      	b.n	80022c8 <ucg_clip_l90se+0x44>
  {
    ucg_ccs_seek(ucg->arg.ccs_line+i, ucg->arg.offset);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	18ca      	adds	r2, r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f7ff fd5f 	bl	8001d80 <ucg_ccs_seek>
  for ( i = 0; i < 3; i++ )
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	3301      	adds	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d9e9      	bls.n	80022a2 <ucg_clip_l90se+0x1e>
  }  
  return 1;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <ucg_com_PowerDown>:
  return 1;
}


void ucg_com_PowerDown(ucg_t *ucg)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ( (ucg->com_status & UCG_COM_STATUS_MASK_POWER) != 0 )
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <ucg_com_PowerDown+0x24>
    ucg->com_cb(ucg, UCG_COM_MSG_POWER_DOWN, 0, NULL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69dc      	ldr	r4, [r3, #28]
 80022f2:	2300      	movs	r3, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	210b      	movs	r1, #11
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	47a0      	blx	r4
  ucg->com_status &= ~UCG_COM_STATUS_MASK_POWER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002302:	f023 0308 	bic.w	r3, r3, #8
 8002306:	b2da      	uxtb	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}

08002316 <ucg_com_PowerUp>:

/*
  clk_speed in nano-seconds, range: 0..4095
*/
int16_t ucg_com_PowerUp(ucg_t *ucg, uint16_t serial_clk_speed, uint16_t parallel_clk_speed)
{
 8002316:	b590      	push	{r4, r7, lr}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	807b      	strh	r3, [r7, #2]
 8002322:	4613      	mov	r3, r2
 8002324:	803b      	strh	r3, [r7, #0]
  int16_t r;
  ucg_com_info_t com_info;
  com_info.serial_clk_speed = serial_clk_speed;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	813b      	strh	r3, [r7, #8]
  com_info.parallel_clk_speed = parallel_clk_speed;
 800232a:	883b      	ldrh	r3, [r7, #0]
 800232c:	817b      	strh	r3, [r7, #10]
  
  ucg_com_PowerDown(ucg);  
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffd2 	bl	80022d8 <ucg_com_PowerDown>
  ucg->com_initial_change_sent = 0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  r = ucg->com_cb(ucg, UCG_COM_MSG_POWER_UP, 0UL, (uint8_t *)&com_info);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69dc      	ldr	r4, [r3, #28]
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	2200      	movs	r2, #0
 8002346:	210a      	movs	r1, #10
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	47a0      	blx	r4
 800234c:	4603      	mov	r3, r0
 800234e:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8002350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <ucg_com_PowerUp+0x54>
  {
    ucg->com_status |= UCG_COM_STATUS_MASK_POWER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800235e:	f043 0308 	orr.w	r3, r3, #8
 8002362:	b2da      	uxtb	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  }
  return r;
 800236a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bd90      	pop	{r4, r7, pc}

08002376 <ucg_com_SetLineStatus>:

void ucg_com_SetLineStatus(ucg_t *ucg, uint8_t level, uint8_t mask, uint8_t msg)
{
 8002376:	b590      	push	{r4, r7, lr}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	4608      	mov	r0, r1
 8002380:	4611      	mov	r1, r2
 8002382:	461a      	mov	r2, r3
 8002384:	4603      	mov	r3, r0
 8002386:	70fb      	strb	r3, [r7, #3]
 8002388:	460b      	mov	r3, r1
 800238a:	70bb      	strb	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  if ( level == 0 )
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d131      	bne.n	80023fa <ucg_com_SetLineStatus+0x84>
  {
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == mask )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 800239c:	78bb      	ldrb	r3, [r7, #2]
 800239e:	4013      	ands	r3, r2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <ucg_com_SetLineStatus+0x42>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80023ac:	78bb      	ldrb	r3, [r7, #2]
 80023ae:	4013      	ands	r3, r2
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	78ba      	ldrb	r2, [r7, #2]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d14b      	bne.n	8002450 <ucg_com_SetLineStatus+0xda>
    {
      ucg->com_cb(ucg, msg, level, NULL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69dc      	ldr	r4, [r3, #28]
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	b219      	sxth	r1, r3
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	47a0      	blx	r4
      ucg->com_status &= ~mask;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80023d0:	b25a      	sxtb	r2, r3
 80023d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	4013      	ands	r3, r2
 80023dc:	b25b      	sxtb	r3, r3
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80023ec:	78bb      	ldrb	r3, [r7, #2]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
      ucg->com_cb(ucg, msg, level, NULL);
      ucg->com_status |= mask;
      ucg->com_initial_change_sent |= mask;
    }
  }
}
 80023f8:	e02a      	b.n	8002450 <ucg_com_SetLineStatus+0xda>
    if ( (ucg->com_initial_change_sent & mask) == 0 || (ucg->com_status & mask) == 0 )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002400:	78bb      	ldrb	r3, [r7, #2]
 8002402:	4013      	ands	r3, r2
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <ucg_com_SetLineStatus+0xa4>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8002410:	78bb      	ldrb	r3, [r7, #2]
 8002412:	4013      	ands	r3, r2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11a      	bne.n	8002450 <ucg_com_SetLineStatus+0xda>
      ucg->com_cb(ucg, msg, level, NULL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69dc      	ldr	r4, [r3, #28]
 800241e:	787b      	ldrb	r3, [r7, #1]
 8002420:	b219      	sxth	r1, r3
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	b29a      	uxth	r2, r3
 8002426:	2300      	movs	r3, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	47a0      	blx	r4
      ucg->com_status |= mask;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8002432:	78bb      	ldrb	r3, [r7, #2]
 8002434:	4313      	orrs	r3, r2
 8002436:	b2da      	uxtb	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
      ucg->com_initial_change_sent |= mask;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8002444:	78bb      	ldrb	r3, [r7, #2]
 8002446:	4313      	orrs	r3, r2
 8002448:	b2da      	uxtb	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}

08002458 <ucg_com_SetResetLineStatus>:

void ucg_com_SetResetLineStatus(ucg_t *ucg, uint8_t level)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_RESET, UCG_COM_MSG_CHANGE_RESET_LINE);
 8002464:	78f9      	ldrb	r1, [r7, #3]
 8002466:	230d      	movs	r3, #13
 8002468:	2204      	movs	r2, #4
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff83 	bl	8002376 <ucg_com_SetLineStatus>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <ucg_com_SetCSLineStatus>:

void ucg_com_SetCSLineStatus(ucg_t *ucg, uint8_t level)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CS, UCG_COM_MSG_CHANGE_CS_LINE);
 8002484:	78f9      	ldrb	r1, [r7, #3]
 8002486:	230e      	movs	r3, #14
 8002488:	2202      	movs	r2, #2
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff73 	bl	8002376 <ucg_com_SetLineStatus>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <ucg_com_SetCDLineStatus>:

void ucg_com_SetCDLineStatus(ucg_t *ucg, uint8_t level)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  ucg_com_SetLineStatus(ucg, level, UCG_COM_STATUS_MASK_CD, UCG_COM_MSG_CHANGE_CD_LINE);
 80024a4:	78f9      	ldrb	r1, [r7, #3]
 80024a6:	230f      	movs	r3, #15
 80024a8:	2201      	movs	r2, #1
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ff63 	bl	8002376 <ucg_com_SetLineStatus>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <ucg_com_DelayMicroseconds>:

/* delay in microseconds */
void ucg_com_DelayMicroseconds(ucg_t *ucg, uint16_t delay)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
  ucg->com_cb(ucg, UCG_COM_MSG_DELAY, delay, NULL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69dc      	ldr	r4, [r3, #28]
 80024c8:	887a      	ldrh	r2, [r7, #2]
 80024ca:	2300      	movs	r3, #0
 80024cc:	210c      	movs	r1, #12
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	47a0      	blx	r4
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd90      	pop	{r4, r7, pc}

080024da <ucg_com_DelayMilliseconds>:

/* delay in milliseconds */
void ucg_com_DelayMilliseconds(ucg_t *ucg, uint16_t delay)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 80024e6:	e007      	b.n	80024f8 <ucg_com_DelayMilliseconds+0x1e>
  {
    ucg_com_DelayMicroseconds(ucg, 1000);
 80024e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ffe3 	bl	80024b8 <ucg_com_DelayMicroseconds>
    delay--;
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	807b      	strh	r3, [r7, #2]
  while( delay > 0 )
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f4      	bne.n	80024e8 <ucg_com_DelayMilliseconds+0xe>
  }
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <ucg_com_SendByte>:


#ifndef ucg_com_SendByte
void ucg_com_SendByte(ucg_t *ucg, uint8_t byte)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, byte, NULL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69dc      	ldr	r4, [r3, #28]
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	b29a      	uxth	r2, r3
 800251c:	2300      	movs	r3, #0
 800251e:	2110      	movs	r1, #16
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	47a0      	blx	r4
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}

0800252c <ucg_com_SendStringP>:
{
  ucg->com_cb(ucg, UCG_COM_MSG_SEND_STR, cnt, (uint8_t *)byte_ptr);
}

void ucg_com_SendStringP(ucg_t *ucg, uint16_t cnt, const ucg_pgm_uint8_t *byte_ptr)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	460b      	mov	r3, r1
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	817b      	strh	r3, [r7, #10]
  uint8_t b;
  while( cnt > 0 )
 800253a:	e010      	b.n	800255e <ucg_com_SendStringP+0x32>
  {
    b = ucg_pgm_read(byte_ptr);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	75fb      	strb	r3, [r7, #23]
    //b = *byte_ptr;
    ucg->com_cb(ucg, UCG_COM_MSG_SEND_BYTE, b, NULL);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	69dc      	ldr	r4, [r3, #28]
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	b29a      	uxth	r2, r3
 800254a:	2300      	movs	r3, #0
 800254c:	2110      	movs	r1, #16
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	47a0      	blx	r4
    byte_ptr++;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3301      	adds	r3, #1
 8002556:	607b      	str	r3, [r7, #4]
    cnt--;
 8002558:	897b      	ldrh	r3, [r7, #10]
 800255a:	3b01      	subs	r3, #1
 800255c:	817b      	strh	r3, [r7, #10]
  while( cnt > 0 )
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1eb      	bne.n	800253c <ucg_com_SendStringP+0x10>
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}

0800256e <ucg_com_SendCmdArg>:
#define END()					0x00

*/

static void ucg_com_SendCmdArg(ucg_t *ucg, const ucg_pgm_uint8_t *data, uint8_t cmd_cnt, uint8_t arg_cnt)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	4611      	mov	r1, r2
 800257a:	461a      	mov	r2, r3
 800257c:	460b      	mov	r3, r1
 800257e:	71fb      	strb	r3, [r7, #7]
 8002580:	4613      	mov	r3, r2
 8002582:	71bb      	strb	r3, [r7, #6]
  ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd>>1)&1 );
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff ff7e 	bl	8002498 <ucg_com_SetCDLineStatus>
  ucg_com_SendStringP(ucg, cmd_cnt, data);
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	4619      	mov	r1, r3
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff ffc1 	bl	800252c <ucg_com_SendStringP>
  if ( arg_cnt > 0 )
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d014      	beq.n	80025da <ucg_com_SendCmdArg+0x6c>
  {
    data += cmd_cnt;
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4413      	add	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
    ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	4619      	mov	r1, r3
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff ff66 	bl	8002498 <ucg_com_SetCDLineStatus>
    ucg_com_SendStringP(ucg, arg_cnt, data);
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	4619      	mov	r1, r3
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff ffa9 	bl	800252c <ucg_com_SendStringP>
  }
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <ucg_com_SendCmdSeq>:


//void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint8_t hi;
  uint8_t lo;

  for(;;)
  {
    b = ucg_pgm_read(data);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	73fb      	strb	r3, [r7, #15]
    //b = *data;
    hi = (b) >> 4;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	73bb      	strb	r3, [r7, #14]
    lo = (b) & 0x0f;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	737b      	strb	r3, [r7, #13]
    switch( hi )
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	2b0f      	cmp	r3, #15
 8002606:	f200 8127 	bhi.w	8002858 <ucg_com_SendCmdSeq+0x274>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <ucg_com_SendCmdSeq+0x2c>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002859 	.word	0x08002859
 8002614:	08002651 	.word	0x08002651
 8002618:	08002651 	.word	0x08002651
 800261c:	08002651 	.word	0x08002651
 8002620:	08002859 	.word	0x08002859
 8002624:	08002859 	.word	0x08002859
 8002628:	08002671 	.word	0x08002671
 800262c:	080026a3 	.word	0x080026a3
 8002630:	080026e7 	.word	0x080026e7
 8002634:	08002713 	.word	0x08002713
 8002638:	0800273f 	.word	0x0800273f
 800263c:	0800279f 	.word	0x0800279f
 8002640:	08002859 	.word	0x08002859
 8002644:	08002859 	.word	0x08002859
 8002648:	08002859 	.word	0x08002859
 800264c:	080027ff 	.word	0x080027ff
      case 0:
	return;		/* end marker */
      case 1:
      case 2:
      case 3:
	ucg_com_SendCmdArg(ucg, data+1, hi, lo);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	7b7b      	ldrb	r3, [r7, #13]
 8002656:	7bba      	ldrb	r2, [r7, #14]
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff88 	bl	800256e <ucg_com_SendCmdArg>
	data+=1+hi+lo;
 800265e:	7bbb      	ldrb	r3, [r7, #14]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	7b7b      	ldrb	r3, [r7, #13]
 8002664:	4413      	add	r3, r2
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4413      	add	r3, r2
 800266c:	603b      	str	r3, [r7, #0]
	break;
 800266e:	e0f2      	b.n	8002856 <ucg_com_SendCmdSeq+0x272>
      case 6:
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ff0a 	bl	8002498 <ucg_com_SetCDLineStatus>
	ucg_com_SendStringP(ucg, lo, data+1);
 8002684:	7b7b      	ldrb	r3, [r7, #13]
 8002686:	b299      	uxth	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	461a      	mov	r2, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff4c 	bl	800252c <ucg_com_SendStringP>
	data+=1+lo;      
 8002694:	7b7b      	ldrb	r3, [r7, #13]
 8002696:	3301      	adds	r3, #1
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	603b      	str	r3, [r7, #0]
	break;
 80026a0:	e0d9      	b.n	8002856 <ucg_com_SendCmdSeq+0x272>
      case 7:	/* note: 0x070 is used to set data line status */
	ucg_com_SetCDLineStatus(ucg, ((ucg->com_cfg_cd>>1)&1)^1 );
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff feeb 	bl	8002498 <ucg_com_SetCDLineStatus>
	if ( lo > 0 )
 80026c2:	7b7b      	ldrb	r3, [r7, #13]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <ucg_com_SendCmdSeq+0xf4>
	  ucg_com_SendStringP(ucg, lo, data+1);
 80026c8:	7b7b      	ldrb	r3, [r7, #13]
 80026ca:	b299      	uxth	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	461a      	mov	r2, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff2a 	bl	800252c <ucg_com_SendStringP>
	data+=1+lo;      
 80026d8:	7b7b      	ldrb	r3, [r7, #13]
 80026da:	3301      	adds	r3, #1
 80026dc:	461a      	mov	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	603b      	str	r3, [r7, #0]
	break;
 80026e4:	e0b7      	b.n	8002856 <ucg_com_SendCmdSeq+0x272>
      case 8:
	data++;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMilliseconds(ucg, (((uint16_t)lo)<<8) + b );
 80026f2:	7b7b      	ldrb	r3, [r7, #13]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	4413      	add	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff fee8 	bl	80024da <ucg_com_DelayMilliseconds>
	data++;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	603b      	str	r3, [r7, #0]
	break;
 8002710:	e0a1      	b.n	8002856 <ucg_com_SendCmdSeq+0x272>
      case 9:
	data++;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	73fb      	strb	r3, [r7, #15]
	//b = *data;
	ucg_com_DelayMicroseconds(ucg, (((uint16_t)lo)<<8) + b );
 800271e:	7b7b      	ldrb	r3, [r7, #13]
 8002720:	b29b      	uxth	r3, r3
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	b29a      	uxth	r2, r3
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4413      	add	r3, r2
 800272c:	b29b      	uxth	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fec1 	bl	80024b8 <ucg_com_DelayMicroseconds>
	data++;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	603b      	str	r3, [r7, #0]
	break;
 800273c:	e08b      	b.n	8002856 <ucg_com_SendCmdSeq+0x272>
      case 10:
	data++;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	73fb      	strb	r3, [r7, #15]
	data++;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	733b      	strb	r3, [r7, #12]
	data++;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fe94 	bl	8002498 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800277e:	441a      	add	r2, r3
 8002780:	7b7b      	ldrb	r3, [r7, #13]
 8002782:	fa42 f303 	asr.w	r3, r2, r3
 8002786:	b2da      	uxtb	r2, r3
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	4013      	ands	r3, r2
 800278c:	b2da      	uxtb	r2, r3
 800278e:	7b3b      	ldrb	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff feb6 	bl	8002508 <ucg_com_SendByte>
	//data+=2;
	break;
 800279c:	e05b      	b.n	8002856 <ucg_com_SendCmdSeq+0x272>
      case 11:
	data++;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	603b      	str	r3, [r7, #0]
	b = ucg_pgm_read(data);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	73fb      	strb	r3, [r7, #15]
	data++;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	603b      	str	r3, [r7, #0]
	bb = ucg_pgm_read(data);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	733b      	strb	r3, [r7, #12]
	data++;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	603b      	str	r3, [r7, #0]
	//b = data[0];
	//bb = data[1];
	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fe64 	bl	8002498 <ucg_com_SetCDLineStatus>
	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80027d6:	461a      	mov	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80027de:	441a      	add	r2, r3
 80027e0:	7b7b      	ldrb	r3, [r7, #13]
 80027e2:	fa42 f303 	asr.w	r3, r2, r3
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	4013      	ands	r3, r2
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fe86 	bl	8002508 <ucg_com_SendByte>
	//data+=2;
	break;
 80027fc:	e02b      	b.n	8002856 <ucg_com_SendCmdSeq+0x272>
      case 15:
	hi = lo >> 2;
 80027fe:	7b7b      	ldrb	r3, [r7, #13]
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	73bb      	strb	r3, [r7, #14]
	lo &= 3;
 8002804:	7b7b      	ldrb	r3, [r7, #13]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	737b      	strb	r3, [r7, #13]
	switch(hi)
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d018      	beq.n	8002844 <ucg_com_SendCmdSeq+0x260>
 8002812:	2b03      	cmp	r3, #3
 8002814:	dc1b      	bgt.n	800284e <ucg_com_SendCmdSeq+0x26a>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <ucg_com_SendCmdSeq+0x23c>
 800281a:	2b01      	cmp	r3, #1
 800281c:	d009      	beq.n	8002832 <ucg_com_SendCmdSeq+0x24e>
 800281e:	e016      	b.n	800284e <ucg_com_SendCmdSeq+0x26a>
	{
	  case 0:
	    ucg_com_SetResetLineStatus(ucg, lo&1);
 8002820:	7b7b      	ldrb	r3, [r7, #13]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fe14 	bl	8002458 <ucg_com_SetResetLineStatus>
	    break;
 8002830:	e00d      	b.n	800284e <ucg_com_SendCmdSeq+0x26a>
	  case 1:
	    ucg_com_SetCSLineStatus(ucg, lo&1);
 8002832:	7b7b      	ldrb	r3, [r7, #13]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fe1b 	bl	8002478 <ucg_com_SetCSLineStatus>
	    break;
 8002842:	e004      	b.n	800284e <ucg_com_SendCmdSeq+0x26a>
	  case 3:
	    ucg->com_cfg_cd = lo;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7b7a      	ldrb	r2, [r7, #13]
 8002848:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	    break;
 800284c:	bf00      	nop
	}
	data++;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	603b      	str	r3, [r7, #0]
	break;
 8002854:	bf00      	nop
    b = ucg_pgm_read(data);
 8002856:	e6ca      	b.n	80025ee <ucg_com_SendCmdSeq+0xa>
      default:
	return;
 8002858:	bf00      	nop
    }  
  }
}
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <ucg_dev_default_cb>:
  this should be (finally) called by any other device callback to handle
  messages, which are not yet handled.
*/

ucg_int_t ucg_dev_default_cb(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	460b      	mov	r3, r1
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	817b      	strh	r3, [r7, #10]
  switch(msg)
 800286e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d00a      	beq.n	800288c <ucg_dev_default_cb+0x2c>
 8002876:	2b17      	cmp	r3, #23
 8002878:	d10f      	bne.n	800289a <ucg_dev_default_cb+0x3a>
  {
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	4798      	blx	r3
 8002888:	4603      	mov	r3, r0
 800288a:	e007      	b.n	800289c <ucg_dev_default_cb+0x3c>
    case UCG_MSG_SET_CLIP_BOX:
      ucg->clip_box = *(ucg_box_t *)data;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	3370      	adds	r3, #112	; 0x70
 8002892:	6810      	ldr	r0, [r2, #0]
 8002894:	6851      	ldr	r1, [r2, #4]
 8002896:	c303      	stmia	r3!, {r0, r1}
      break;
 8002898:	bf00      	nop
  }
  return 1;	/* all ok */
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <ucg_ext_none>:

/*
  will be used as default cb if no extentions callback is provided
*/
ucg_int_t ucg_ext_none(ucg_t *ucg, ucg_int_t msg, void *data)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	460b      	mov	r3, r1
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	817b      	strh	r3, [r7, #10]
  return 1;	/* all ok */  
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <ucg_handle_st7735_l90fx>:
  UCG_DATA(),								/* change to data mode */
  UCG_END()
};

ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  if ( ucg_clip_l90fx(ucg) != 0 )
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fb5b 	bl	8001f84 <ucg_clip_l90fx>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d056      	beq.n	8002982 <ucg_handle_st7735_l90fx+0xc2>
  {
    switch(ucg->arg.dir)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d010      	beq.n	8002900 <ucg_handle_st7735_l90fx+0x40>
 80028de:	2b02      	cmp	r3, #2
 80028e0:	dc20      	bgt.n	8002924 <ucg_handle_st7735_l90fx+0x64>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <ucg_handle_st7735_l90fx+0x2c>
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d005      	beq.n	80028f6 <ucg_handle_st7735_l90fx+0x36>
 80028ea:	e01b      	b.n	8002924 <ucg_handle_st7735_l90fx+0x64>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 80028ec:	4927      	ldr	r1, [pc, #156]	; (800298c <ucg_handle_st7735_l90fx+0xcc>)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fe78 	bl	80025e4 <ucg_com_SendCmdSeq>
	break;
 80028f4:	e028      	b.n	8002948 <ucg_handle_st7735_l90fx+0x88>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 80028f6:	4926      	ldr	r1, [pc, #152]	; (8002990 <ucg_handle_st7735_l90fx+0xd0>)
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fe73 	bl	80025e4 <ucg_com_SendCmdSeq>
	break;
 80028fe:	e023      	b.n	8002948 <ucg_handle_st7735_l90fx+0x88>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002904:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.x = 127-tmp;
 8002906:	89fb      	ldrh	r3, [r7, #14]
 8002908:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800290c:	b29b      	uxth	r3, r3
 800290e:	b21a      	sxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8002914:	491f      	ldr	r1, [pc, #124]	; (8002994 <ucg_handle_st7735_l90fx+0xd4>)
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fe64 	bl	80025e4 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	89fa      	ldrh	r2, [r7, #14]
 8002920:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8002922:	e011      	b.n	8002948 <ucg_handle_st7735_l90fx+0x88>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002928:	81fb      	strh	r3, [r7, #14]
	ucg->arg.pixel.pos.y = 127-tmp;
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002930:	b29b      	uxth	r3, r3
 8002932:	b21a      	sxth	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8002938:	4917      	ldr	r1, [pc, #92]	; (8002998 <ucg_handle_st7735_l90fx+0xd8>)
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fe52 	bl	80025e4 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	89fa      	ldrh	r2, [r7, #14]
 8002944:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 8002946:	bf00      	nop
    }
    c[0] = ucg->arg.pixel.rgb.color[0];
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800294e:	723b      	strb	r3, [r7, #8]
    c[1] = ucg->arg.pixel.rgb.color[1];
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002956:	727b      	strb	r3, [r7, #9]
    c[2] = ucg->arg.pixel.rgb.color[2];
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800295e:	72bb      	strb	r3, [r7, #10]
    ucg_com_SendRepeat3Bytes(ucg, ucg->arg.len, c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69dc      	ldr	r4, [r3, #28]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800296a:	b29a      	uxth	r2, r3
 800296c:	f107 0308 	add.w	r3, r7, #8
 8002970:	2113      	movs	r1, #19
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	47a0      	blx	r4
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002976:	2101      	movs	r1, #1
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fd7d 	bl	8002478 <ucg_com_SetCSLineStatus>
    return 1;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <ucg_handle_st7735_l90fx+0xc4>
  }
  return 0;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bd90      	pop	{r4, r7, pc}
 800298c:	08004cc0 	.word	0x08004cc0
 8002990:	08004ce0 	.word	0x08004ce0
 8002994:	08004d04 	.word	0x08004d04
 8002998:	08004d28 	.word	0x08004d28

0800299c <ucg_handle_st7735_l90se>:
  return 0;
}


ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint8_t c[3];
  ucg_int_t tmp;
  
  /* Setup ccs for l90se. This will be updated by ucg_clip_l90se if required */
  
  for ( i = 0; i < 3; i++ )
 80029a4:	2300      	movs	r3, #0
 80029a6:	75fb      	strb	r3, [r7, #23]
 80029a8:	e01a      	b.n	80029e0 <ucg_handle_st7735_l90se+0x44>
  {
    ucg_ccs_init(ucg->arg.ccs_line+i, ucg->arg.rgb[0].color[i], ucg->arg.rgb[1].color[i], ucg->arg.len);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80029b0:	7dfa      	ldrb	r2, [r7, #23]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	18c8      	adds	r0, r1, r3
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80029d6:	f7ff f933 	bl	8001c40 <ucg_ccs_init>
  for ( i = 0; i < 3; i++ )
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	3301      	adds	r3, #1
 80029de:	75fb      	strb	r3, [r7, #23]
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d9e1      	bls.n	80029aa <ucg_handle_st7735_l90se+0xe>
  }
  
  /* check if the line is visible */
  
  if ( ucg_clip_l90se(ucg) != 0 )
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fc4c 	bl	8002284 <ucg_clip_l90se>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d074      	beq.n	8002adc <ucg_handle_st7735_l90se+0x140>
  {
    ucg_int_t i;
    switch(ucg->arg.dir)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d010      	beq.n	8002a1e <ucg_handle_st7735_l90se+0x82>
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	dc20      	bgt.n	8002a42 <ucg_handle_st7735_l90se+0xa6>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <ucg_handle_st7735_l90se+0x6e>
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d005      	beq.n	8002a14 <ucg_handle_st7735_l90se+0x78>
 8002a08:	e01b      	b.n	8002a42 <ucg_handle_st7735_l90se+0xa6>
    {
      case 0: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir0_seq);	
 8002a0a:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <ucg_handle_st7735_l90se+0x14c>)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fde9 	bl	80025e4 <ucg_com_SendCmdSeq>
	break;
 8002a12:	e028      	b.n	8002a66 <ucg_handle_st7735_l90se+0xca>
      case 1: 
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir1_seq);	
 8002a14:	4935      	ldr	r1, [pc, #212]	; (8002aec <ucg_handle_st7735_l90se+0x150>)
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fde4 	bl	80025e4 <ucg_com_SendCmdSeq>
	break;
 8002a1c:	e023      	b.n	8002a66 <ucg_handle_st7735_l90se+0xca>
      case 2: 
	tmp = ucg->arg.pixel.pos.x;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a22:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.x = 127-tmp;
 8002a24:	8a7b      	ldrh	r3, [r7, #18]
 8002a26:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	849a      	strh	r2, [r3, #36]	; 0x24
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir2_seq);	
 8002a32:	492f      	ldr	r1, [pc, #188]	; (8002af0 <ucg_handle_st7735_l90se+0x154>)
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fdd5 	bl	80025e4 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.x = tmp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8a7a      	ldrh	r2, [r7, #18]
 8002a3e:	849a      	strh	r2, [r3, #36]	; 0x24
	break;
 8002a40:	e011      	b.n	8002a66 <ucg_handle_st7735_l90se+0xca>
      case 3: 
      default: 
	tmp = ucg->arg.pixel.pos.y;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a46:	827b      	strh	r3, [r7, #18]
	ucg->arg.pixel.pos.y = 127-tmp;
 8002a48:	8a7b      	ldrh	r3, [r7, #18]
 8002a4a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b21a      	sxth	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	84da      	strh	r2, [r3, #38]	; 0x26
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 8002a56:	4927      	ldr	r1, [pc, #156]	; (8002af4 <ucg_handle_st7735_l90se+0x158>)
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fdc3 	bl	80025e4 <ucg_com_SendCmdSeq>
	ucg->arg.pixel.pos.y = tmp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8a7a      	ldrh	r2, [r7, #18]
 8002a62:	84da      	strh	r2, [r3, #38]	; 0x26
	break;
 8002a64:	bf00      	nop
    }
    
    for( i = 0; i < ucg->arg.len; i++ )
 8002a66:	2300      	movs	r3, #0
 8002a68:	82bb      	strh	r3, [r7, #20]
 8002a6a:	e02a      	b.n	8002ac2 <ucg_handle_st7735_l90se+0x126>
    {
      c[0] = ucg->arg.ccs_line[0].current;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a72:	733b      	strb	r3, [r7, #12]
      c[1] = ucg->arg.ccs_line[1].current; 
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a7a:	737b      	strb	r3, [r7, #13]
      c[2] = ucg->arg.ccs_line[2].current;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a82:	73bb      	strb	r3, [r7, #14]
      ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69dc      	ldr	r4, [r3, #28]
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2113      	movs	r1, #19
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	47a0      	blx	r4
      ucg_ccs_step(ucg->arg.ccs_line+0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3346      	adds	r3, #70	; 0x46
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f931 	bl	8001d00 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3346      	adds	r3, #70	; 0x46
 8002aa2:	330e      	adds	r3, #14
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff f92b 	bl	8001d00 <ucg_ccs_step>
      ucg_ccs_step(ucg->arg.ccs_line+2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3346      	adds	r3, #70	; 0x46
 8002aae:	331c      	adds	r3, #28
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f925 	bl	8001d00 <ucg_ccs_step>
    for( i = 0; i < ucg->arg.len; i++ )
 8002ab6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	82bb      	strh	r3, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002ac8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	dbcd      	blt.n	8002a6c <ucg_handle_st7735_l90se+0xd0>
    }
    ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fcd0 	bl	8002478 <ucg_com_SetCSLineStatus>
    return 1;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <ucg_handle_st7735_l90se+0x142>
  }
  return 0;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	08004cc0 	.word	0x08004cc0
 8002aec:	08004ce0 	.word	0x08004ce0
 8002af0:	08004d04 	.word	0x08004d04
 8002af4:	08004d28 	.word	0x08004d28

08002af8 <ucg_dev_ic_st7735_18>:
	UCG_CS(1),					/* disable chip */
	UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	460b      	mov	r3, r1
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002b06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b0a:	3b0a      	subs	r3, #10
 8002b0c:	2b0b      	cmp	r3, #11
 8002b0e:	d85f      	bhi.n	8002bd0 <ucg_dev_ic_st7735_18+0xd8>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <ucg_dev_ic_st7735_18+0x20>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b49 	.word	0x08002b49
 8002b1c:	08002b63 	.word	0x08002b63
 8002b20:	08002bd1 	.word	0x08002bd1
 8002b24:	08002bd1 	.word	0x08002bd1
 8002b28:	08002bd1 	.word	0x08002bd1
 8002b2c:	08002b6f 	.word	0x08002b6f
 8002b30:	08002bd1 	.word	0x08002bd1
 8002b34:	08002bd1 	.word	0x08002bd1
 8002b38:	08002bd1 	.word	0x08002bd1
 8002b3c:	08002bd1 	.word	0x08002bd1
 8002b40:	08002b7f 	.word	0x08002b7f
 8002b44:	08002bc7 	.word	0x08002bc7
  {
    case UCG_MSG_DEV_POWER_UP:
      /* setup com interface and provide information on the clock speed */
      /* of the serial and parallel interface. Values are nanoseconds. */
	  ucg->display_offset.x = 2;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	841a      	strh	r2, [r3, #32]
	  ucg->display_offset.y = 1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	845a      	strh	r2, [r3, #34]	; 0x22
      return ucg_com_PowerUp(ucg, 100, 66);
 8002b54:	2242      	movs	r2, #66	; 0x42
 8002b56:	2164      	movs	r1, #100	; 0x64
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff fbdc 	bl	8002316 <ucg_com_PowerUp>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	e03e      	b.n	8002be0 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DEV_POWER_DOWN:
      ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
 8002b62:	4921      	ldr	r1, [pc, #132]	; (8002be8 <ucg_dev_ic_st7735_18+0xf0>)
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff fd3d 	bl	80025e4 <ucg_com_SendCmdSeq>
      return 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e038      	b.n	8002be0 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	805a      	strh	r2, [r3, #2]
      return 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e030      	b.n	8002be0 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_PIXEL:
      if ( ucg_clip_is_pixel_visible(ucg) !=0 )
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff f9e7 	bl	8001f52 <ucg_clip_is_pixel_visible>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01b      	beq.n	8002bc2 <ucg_dev_ic_st7735_18+0xca>
      {
	uint8_t c[3];
	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_seq);	
 8002b8a:	4918      	ldr	r1, [pc, #96]	; (8002bec <ucg_dev_ic_st7735_18+0xf4>)
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff fd29 	bl	80025e4 <ucg_com_SendCmdSeq>
	c[0] = ucg->arg.pixel.rgb.color[0];
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b98:	753b      	strb	r3, [r7, #20]
	c[1] = ucg->arg.pixel.rgb.color[1];
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ba0:	757b      	strb	r3, [r7, #21]
	c[2] = ucg->arg.pixel.rgb.color[2];
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002ba8:	75bb      	strb	r3, [r7, #22]
	ucg_com_SendRepeat3Bytes(ucg, 1, c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	69dc      	ldr	r4, [r3, #28]
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2113      	movs	r1, #19
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	47a0      	blx	r4
	ucg_com_SetCSLineStatus(ucg, 1);		/* disable chip */
 8002bba:	2101      	movs	r1, #1
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fc5b 	bl	8002478 <ucg_com_SetCSLineStatus>
      }
      return 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00c      	b.n	8002be0 <ucg_dev_ic_st7735_18+0xe8>
    case UCG_MSG_DRAW_L90FX:
      //ucg_handle_l90fx(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90fx(ucg);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fe7a 	bl	80028c0 <ucg_handle_st7735_l90fx>
      return 1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <ucg_dev_ic_st7735_18+0xe8>
    /*
    case UCG_MSG_DRAW_L90SE:
      return ucg->ext_cb(ucg, msg, data);
    */
  }
  return ucg_dev_default_cb(ucg, msg, data);  
 8002bd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff fe41 	bl	8002860 <ucg_dev_default_cb>
 8002bde:	4603      	mov	r3, r0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	08004d4c 	.word	0x08004d4c
 8002bec:	08004ca0 	.word	0x08004ca0

08002bf0 <ucg_ext_st7735_18>:

ucg_int_t ucg_ext_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002bfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c02:	2b17      	cmp	r3, #23
 8002c04:	d103      	bne.n	8002c0e <ucg_ext_st7735_18+0x1e>
  {
    case UCG_MSG_DRAW_L90SE:
      //ucg_handle_l90se(ucg, ucg_dev_ic_st7735_18);
      ucg_handle_st7735_l90se(ucg);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff fec8 	bl	800299c <ucg_handle_st7735_l90se>
      break;
 8002c0c:	bf00      	nop
  }
  return 1;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <ucg_PowerDown>:

#include "ucg.h"
#include <stddef.h>

void ucg_PowerDown(ucg_t *ucg)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if ( ucg->is_power_up != 0 )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <ucg_PowerDown+0x2c>
  {
    ucg->device_cb(ucg, UCG_MSG_DEV_POWER_DOWN, NULL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	210b      	movs	r1, #11
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4798      	blx	r3
    ucg->is_power_up = 0;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	7813      	ldrb	r3, [r2, #0]
 8002c3e:	f36f 0300 	bfc	r3, #0, #1
 8002c42:	7013      	strb	r3, [r2, #0]
  }
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <ucg_PowerUp>:

ucg_int_t ucg_PowerUp(ucg_t *ucg)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  ucg_int_t r;
  /* power down first. will do nothing if power is already down */
  ucg_PowerDown(ucg);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ffdf 	bl	8002c18 <ucg_PowerDown>
  /* now try to power up the display */
  r = ucg->device_cb(ucg, UCG_MSG_DEV_POWER_UP, NULL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	210a      	movs	r1, #10
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	81fb      	strh	r3, [r7, #14]
  if ( r != 0 )
 8002c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <ucg_PowerUp+0x30>
  {
    ucg->is_power_up = 1;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	7813      	ldrb	r3, [r2, #0]
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	7013      	strb	r3, [r2, #0]
  }
  return r;
 8002c7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <ucg_SetClipBox>:

void ucg_SetClipBox(ucg_t *ucg, ucg_box_t *clip_box)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  ucg->device_cb(ucg, UCG_MSG_SET_CLIP_BOX, (void *)(clip_box));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	210c      	movs	r1, #12
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ucg_SetMaxClipRange>:
  clip_box.size.h = h;
  ucg_SetClipBox(ucg, &clip_box);
}

void ucg_SetMaxClipRange(ucg_t *ucg)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  ucg_box_t new_clip_box;
  new_clip_box.size = ucg->dimension;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	f107 030c 	add.w	r3, r7, #12
 8002cb4:	3202      	adds	r2, #2
 8002cb6:	6810      	ldr	r0, [r2, #0]
 8002cb8:	6018      	str	r0, [r3, #0]
  new_clip_box.ul.x = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	813b      	strh	r3, [r7, #8]
  new_clip_box.ul.y = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	817b      	strh	r3, [r7, #10]
  ucg_SetClipBox(ucg, &new_clip_box);
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ffdd 	bl	8002c88 <ucg_SetClipBox>
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ucg_GetDimension>:
/* 
  Query the display dimension from the driver, reset clip window to maximum 
  new dimension
*/
void ucg_GetDimension(ucg_t *ucg)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_GET_DIMENSION, &(ucg->dimension));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	3202      	adds	r2, #2
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
  ucg_SetMaxClipRange(ucg);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffda 	bl	8002ca6 <ucg_SetMaxClipRange>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <ucg_DrawL90FXWithArg>:
{
  ucg->device_cb(ucg, UCG_MSG_DRAW_PIXEL, NULL);
}

void ucg_DrawL90FXWithArg(ucg_t *ucg)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  ucg->device_cb(ucg, UCG_MSG_DRAW_L90FX, &(ucg->arg));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	3224      	adds	r2, #36	; 0x24
 8002d0a:	2115      	movs	r1, #21
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <ucg_dev_st7735_18x128x128>:
  UCG_CS(1),					/* disable chip */
  UCG_END(),					/* end of sequence */
};

ucg_int_t ucg_dev_st7735_18x128x128(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	460b      	mov	r3, r1
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8002d26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d021      	beq.n	8002d72 <ucg_dev_st7735_18x128x128+0x5a>
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	dc27      	bgt.n	8002d82 <ucg_dev_st7735_18x128x128+0x6a>
 8002d32:	2b0a      	cmp	r3, #10
 8002d34:	d002      	beq.n	8002d3c <ucg_dev_st7735_18x128x128+0x24>
 8002d36:	2b0b      	cmp	r3, #11
 8002d38:	d012      	beq.n	8002d60 <ucg_dev_st7735_18x128x128+0x48>
 8002d3a:	e022      	b.n	8002d82 <ucg_dev_st7735_18x128x128+0x6a>
  {
    case UCG_MSG_DEV_POWER_UP:
      /* 1. Call to the controller procedures to setup the com interface */
      if ( ucg_dev_ic_st7735_18(ucg, msg, data) == 0 )
 8002d3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4619      	mov	r1, r3
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fed7 	bl	8002af8 <ucg_dev_ic_st7735_18>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <ucg_dev_st7735_18x128x128+0x3c>
	return 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e01e      	b.n	8002d92 <ucg_dev_st7735_18x128x128+0x7a>

      /* 2. Send specific init sequence for this display module */
      ucg_com_SendCmdSeq(ucg, ucg_tft_128x160_st7735_init_seq);
 8002d54:	4911      	ldr	r1, [pc, #68]	; (8002d9c <ucg_dev_st7735_18x128x128+0x84>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff fc44 	bl	80025e4 <ucg_com_SendCmdSeq>
      
      return 1;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e018      	b.n	8002d92 <ucg_dev_st7735_18x128x128+0x7a>
      
    case UCG_MSG_DEV_POWER_DOWN:
      /* let do power down by the conroller procedures */
      return ucg_dev_ic_st7735_18(ucg, msg, data);  
 8002d60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	4619      	mov	r1, r3
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff fec5 	bl	8002af8 <ucg_dev_ic_st7735_18>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	e00f      	b.n	8002d92 <ucg_dev_st7735_18x128x128+0x7a>
    
    case UCG_MSG_GET_DIMENSION:
      ((ucg_wh_t *)data)->w = 128;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	801a      	strh	r2, [r3, #0]
      ((ucg_wh_t *)data)->h = 128;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	805a      	strh	r2, [r3, #2]
      return 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e007      	b.n	8002d92 <ucg_dev_st7735_18x128x128+0x7a>
  }
  
  /* all other messages are handled by the controller procedures */
  return ucg_dev_ic_st7735_18(ucg, msg, data);  
 8002d82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f7ff feb4 	bl	8002af8 <ucg_dev_ic_st7735_18>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	08004d54 	.word	0x08004d54

08002da0 <ucg_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE;
static uint8_t ucg_font_get_byte(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	607b      	str	r3, [r7, #4]
  return ucg_pgm_read( (ucg_pgm_uint8_t *)font );  
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	781b      	ldrb	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <ucg_font_get_word>:

static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset) UCG_NOINLINE; 
static uint16_t ucg_font_get_word(const ucg_fntpgm_uint8_t *font, uint8_t offset)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	607b      	str	r3, [r7, #4]
    pos = ucg_pgm_read( (ucg_pgm_uint8_t *)font );
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	81fb      	strh	r3, [r7, #14]
    font++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3301      	adds	r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8002de4:	89fb      	ldrh	r3, [r7, #14]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	81fb      	strh	r3, [r7, #14]
    pos += ucg_pgm_read( (ucg_pgm_uint8_t *)font);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	89fb      	ldrh	r3, [r7, #14]
 8002df2:	4413      	add	r3, r2
 8002df4:	81fb      	strh	r3, [r7, #14]
    return pos;
 8002df6:	89fb      	ldrh	r3, [r7, #14]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <ucg_read_font_info>:

/*========================================================================*/
/* new font format */
void ucg_read_font_info(ucg_font_info_t *font_info, const ucg_fntpgm_uint8_t *font)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = ucg_font_get_byte(font, 0);
 8002e0e:	2100      	movs	r1, #0
 8002e10:	6838      	ldr	r0, [r7, #0]
 8002e12:	f7ff ffc5 	bl	8002da0 <ucg_font_get_byte>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = ucg_font_get_byte(font, 1);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	6838      	ldr	r0, [r7, #0]
 8002e22:	f7ff ffbd 	bl	8002da0 <ucg_font_get_byte>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = ucg_font_get_byte(font, 2);
 8002e2e:	2102      	movs	r1, #2
 8002e30:	6838      	ldr	r0, [r7, #0]
 8002e32:	f7ff ffb5 	bl	8002da0 <ucg_font_get_byte>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = ucg_font_get_byte(font, 3);
 8002e3e:	2103      	movs	r1, #3
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	f7ff ffad 	bl	8002da0 <ucg_font_get_byte>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = ucg_font_get_byte(font, 4);
 8002e4e:	2104      	movs	r1, #4
 8002e50:	6838      	ldr	r0, [r7, #0]
 8002e52:	f7ff ffa5 	bl	8002da0 <ucg_font_get_byte>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = ucg_font_get_byte(font, 5);
 8002e5e:	2105      	movs	r1, #5
 8002e60:	6838      	ldr	r0, [r7, #0]
 8002e62:	f7ff ff9d 	bl	8002da0 <ucg_font_get_byte>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = ucg_font_get_byte(font, 6);
 8002e6e:	2106      	movs	r1, #6
 8002e70:	6838      	ldr	r0, [r7, #0]
 8002e72:	f7ff ff95 	bl	8002da0 <ucg_font_get_byte>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = ucg_font_get_byte(font, 7);
 8002e7e:	2107      	movs	r1, #7
 8002e80:	6838      	ldr	r0, [r7, #0]
 8002e82:	f7ff ff8d 	bl	8002da0 <ucg_font_get_byte>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = ucg_font_get_byte(font, 8);
 8002e8e:	2108      	movs	r1, #8
 8002e90:	6838      	ldr	r0, [r7, #0]
 8002e92:	f7ff ff85 	bl	8002da0 <ucg_font_get_byte>
 8002e96:	4603      	mov	r3, r0
 8002e98:	461a      	mov	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = ucg_font_get_byte(font, 9);
 8002e9e:	2109      	movs	r1, #9
 8002ea0:	6838      	ldr	r0, [r7, #0]
 8002ea2:	f7ff ff7d 	bl	8002da0 <ucg_font_get_byte>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	b25a      	sxtb	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = ucg_font_get_byte(font, 10);
 8002eae:	210a      	movs	r1, #10
 8002eb0:	6838      	ldr	r0, [r7, #0]
 8002eb2:	f7ff ff75 	bl	8002da0 <ucg_font_get_byte>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	b25a      	sxtb	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = ucg_font_get_byte(font, 11);
 8002ebe:	210b      	movs	r1, #11
 8002ec0:	6838      	ldr	r0, [r7, #0]
 8002ec2:	f7ff ff6d 	bl	8002da0 <ucg_font_get_byte>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = ucg_font_get_byte(font, 12);
 8002ece:	210c      	movs	r1, #12
 8002ed0:	6838      	ldr	r0, [r7, #0]
 8002ed2:	f7ff ff65 	bl	8002da0 <ucg_font_get_byte>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	b25a      	sxtb	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = ucg_font_get_byte(font, 13);
 8002ede:	210d      	movs	r1, #13
 8002ee0:	6838      	ldr	r0, [r7, #0]
 8002ee2:	f7ff ff5d 	bl	8002da0 <ucg_font_get_byte>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	b25a      	sxtb	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = ucg_font_get_byte(font, 14);
 8002eee:	210e      	movs	r1, #14
 8002ef0:	6838      	ldr	r0, [r7, #0]
 8002ef2:	f7ff ff55 	bl	8002da0 <ucg_font_get_byte>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b25a      	sxtb	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = ucg_font_get_byte(font, 15);
 8002efe:	210f      	movs	r1, #15
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f7ff ff4d 	bl	8002da0 <ucg_font_get_byte>
 8002f06:	4603      	mov	r3, r0
 8002f08:	b25a      	sxtb	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = ucg_font_get_byte(font, 16);
 8002f0e:	2110      	movs	r1, #16
 8002f10:	6838      	ldr	r0, [r7, #0]
 8002f12:	f7ff ff45 	bl	8002da0 <ucg_font_get_byte>
 8002f16:	4603      	mov	r3, r0
 8002f18:	b25a      	sxtb	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = ucg_font_get_word(font, 17);
 8002f1e:	2111      	movs	r1, #17
 8002f20:	6838      	ldr	r0, [r7, #0]
 8002f22:	f7ff ff4f 	bl	8002dc4 <ucg_font_get_word>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = ucg_font_get_word(font, 19);  
 8002f2e:	2113      	movs	r1, #19
 8002f30:	6838      	ldr	r0, [r7, #0]
 8002f32:	f7ff ff47 	bl	8002dc4 <ucg_font_get_word>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	829a      	strh	r2, [r3, #20]
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <ucg_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t ucg_font_decode_get_unsigned_bits(ucg_font_decode_t *f, uint8_t cnt) 
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7b1b      	ldrb	r3, [r3, #12]
 8002f56:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) );  
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	7b7b      	ldrb	r3, [r7, #13]
 8002f64:	fa42 f303 	asr.w	r3, r2, r3
 8002f68:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8002f6a:	7b7b      	ldrb	r3, [r7, #13]
 8002f6c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8002f6e:	7bba      	ldrb	r2, [r7, #14]
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	4413      	add	r3, r2
 8002f74:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8002f76:	7bbb      	ldrb	r3, [r7, #14]
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	d91a      	bls.n	8002fb2 <ucg_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002f80:	7b3a      	ldrb	r2, [r7, #12]
 8002f82:	7b7b      	ldrb	r3, [r7, #13]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= ucg_pgm_read( (ucg_pgm_uint8_t *)(f->decode_ptr) ) << (s);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	7b3b      	ldrb	r3, [r7, #12]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	b25a      	sxtb	r2, r3
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b25b      	sxtb	r3, r3
 8002faa:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002fac:	7bbb      	ldrb	r3, [r7, #14]
 8002fae:	3b08      	subs	r3, #8
 8002fb0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7bba      	ldrb	r2, [r7, #14]
 8002fcc:	731a      	strb	r2, [r3, #12]
  return val;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <ucg_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t ucg_font_decode_get_signed_bits(ucg_font_decode_t *f, uint8_t cnt)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt);
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ffaa 	bl	8002f46 <ucg_font_decode_get_unsigned_bits>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003000:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	73fb      	strb	r3, [r7, #15]
  return v;
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)ucg_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <ucg_add_vector_y>:
}
*/

static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_y(ucg_int_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003022:	b490      	push	{r4, r7}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4604      	mov	r4, r0
 800302a:	4608      	mov	r0, r1
 800302c:	4611      	mov	r1, r2
 800302e:	461a      	mov	r2, r3
 8003030:	4623      	mov	r3, r4
 8003032:	80fb      	strh	r3, [r7, #6]
 8003034:	4603      	mov	r3, r0
 8003036:	717b      	strb	r3, [r7, #5]
 8003038:	460b      	mov	r3, r1
 800303a:	713b      	strb	r3, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d016      	beq.n	8003074 <ucg_add_vector_y+0x52>
 8003046:	2b02      	cmp	r3, #2
 8003048:	dc1c      	bgt.n	8003084 <ucg_add_vector_y+0x62>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <ucg_add_vector_y+0x32>
 800304e:	2b01      	cmp	r3, #1
 8003050:	d008      	beq.n	8003064 <ucg_add_vector_y+0x42>
 8003052:	e017      	b.n	8003084 <ucg_add_vector_y+0x62>
  {
    case 0:
      dy += y;
 8003054:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003058:	b29a      	uxth	r2, r3
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	4413      	add	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	80fb      	strh	r3, [r7, #6]
      break;
 8003062:	e017      	b.n	8003094 <ucg_add_vector_y+0x72>
    case 1:
      dy += x;
 8003064:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003068:	b29a      	uxth	r2, r3
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	4413      	add	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	80fb      	strh	r3, [r7, #6]
      break;
 8003072:	e00f      	b.n	8003094 <ucg_add_vector_y+0x72>
    case 2:
      dy -= y;
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800307a:	b29b      	uxth	r3, r3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	b29b      	uxth	r3, r3
 8003080:	80fb      	strh	r3, [r7, #6]
      break;
 8003082:	e007      	b.n	8003094 <ucg_add_vector_y+0x72>
    default:
      dy -= x;
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800308a:	b29b      	uxth	r3, r3
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	80fb      	strh	r3, [r7, #6]
      break;      
 8003092:	bf00      	nop
  }
  return dy;
 8003094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bc90      	pop	{r4, r7}
 80030a0:	4770      	bx	lr

080030a2 <ucg_add_vector_x>:

static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir) UCG_NOINLINE;
static ucg_int_t ucg_add_vector_x(ucg_int_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80030a2:	b490      	push	{r4, r7}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4604      	mov	r4, r0
 80030aa:	4608      	mov	r0, r1
 80030ac:	4611      	mov	r1, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	4623      	mov	r3, r4
 80030b2:	80fb      	strh	r3, [r7, #6]
 80030b4:	4603      	mov	r3, r0
 80030b6:	717b      	strb	r3, [r7, #5]
 80030b8:	460b      	mov	r3, r1
 80030ba:	713b      	strb	r3, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d016      	beq.n	80030f4 <ucg_add_vector_x+0x52>
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	dc1c      	bgt.n	8003104 <ucg_add_vector_x+0x62>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <ucg_add_vector_x+0x32>
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d008      	beq.n	80030e4 <ucg_add_vector_x+0x42>
 80030d2:	e017      	b.n	8003104 <ucg_add_vector_x+0x62>
  {
    case 0:
      dx += x;
 80030d4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	4413      	add	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	80fb      	strh	r3, [r7, #6]
      break;
 80030e2:	e017      	b.n	8003114 <ucg_add_vector_x+0x72>
    case 1:
      dx -= y;
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	80fb      	strh	r3, [r7, #6]
      break;
 80030f2:	e00f      	b.n	8003114 <ucg_add_vector_x+0x72>
    case 2:
      dx -= x;
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	b29b      	uxth	r3, r3
 8003100:	80fb      	strh	r3, [r7, #6]
      break;
 8003102:	e007      	b.n	8003114 <ucg_add_vector_x+0x72>
    default:
      dx += y;
 8003104:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003108:	b29a      	uxth	r2, r3
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4413      	add	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	80fb      	strh	r3, [r7, #6]
      break;      
 8003112:	bf00      	nop
  }
  return dx;
 8003114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bc90      	pop	{r4, r7}
 8003120:	4770      	bx	lr

08003122 <ucg_font_decode_len>:
  Called by:
    ucg_font_decode_glyph()
*/
/* optimized */
void ucg_font_decode_len(ucg_t *ucg, uint8_t len, uint8_t is_foreground)
{
 8003122:	b590      	push	{r4, r7, lr}
 8003124:	b089      	sub	sp, #36	; 0x24
 8003126:	af02      	add	r7, sp, #8
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	70fb      	strb	r3, [r7, #3]
 800312e:	4613      	mov	r3, r2
 8003130:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  ucg_int_t x, y;
  
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3380      	adds	r3, #128	; 0x80
 8003136:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003142:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800314a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003152:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	7d7b      	ldrb	r3, [r7, #21]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003160:	7dfa      	ldrb	r2, [r7, #23]
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	429a      	cmp	r2, r3
 8003166:	d201      	bcs.n	800316c <ucg_font_decode_len+0x4a>
      current = cnt;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //ucg_font_decode_draw_pixel(ucg, lx, ly, current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	889b      	ldrh	r3, [r3, #4]
 8003170:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	88db      	ldrh	r3, [r3, #6]
 8003176:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
    x = ucg_add_vector_x(x, lx, ly, decode->dir);
 8003178:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800317c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	7b9b      	ldrb	r3, [r3, #14]
 8003184:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003188:	f7ff ff8b 	bl	80030a2 <ucg_add_vector_x>
 800318c:	4603      	mov	r3, r0
 800318e:	81bb      	strh	r3, [r7, #12]
    y = ucg_add_vector_y(y, lx, ly, decode->dir);
 8003190:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003194:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	7b9b      	ldrb	r3, [r3, #14]
 800319c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80031a0:	f7ff ff3f 	bl	8003022 <ucg_add_vector_y>
 80031a4:	4603      	mov	r3, r0
 80031a6:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80031a8:	78bb      	ldrb	r3, [r7, #2]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <ucg_font_decode_len+0xae>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 0);
 80031ae:	7dbb      	ldrb	r3, [r7, #22]
 80031b0:	b218      	sxth	r0, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	7b9b      	ldrb	r3, [r3, #14]
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031bc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80031c0:	2400      	movs	r4, #0
 80031c2:	9401      	str	r4, [sp, #4]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	4603      	mov	r3, r0
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fbbf 	bl	800394c <ucg_Draw90Line>
 80031ce:	e013      	b.n	80031f8 <ucg_font_decode_len+0xd6>
    }
    else if ( decode->is_transparent == 0 )    
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	7b5b      	ldrb	r3, [r3, #13]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <ucg_font_decode_len+0xd6>
    {
      ucg_Draw90Line(ucg, x, y, current, decode->dir, 1);
 80031d8:	7dbb      	ldrb	r3, [r7, #22]
 80031da:	b218      	sxth	r0, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	7b9b      	ldrb	r3, [r3, #14]
 80031e0:	b21b      	sxth	r3, r3
 80031e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031e6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80031ea:	2401      	movs	r4, #1
 80031ec:	9401      	str	r4, [sp, #4]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	4603      	mov	r3, r0
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fbaa 	bl	800394c <ucg_Draw90Line>
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80031f8:	7dfa      	ldrb	r2, [r7, #23]
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d309      	bcc.n	8003214 <ucg_font_decode_len+0xf2>
      break;
    cnt -= rem;
 8003200:	7dfa      	ldrb	r2, [r7, #23]
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	757b      	strb	r3, [r7, #21]
    ly++;
 800320c:	7d3b      	ldrb	r3, [r7, #20]
 800320e:	3301      	adds	r3, #1
 8003210:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003212:	e79b      	b.n	800314c <ucg_font_decode_len+0x2a>
      break;
 8003214:	bf00      	nop
  }
  //ucg_font_decode_draw_pixel(ucg, x,y, cnt, is_foreground);
  lx += cnt;
 8003216:	7d7a      	ldrb	r2, [r7, #21]
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	4413      	add	r3, r2
 800321c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800321e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8003226:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	725a      	strb	r2, [r3, #9]
  
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}

08003236 <ucg_font_setup_decode>:

static void ucg_font_setup_decode(ucg_t *ucg, const uint8_t *glyph_data)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  ucg_font_decode_t *decode = &(ucg->font_decode);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3380      	adds	r3, #128	; 0x80
 8003244:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	731a      	strb	r2, [r3, #12]
  
  decode->decode_ptr += 1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	601a      	str	r2, [r3, #0]
  decode->decode_ptr += 1;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	601a      	str	r2, [r3, #0]
  
  decode->glyph_width = ucg_font_decode_get_unsigned_bits(decode, ucg->font_info.bits_per_char_width);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800326c:	4619      	mov	r1, r3
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff fe69 	bl	8002f46 <ucg_font_decode_get_unsigned_bits>
 8003274:	4603      	mov	r3, r0
 8003276:	b25a      	sxtb	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = ucg_font_decode_get_unsigned_bits(decode,ucg->font_info.bits_per_char_height);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003282:	4619      	mov	r1, r3
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff fe5e 	bl	8002f46 <ucg_font_decode_get_unsigned_bits>
 800328a:	4603      	mov	r3, r0
 800328c:	b25a      	sxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	72da      	strb	r2, [r3, #11]
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <ucg_font_decode_glyph>:
    ucg_font_decode_len()
*/
/* optimized */

int8_t ucg_font_decode_glyph(ucg_t *ucg, const uint8_t *glyph_data)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  int8_t d;
  int8_t h;
//  ucg_scan = ucg;
//  decode = &(ucg_scan->font_decode);
    
  ucg_font_setup_decode(ucg, glyph_data);
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ffc5 	bl	8003236 <ucg_font_setup_decode>
  h = ucg->font_decode.glyph_height;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 80032b2:	73fb      	strb	r3, [r7, #15]
  
  x = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_x);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f7ff fe8a 	bl	8002fdc <ucg_font_decode_get_signed_bits>
 80032c8:	4603      	mov	r3, r0
 80032ca:	73bb      	strb	r3, [r7, #14]
  y = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_char_y);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7ff fe7e 	bl	8002fdc <ucg_font_decode_get_signed_bits>
 80032e0:	4603      	mov	r3, r0
 80032e2:	737b      	strb	r3, [r7, #13]
  d = ucg_font_decode_get_signed_bits(&ucg->font_decode, ucg->font_info.bits_per_delta_x);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7ff fe72 	bl	8002fdc <ucg_font_decode_get_signed_bits>
 80032f8:	4603      	mov	r3, r0
 80032fa:	733b      	strb	r3, [r7, #12]
  
  if ( ucg->font_decode.glyph_width > 0 )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 8003302:	2b00      	cmp	r3, #0
 8003304:	dd69      	ble.n	80033da <ucg_font_decode_glyph+0x140>
  {
	ucg->font_decode.target_x = ucg_add_vector_x(ucg->font_decode.target_x, x, -(h+y), ucg->font_decode.dir);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	7b7b      	ldrb	r3, [r7, #13]
 8003310:	4413      	add	r3, r2
 8003312:	b2db      	uxtb	r3, r3
 8003314:	425b      	negs	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	b25a      	sxtb	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003320:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003324:	f7ff febd 	bl	80030a2 <ucg_add_vector_x>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ucg->font_decode.target_y = ucg_add_vector_y(ucg->font_decode.target_y, x, -(h+y), ucg->font_decode.dir);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	7b7b      	ldrb	r3, [r7, #13]
 800333c:	4413      	add	r3, r2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	425b      	negs	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	b25a      	sxtb	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800334c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003350:	f7ff fe67 	bl	8003022 <ucg_add_vector_y>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    //ucg_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

    /* reset local x/y position */
	ucg->font_decode.x = 0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	ucg->font_decode.y = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    for(;;)
    {
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7ff fde2 	bl	8002f46 <ucg_font_decode_get_unsigned_bits>
 8003382:	4603      	mov	r3, r0
 8003384:	72fb      	strb	r3, [r7, #11]
      b = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f7ff fdd6 	bl	8002f46 <ucg_font_decode_get_unsigned_bits>
 800339a:	4603      	mov	r3, r0
 800339c:	72bb      	strb	r3, [r7, #10]
      do
      {
		ucg_font_decode_len(ucg, a, 0);
 800339e:	7afb      	ldrb	r3, [r7, #11]
 80033a0:	2200      	movs	r2, #0
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff febc 	bl	8003122 <ucg_font_decode_len>
		ucg_font_decode_len(ucg, b, 1);
 80033aa:	7abb      	ldrb	r3, [r7, #10]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4619      	mov	r1, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff feb6 	bl	8003122 <ucg_font_decode_len>
      } while( ucg_font_decode_get_unsigned_bits(&ucg->font_decode, 1) != 0 );
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3380      	adds	r3, #128	; 0x80
 80033ba:	2101      	movs	r1, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fdc2 	bl	8002f46 <ucg_font_decode_get_unsigned_bits>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ea      	bne.n	800339e <ucg_font_decode_glyph+0x104>

      if ( ucg->font_decode.y >= h )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 80033ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	dd00      	ble.n	80033d8 <ucg_font_decode_glyph+0x13e>
      a = ucg_font_decode_get_unsigned_bits(&ucg->font_decode, ucg->font_info.bits_per_0);
 80033d6:	e7ca      	b.n	800336e <ucg_font_decode_glyph+0xd4>
	    break;
 80033d8:	bf00      	nop
    }
  }
  return d;
 80033da:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <ucg_font_get_glyph_data>:
    encoding: Encoding (ASCII code) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *ucg_font_get_glyph_data(ucg_t *ucg, uint8_t encoding)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	70fb      	strb	r3, [r7, #3]
  const uint8_t *font = ucg->font;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f6:	60fb      	str	r3, [r7, #12]
  font += UCG_FONT_DATA_STRUCT_SIZE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3315      	adds	r3, #21
 80033fc:	60fb      	str	r3, [r7, #12]
  
  if ( encoding >= 'a' )
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	2b60      	cmp	r3, #96	; 0x60
 8003402:	d907      	bls.n	8003414 <ucg_font_get_glyph_data+0x2e>
  {
    font += ucg->font_info.start_pos_lower_a;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	e009      	b.n	8003428 <ucg_font_get_glyph_data+0x42>
  }
  else if ( encoding >= 'A' )
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d906      	bls.n	8003428 <ucg_font_get_glyph_data+0x42>
  {
    font += ucg->font_info.start_pos_upper_A;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  }
  
  for(;;)
  {
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3301      	adds	r3, #1
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <ucg_font_get_glyph_data+0x6a>
      break;
    if ( ucg_pgm_read( (ucg_pgm_uint8_t *)font ) == encoding )
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	429a      	cmp	r2, r3
 800343a:	d101      	bne.n	8003440 <ucg_font_get_glyph_data+0x5a>
    {
      return font;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	e009      	b.n	8003454 <ucg_font_get_glyph_data+0x6e>
    }
    font += ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
    if ( ucg_pgm_read( ((ucg_pgm_uint8_t *)font) + 1 ) == 0 )
 800344e:	e7eb      	b.n	8003428 <ucg_font_get_glyph_data+0x42>
      break;
 8003450:	bf00      	nop
  }
  return NULL;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <ucg_font_draw_glyph>:

ucg_int_t ucg_font_draw_glyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	71fb      	strb	r3, [r7, #7]
  ucg_int_t dx = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	82fb      	strh	r3, [r7, #22]
  ucg->font_decode.target_x = x;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	897a      	ldrh	r2, [r7, #10]
 8003482:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  ucg->font_decode.target_y = y;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	893a      	ldrh	r2, [r7, #8]
 800348a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  //ucg->font_decode.is_transparent = is_transparent; this is already set
  ucg->font_decode.dir = dir;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	79fa      	ldrb	r2, [r7, #7]
 8003492:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  const uint8_t *glyph_data = ucg_font_get_glyph_data(ucg, encoding);
 8003496:	f897 3020 	ldrb.w	r3, [r7, #32]
 800349a:	4619      	mov	r1, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff ffa2 	bl	80033e6 <ucg_font_get_glyph_data>
 80034a2:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <ucg_font_draw_glyph+0x56>
  {
    dx = ucg_font_decode_glyph(ucg, glyph_data);
 80034aa:	6939      	ldr	r1, [r7, #16]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fef4 	bl	800329a <ucg_font_decode_glyph>
 80034b2:	4603      	mov	r3, r0
 80034b4:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80034b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <ucg_SetFontMode>:
    UCG_FONT_MODE_SOLID
    UCG_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void ucg_SetFontMode(ucg_t *ucg, uint8_t is_transparent)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	70fb      	strb	r3, [r7, #3]
  ucg->font_decode.is_transparent = is_transparent;		// new font procedures
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <ucg_DrawGlyph>:

ucg_int_t ucg_DrawGlyph(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, uint8_t encoding)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	4608      	mov	r0, r1
 80034ee:	4611      	mov	r1, r2
 80034f0:	461a      	mov	r2, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	817b      	strh	r3, [r7, #10]
 80034f6:	460b      	mov	r3, r1
 80034f8:	813b      	strh	r3, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]
  switch(dir)
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d837      	bhi.n	8003574 <ucg_DrawGlyph+0x90>
 8003504:	a201      	add	r2, pc, #4	; (adr r2, 800350c <ucg_DrawGlyph+0x28>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	0800351d 	.word	0x0800351d
 8003510:	08003533 	.word	0x08003533
 8003514:	08003549 	.word	0x08003549
 8003518:	0800355f 	.word	0x0800355f
  {
    case 0:
      y += ucg->font_calc_vref(ucg);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	4798      	blx	r3
 8003524:	4603      	mov	r3, r0
 8003526:	b29a      	uxth	r2, r3
 8003528:	893b      	ldrh	r3, [r7, #8]
 800352a:	4413      	add	r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	813b      	strh	r3, [r7, #8]
      break;
 8003530:	e020      	b.n	8003574 <ucg_DrawGlyph+0x90>
    case 1:
      x -= ucg->font_calc_vref(ucg);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	4798      	blx	r3
 800353a:	4603      	mov	r3, r0
 800353c:	897a      	ldrh	r2, [r7, #10]
 800353e:	b29b      	uxth	r3, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	817b      	strh	r3, [r7, #10]
      break;
 8003546:	e015      	b.n	8003574 <ucg_DrawGlyph+0x90>
    case 2:
      y -= ucg->font_calc_vref(ucg);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	4798      	blx	r3
 8003550:	4603      	mov	r3, r0
 8003552:	893a      	ldrh	r2, [r7, #8]
 8003554:	b29b      	uxth	r3, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	813b      	strh	r3, [r7, #8]
      break;
 800355c:	e00a      	b.n	8003574 <ucg_DrawGlyph+0x90>
    case 3:
      x += ucg->font_calc_vref(ucg);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	4798      	blx	r3
 8003566:	4603      	mov	r3, r0
 8003568:	b29a      	uxth	r2, r3
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	4413      	add	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	817b      	strh	r3, [r7, #10]
      break;
 8003572:	bf00      	nop
  }
  return ucg_font_draw_glyph(ucg, x, y, dir, encoding);
 8003574:	79f8      	ldrb	r0, [r7, #7]
 8003576:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800357a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800357e:	7e3b      	ldrb	r3, [r7, #24]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4603      	mov	r3, r0
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff ff6b 	bl	8003460 <ucg_font_draw_glyph>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <task_drawString>:

ucg_draw_string_t ucg_draw_str;

void task_drawString(void *arg)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
	ucg_int_t delta = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	81fb      	strh	r3, [r7, #14]
	ucg_t *ucg = (ucg_t *)arg;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	60bb      	str	r3, [r7, #8]

	static uint8_t next = 0;
	switch (next)
 80035a4:	4b45      	ldr	r3, [pc, #276]	; (80036bc <task_drawString+0x128>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <task_drawString+0x1e>
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d01e      	beq.n	80035ee <task_drawString+0x5a>
 80035b0:	e07b      	b.n	80036aa <task_drawString+0x116>
	{
		case 0:
			if (bufNumItems(&fontQueue) != 0)
 80035b2:	4843      	ldr	r0, [pc, #268]	; (80036c0 <task_drawString+0x12c>)
 80035b4:	f000 fb5b 	bl	8003c6e <bufNumItems>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <task_drawString+0x3a>
			{
				bufDeDat(&fontQueue, (uint8_t *)&ucg_draw_str);
 80035be:	4941      	ldr	r1, [pc, #260]	; (80036c4 <task_drawString+0x130>)
 80035c0:	483f      	ldr	r0, [pc, #252]	; (80036c0 <task_drawString+0x12c>)
 80035c2:	f000 fbef 	bl	8003da4 <bufDeDat>
				next = 1;
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <task_drawString+0x128>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
					TimerStop(idTaskScanDecodeLen);
					idTaskScanDecodeLen = NO_TIMER;
				}
				next = 0;
			}
			break;
 80035cc:	e071      	b.n	80036b2 <task_drawString+0x11e>
				if (idTaskScanDecodeLen != NO_TIMER)
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <task_drawString+0x134>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2bff      	cmp	r3, #255	; 0xff
 80035d4:	d007      	beq.n	80035e6 <task_drawString+0x52>
					TimerStop(idTaskScanDecodeLen);
 80035d6:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <task_drawString+0x134>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd ffde 	bl	800159c <TimerStop>
					idTaskScanDecodeLen = NO_TIMER;
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <task_drawString+0x134>)
 80035e2:	22ff      	movs	r2, #255	; 0xff
 80035e4:	701a      	strb	r2, [r3, #0]
				next = 0;
 80035e6:	4b35      	ldr	r3, [pc, #212]	; (80036bc <task_drawString+0x128>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
			break;
 80035ec:	e061      	b.n	80036b2 <task_drawString+0x11e>

		case 1:
			if ( *ucg_draw_str.str != '\0' )
 80035ee:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <task_drawString+0x130>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d054      	beq.n	80036a2 <task_drawString+0x10e>
			{
				delta = ucg_DrawGlyph(ucg, ucg_draw_str.x, ucg_draw_str.y, ucg_draw_str.dir, (uint8_t)*ucg_draw_str.str);
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <task_drawString+0x130>)
 80035fa:	f9b3 1000 	ldrsh.w	r1, [r3]
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <task_drawString+0x130>)
 8003600:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003604:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <task_drawString+0x130>)
 8003606:	7918      	ldrb	r0, [r3, #4]
 8003608:	4b2e      	ldr	r3, [pc, #184]	; (80036c4 <task_drawString+0x130>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	68b8      	ldr	r0, [r7, #8]
 8003614:	f7ff ff66 	bl	80034e4 <ucg_DrawGlyph>
 8003618:	4603      	mov	r3, r0
 800361a:	81fb      	strh	r3, [r7, #14]

				switch (ucg_draw_str.dir)
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <task_drawString+0x130>)
 800361e:	791b      	ldrb	r3, [r3, #4]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d837      	bhi.n	8003694 <task_drawString+0x100>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <task_drawString+0x98>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	0800363d 	.word	0x0800363d
 8003630:	08003653 	.word	0x08003653
 8003634:	08003669 	.word	0x08003669
 8003638:	0800367f 	.word	0x0800367f
				{
					case 0:
						ucg_draw_str.x += delta;
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <task_drawString+0x130>)
 800363e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003642:	b29a      	uxth	r2, r3
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	4413      	add	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	b21a      	sxth	r2, r3
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <task_drawString+0x130>)
 800364e:	801a      	strh	r2, [r3, #0]
						break;
 8003650:	e021      	b.n	8003696 <task_drawString+0x102>

					case 1:
						ucg_draw_str.y += delta;
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <task_drawString+0x130>)
 8003654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003658:	b29a      	uxth	r2, r3
 800365a:	89fb      	ldrh	r3, [r7, #14]
 800365c:	4413      	add	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	b21a      	sxth	r2, r3
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <task_drawString+0x130>)
 8003664:	805a      	strh	r2, [r3, #2]
						break;
 8003666:	e016      	b.n	8003696 <task_drawString+0x102>

					case 2:
						ucg_draw_str.x -= delta;
 8003668:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <task_drawString+0x130>)
 800366a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366e:	b29a      	uxth	r2, r3
 8003670:	89fb      	ldrh	r3, [r7, #14]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	b21a      	sxth	r2, r3
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <task_drawString+0x130>)
 800367a:	801a      	strh	r2, [r3, #0]
						break;
 800367c:	e00b      	b.n	8003696 <task_drawString+0x102>

					case 3:
						ucg_draw_str.y -= delta;
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <task_drawString+0x130>)
 8003680:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003684:	b29a      	uxth	r2, r3
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	b29b      	uxth	r3, r3
 800368c:	b21a      	sxth	r2, r3
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <task_drawString+0x130>)
 8003690:	805a      	strh	r2, [r3, #2]
						break;
 8003692:	e000      	b.n	8003696 <task_drawString+0x102>

					default:
						break;
 8003694:	bf00      	nop
				}

				ucg_draw_str.str++;
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <task_drawString+0x130>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	3301      	adds	r3, #1
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <task_drawString+0x130>)
 800369e:	6093      	str	r3, [r2, #8]
			}
			else
			{
				next = 0;
			}
			break;
 80036a0:	e007      	b.n	80036b2 <task_drawString+0x11e>
				next = 0;
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <task_drawString+0x128>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
			break;
 80036a8:	e003      	b.n	80036b2 <task_drawString+0x11e>

		default:
			next = 0;
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <task_drawString+0x128>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
			break;
 80036b0:	bf00      	nop
	}
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20001228 	.word	0x20001228
 80036c0:	2000020c 	.word	0x2000020c
 80036c4:	2000121c 	.word	0x2000121c
 80036c8:	20000010 	.word	0x20000010

080036cc <ucg_DrawString>:

ucg_int_t ucg_DrawString(ucg_t *ucg, ucg_int_t x, ucg_int_t y, uint8_t dir, const char *str)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	817b      	strh	r3, [r7, #10]
 80036de:	460b      	mov	r3, r1
 80036e0:	813b      	strh	r3, [r7, #8]
 80036e2:	4613      	mov	r3, r2
 80036e4:	71fb      	strb	r3, [r7, #7]
	ucg_int_t sum = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	83fb      	strh	r3, [r7, #30]
	ucg_draw_string_t drawStr;

	drawStr.x = x;
 80036ea:	897b      	ldrh	r3, [r7, #10]
 80036ec:	823b      	strh	r3, [r7, #16]
	drawStr.y = y;
 80036ee:	893b      	ldrh	r3, [r7, #8]
 80036f0:	827b      	strh	r3, [r7, #18]
	drawStr.dir = dir;
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	753b      	strb	r3, [r7, #20]
    drawStr.str = (char *)str;
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	61bb      	str	r3, [r7, #24]

	bufEnDat(&fontQueue, (uint8_t *)&drawStr);
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	4619      	mov	r1, r3
 8003700:	480c      	ldr	r0, [pc, #48]	; (8003734 <ucg_DrawString+0x68>)
 8003702:	f000 faff 	bl	8003d04 <bufEnDat>

	/* decode glyph */
	if (idTaskScanDecodeLen == NO_TIMER)
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <ucg_DrawString+0x6c>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2bff      	cmp	r3, #255	; 0xff
 800370c:	d10b      	bne.n	8003726 <ucg_DrawString+0x5a>
	{
		idTaskScanDecodeLen = TimerStart("ucg_DrawString", 30, TIMER_REPEAT_FOREVER, task_drawString, ucg);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <ucg_DrawString+0x70>)
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	211e      	movs	r1, #30
 8003718:	4809      	ldr	r0, [pc, #36]	; (8003740 <ucg_DrawString+0x74>)
 800371a:	f7fd fedd 	bl	80014d8 <TimerStart>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <ucg_DrawString+0x6c>)
 8003724:	701a      	strb	r2, [r3, #0]
	}

	return sum;
 8003726:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2000020c 	.word	0x2000020c
 8003738:	20000010 	.word	0x20000010
 800373c:	08003595 	.word	0x08003595
 8003740:	08004c64 	.word	0x08004c64

08003744 <ucg_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void ucg_UpdateRefHeight(ucg_t *ucg)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if ( ucg->font == NULL )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003750:	2b00      	cmp	r3, #0
 8003752:	d05d      	beq.n	8003810 <ucg_UpdateRefHeight+0xcc>
    return;
  ucg->font_ref_ascent = ucg->font_info.ascent_A;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  ucg->font_ref_descent = ucg->font_info.descent_g;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
  if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_TEXT )
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04d      	beq.n	8003812 <ucg_UpdateRefHeight+0xce>
  {
  }
  else if ( ucg->font_height_mode == UCG_FONT_HEIGHT_MODE_XTEXT )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800377c:	2b01      	cmp	r3, #1
 800377e:	d11c      	bne.n	80037ba <ucg_UpdateRefHeight+0x76>
  {
    if ( ucg->font_ref_ascent < ucg->font_info.ascent_para )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 800378c:	429a      	cmp	r2, r3
 800378e:	da05      	bge.n	800379c <ucg_UpdateRefHeight+0x58>
      ucg->font_ref_ascent = ucg->font_info.ascent_para;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.descent_para )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80037a8:	429a      	cmp	r2, r3
 80037aa:	dd32      	ble.n	8003812 <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.descent_para;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80037b8:	e02b      	b.n	8003812 <ucg_UpdateRefHeight+0xce>
  }
  else
  {
    if ( ucg->font_ref_ascent < ucg->font_info.max_char_height+ucg->font_info.y_offset )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 80037c0:	461a      	mov	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 80037c8:	4619      	mov	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80037d0:	440b      	add	r3, r1
 80037d2:	429a      	cmp	r2, r3
 80037d4:	da0d      	bge.n	80037f2 <ucg_UpdateRefHeight+0xae>
      ucg->font_ref_ascent = ucg->font_info.max_char_height+ucg->font_info.y_offset;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	b25a      	sxtb	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    if ( ucg->font_ref_descent > ucg->font_info.y_offset )
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80037fe:	429a      	cmp	r2, r3
 8003800:	dd07      	ble.n	8003812 <ucg_UpdateRefHeight+0xce>
      ucg->font_ref_descent = ucg->font_info.y_offset;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800380e:	e000      	b.n	8003812 <ucg_UpdateRefHeight+0xce>
    return;
 8003810:	bf00      	nop
  }  
}
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <ucg_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

ucg_int_t ucg_font_calc_vref_font(ucg_t *ucg)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return 0;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <ucg_SetFontPosBaseline>:

void ucg_SetFontPosBaseline(ucg_t *ucg)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  ucg->font_calc_vref = ucg_font_calc_vref_font;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a04      	ldr	r2, [pc, #16]	; (8003850 <ucg_SetFontPosBaseline+0x1c>)
 8003840:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	0800381d 	.word	0x0800381d

08003854 <ucg_SetFont>:
}

/*===============================================*/

void ucg_SetFont(ucg_t *ucg, const ucg_fntpgm_uint8_t  *font)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  if ( ucg->font != font )
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d012      	beq.n	800388e <ucg_SetFont+0x3a>
  {
    ucg->font = font;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	679a      	str	r2, [r3, #120]	; 0x78
    ucg_read_font_info(&(ucg->font_info), font);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3390      	adds	r3, #144	; 0x90
 8003872:	6839      	ldr	r1, [r7, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fac5 	bl	8002e04 <ucg_read_font_info>
    ucg_UpdateRefHeight(ucg);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ff62 	bl	8003744 <ucg_UpdateRefHeight>
    //ucg_SetFontPosBaseline(ucg);

    // Init queue font
    bufInit(pQueueFont, &fontQueue, sizeof(ucg_draw_string_t), SIZE_QUEUE_DATA_FONT);
 8003880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003884:	220c      	movs	r2, #12
 8003886:	4904      	ldr	r1, [pc, #16]	; (8003898 <ucg_SetFont+0x44>)
 8003888:	4804      	ldr	r0, [pc, #16]	; (800389c <ucg_SetFont+0x48>)
 800388a:	f000 f9d5 	bl	8003c38 <bufInit>
  }
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000020c 	.word	0x2000020c
 800389c:	2000021c 	.word	0x2000021c

080038a0 <ucg_init_struct>:
uint8_t global_SREG_backup;		// used by the atomic macros
#endif


void ucg_init_struct(ucg_t *ucg)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  //memset(ucg, 0, sizeof(ucg_t));
  ucg->is_power_up = 0;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	7813      	ldrb	r3, [r2, #0]
 80038ac:	f36f 0300 	bfc	r3, #0, #1
 80038b0:	7013      	strb	r3, [r2, #0]
  ucg->rotate_chain_device_cb = 0;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
  ucg->arg.scale = 1;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	865a      	strh	r2, [r3, #50]	; 0x32
  //ucg->display_offset.x = 0;
  //ucg->display_offset.y = 0;
  ucg->font = 0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	679a      	str	r2, [r3, #120]	; 0x78
  //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
  ucg->font_decode.is_transparent = 1;  // new font procedures
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  
  ucg->com_initial_change_sent = 0;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
  ucg->com_status = 0;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  ucg->com_cfg_cd = 0;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <ucg_Init>:


ucg_int_t ucg_Init(ucg_t *ucg, ucg_dev_fnptr device_cb, ucg_dev_fnptr ext_cb, ucg_com_fnptr com_cb)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  ucg_int_t r;
  ucg_init_struct(ucg);
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ffce 	bl	80038a0 <ucg_init_struct>
  if ( ext_cb == (ucg_dev_fnptr)0 )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <ucg_Init+0x22>
    ucg->ext_cb = ucg_ext_none;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <ucg_Init+0x58>)
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e002      	b.n	8003918 <ucg_Init+0x28>
 else 
    ucg->ext_cb = ext_cb;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]
  ucg->device_cb = device_cb;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	609a      	str	r2, [r3, #8]
  ucg->com_cb = com_cb;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	61da      	str	r2, [r3, #28]
  ucg_SetFontPosBaseline(ucg);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff ff85 	bl	8003834 <ucg_SetFontPosBaseline>
  r = ucg_PowerUp(ucg);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff f98e 	bl	8002c4c <ucg_PowerUp>
 8003930:	4603      	mov	r3, r0
 8003932:	82fb      	strh	r3, [r7, #22]
  ucg_GetDimension(ucg);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff f9ce 	bl	8002cd6 <ucg_GetDimension>
  return r;
 800393a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	080028a5 	.word	0x080028a5

0800394c <ucg_Draw90Line>:
*/

#include "ucg.h"

void ucg_Draw90Line(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len, ucg_int_t dir, ucg_int_t col_idx)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	461a      	mov	r2, r3
 800395a:	4603      	mov	r3, r0
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	460b      	mov	r3, r1
 8003960:	813b      	strh	r3, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  ucg->arg.pixel.rgb.color[0] = ucg->arg.rgb[col_idx].color[0];
 8003966:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	440b      	add	r3, r1
 8003974:	333a      	adds	r3, #58	; 0x3a
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ucg->arg.pixel.rgb.color[1] = ucg->arg.rgb[col_idx].color[1];
 800397e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003982:	68f9      	ldr	r1, [r7, #12]
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	440b      	add	r3, r1
 800398c:	333b      	adds	r3, #59	; 0x3b
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ucg->arg.pixel.rgb.color[2] = ucg->arg.rgb[col_idx].color[2];
 8003996:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	333c      	adds	r3, #60	; 0x3c
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  ucg->arg.pixel.pos.x = x;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	897a      	ldrh	r2, [r7, #10]
 80039b2:	849a      	strh	r2, [r3, #36]	; 0x24
  ucg->arg.pixel.pos.y = y;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	893a      	ldrh	r2, [r7, #8]
 80039b8:	84da      	strh	r2, [r3, #38]	; 0x26
  ucg->arg.len = len;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	859a      	strh	r2, [r3, #44]	; 0x2c
  ucg->arg.dir = dir;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8b3a      	ldrh	r2, [r7, #24]
 80039c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  ucg_DrawL90FXWithArg(ucg);
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff f997 	bl	8002cfa <ucg_DrawL90FXWithArg>
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <ucg_DrawHLine>:

void ucg_DrawHLine(ucg_t *ucg, ucg_int_t x, ucg_int_t y, ucg_int_t len)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  ucg_Draw90Line(ucg, x, y, len, 0, 0);
 80039ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80039f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80039fa:	2000      	movs	r0, #0
 80039fc:	9001      	str	r0, [sp, #4]
 80039fe:	2000      	movs	r0, #0
 8003a00:	9000      	str	r0, [sp, #0]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff ffa2 	bl	800394c <ucg_Draw90Line>
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <ucg_SetColor>:
*/

#include "ucg.h"

void ucg_SetColor(ucg_t *ucg, uint8_t idx, uint8_t r, uint8_t g, uint8_t b)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	70fb      	strb	r3, [r7, #3]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70bb      	strb	r3, [r7, #2]
 8003a26:	4613      	mov	r3, r2
 8003a28:	707b      	strb	r3, [r7, #1]
  //ucg->arg.pixel.rgb.color[0] = r;
  //ucg->arg.pixel.rgb.color[1] = g;
  //ucg->arg.pixel.rgb.color[2] = b;
  ucg->arg.rgb[idx].color[0] = r;
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	333a      	adds	r3, #58	; 0x3a
 8003a38:	78ba      	ldrb	r2, [r7, #2]
 8003a3a:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[1] = g;
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4413      	add	r3, r2
 8003a46:	440b      	add	r3, r1
 8003a48:	333b      	adds	r3, #59	; 0x3b
 8003a4a:	787a      	ldrb	r2, [r7, #1]
 8003a4c:	701a      	strb	r2, [r3, #0]
  ucg->arg.rgb[idx].color[2] = b;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	440b      	add	r3, r1
 8003a5a:	333c      	adds	r3, #60	; 0x3c
 8003a5c:	7c3a      	ldrb	r2, [r7, #16]
 8003a5e:	701a      	strb	r2, [r3, #0]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <ucg_UndoRotate>:
#include "ucg.h"
#include <assert.h>

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_UndoRotate(ucg_t *ucg)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if ( ucg->rotate_chain_device_cb != NULL )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d006      	beq.n	8003a8a <ucg_UndoRotate+0x1e>
  {
    ucg->device_cb = ucg->rotate_chain_device_cb;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
    ucg->rotate_chain_device_cb = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
  }
  ucg_GetDimension(ucg);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff f923 	bl	8002cd6 <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff f908 	bl	8002ca6 <ucg_SetMaxClipRange>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <ucg_rotate_180_xy>:

/*================================================*/
/* 180 degree */

static void ucg_rotate_180_xy(ucg_t *ucg, ucg_xy_t *xy)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
    ucg_int_t x, y;
    y = ucg->rotate_dimension.h;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8adb      	ldrh	r3, [r3, #22]
 8003aac:	81fb      	strh	r3, [r7, #14]
    y -= xy->y;
 8003aae:	89fa      	ldrh	r2, [r7, #14]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	81fb      	strh	r3, [r7, #14]
    y--;
 8003abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	81fb      	strh	r3, [r7, #14]
    xy->y = y;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	89fa      	ldrh	r2, [r7, #14]
 8003ace:	805a      	strh	r2, [r3, #2]
  
    x = ucg->rotate_dimension.w;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8a9b      	ldrh	r3, [r3, #20]
 8003ad4:	81bb      	strh	r3, [r7, #12]
    x -= xy->x;
 8003ad6:	89ba      	ldrh	r2, [r7, #12]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	81bb      	strh	r3, [r7, #12]
    x--;
 8003ae6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	81bb      	strh	r3, [r7, #12]
    xy->x = x;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	89ba      	ldrh	r2, [r7, #12]
 8003af6:	801a      	strh	r2, [r3, #0]
  
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <ucg_dev_rotate180>:

ucg_int_t ucg_dev_rotate180(ucg_t *ucg, ucg_int_t msg, void *data)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	817b      	strh	r3, [r7, #10]
  switch(msg)
 8003b12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b16:	3b0c      	subs	r3, #12
 8003b18:	2b0b      	cmp	r3, #11
 8003b1a:	d866      	bhi.n	8003bea <ucg_dev_rotate180+0xe6>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <ucg_dev_rotate180+0x20>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b73 	.word	0x08003b73
 8003b28:	08003beb 	.word	0x08003beb
 8003b2c:	08003beb 	.word	0x08003beb
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003beb 	.word	0x08003beb
 8003b38:	08003beb 	.word	0x08003beb
 8003b3c:	08003beb 	.word	0x08003beb
 8003b40:	08003beb 	.word	0x08003beb
 8003b44:	08003bbb 	.word	0x08003bbb
 8003b48:	08003bbb 	.word	0x08003bbb
 8003b4c:	08003beb 	.word	0x08003beb
 8003b50:	08003bbb 	.word	0x08003bbb
  {
    case UCG_MSG_GET_DIMENSION:
      ucg->rotate_chain_device_cb(ucg, msg, &(ucg->rotate_dimension)); 
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	3214      	adds	r2, #20
 8003b5c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	4798      	blx	r3
      *((ucg_wh_t *)data) = (ucg->rotate_dimension);
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	6010      	str	r0, [r2, #0]
      return 1;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e043      	b.n	8003bfa <ucg_dev_rotate180+0xf6>
    case UCG_MSG_SET_CLIP_BOX:
      /* calculate and rotate lower right point of the clip box */
      ((ucg_box_t * )data)->ul.y += ((ucg_box_t * )data)->size.h-1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b21a      	sxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	805a      	strh	r2, [r3, #2]
      ((ucg_box_t * )data)->ul.x += ((ucg_box_t * )data)->size.w-1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	b21a      	sxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	801a      	strh	r2, [r3, #0]
      ucg_rotate_180_xy(ucg, &(((ucg_box_t * )data)->ul)); 
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7ff ff73 	bl	8003a9e <ucg_rotate_180_xy>
      /* box dimensions are the same */
      break;
 8003bb8:	e017      	b.n	8003bea <ucg_dev_rotate180+0xe6>
#ifdef UCG_MSG_DRAW_L90BF
    case UCG_MSG_DRAW_L90BF:
#endif /* UCG_MSG_DRAW_L90BF */
    case UCG_MSG_DRAW_L90SE:
    //case UCG_MSG_DRAW_L90RL:
      ucg->arg.dir+=2;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	b21a      	sxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg->arg.dir&=3;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	b21a      	sxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	85da      	strh	r2, [r3, #46]	; 0x2e
      ucg_rotate_180_xy(ucg, &(ucg->arg.pixel.pos)); 
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3324      	adds	r3, #36	; 0x24
 8003be0:	4619      	mov	r1, r3
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff ff5b 	bl	8003a9e <ucg_rotate_180_xy>
      break;
 8003be8:	bf00      	nop
  }
  return ucg->rotate_chain_device_cb(ucg, msg, data);  
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	4798      	blx	r3
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop

08003c04 <ucg_SetRotate180>:

/* Side-Effects: Update dimension and reset clip range to max */
void ucg_SetRotate180(ucg_t *ucg)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  ucg_UndoRotate(ucg);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff2d 	bl	8003a6c <ucg_UndoRotate>
  ucg->rotate_chain_device_cb = ucg->device_cb;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	611a      	str	r2, [r3, #16]
  ucg->device_cb = ucg_dev_rotate180;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <ucg_SetRotate180+0x30>)
 8003c1e:	609a      	str	r2, [r3, #8]
  ucg_GetDimension(ucg);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff f858 	bl	8002cd6 <ucg_GetDimension>
  ucg_SetMaxClipRange(ucg);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff f83d 	bl	8002ca6 <ucg_SetMaxClipRange>
}
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	08003b05 	.word	0x08003b05

08003c38 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	460b      	mov	r3, r1
 8003c48:	71fb      	strb	r3, [r7, #7]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	88ba      	ldrh	r2, [r7, #4]
 8003c52:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	79fa      	ldrb	r2, [r7, #7]
 8003c58:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8003c60:	68b8      	ldr	r0, [r7, #8]
 8003c62:	f000 f836 	bl	8003cd2 <bufFlush>
}
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	885b      	ldrh	r3, [r3, #2]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	885a      	ldrh	r2, [r3, #2]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	bf2c      	ite	cs
 8003c9a:	2301      	movcs	r3, #1
 8003c9c:	2300      	movcc	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	88da      	ldrh	r2, [r3, #6]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	891b      	ldrh	r3, [r3, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68d8      	ldr	r0, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f000 f899 	bl	8003e2e <memsetl>
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0e:	b672      	cpsid	i
}
 8003d10:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
 8003d16:	e021      	b.n	8003d5c <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	441a      	add	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	88c9      	ldrh	r1, [r1, #6]
 8003d26:	440b      	add	r3, r1
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	88db      	ldrh	r3, [r3, #6]
 8003d30:	3301      	adds	r3, #1
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	b21a      	sxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	4013      	ands	r3, r2
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	885b      	ldrh	r3, [r3, #2]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	791b      	ldrb	r3, [r3, #4]
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d3d8      	bcc.n	8003d18 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff8d 	bl	8003c86 <bufIsFull>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d011      	beq.n	8003d96 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	891a      	ldrh	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	791b      	ldrb	r3, [r3, #4]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	b21a      	sxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	b21b      	sxth	r3, r3
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b21b      	sxth	r3, r3
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d96:	b662      	cpsie	i
}
 8003d98:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dae:	b672      	cpsid	i
}
 8003db0:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ff7a 	bl	8003cac <bufIsEmpty>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc4:	b662      	cpsie	i
}
 8003dc6:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e02c      	b.n	8003e26 <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	e021      	b.n	8003e16 <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	8912      	ldrh	r2, [r2, #8]
 8003dda:	441a      	add	r2, r3
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	6839      	ldr	r1, [r7, #0]
 8003de0:	440b      	add	r3, r1
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	891b      	ldrh	r3, [r3, #8]
 8003dea:	3301      	adds	r3, #1
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	b21a      	sxth	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	b21b      	sxth	r3, r3
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b21b      	sxth	r3, r3
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	885b      	ldrh	r3, [r3, #2]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	3301      	adds	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	791b      	ldrb	r3, [r3, #4]
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3d8      	bcc.n	8003dd2 <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8003e20:	b662      	cpsie	i
}
 8003e22:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	70fb      	strb	r3, [r7, #3]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8003e3e:	e004      	b.n	8003e4a <memsetl+0x1c>
        *dst++ = value;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8003e4a:	883b      	ldrh	r3, [r7, #0]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	803a      	strh	r2, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f5      	bne.n	8003e40 <memsetl+0x12>
    }    
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <Calculate_time>:
/******************************************************************************/

/******************************************************************************/
/*                              EXPORTED DATA                                 */
/******************************************************************************/
uint32_t Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent){
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
	uint32_t TimeTotal;
	if (TimeInit >= TimeCurrent){
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d304      	bcc.n	8003e7e <Calculate_time+0x1c>
		TimeTotal = TimeCurrent - TimeInit;
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e004      	b.n	8003e88 <Calculate_time+0x26>
	}else {
		TimeTotal = 0xFFFFFFFFU + TimeCurrent - TimeInit;
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
	}
	return TimeTotal;
 8003e88:	68fb      	ldr	r3, [r7, #12]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <main>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
int main(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8003e9e:	af02      	add	r7, sp, #8
	I2C1_Init();
 8003ea0:	f000 f900 	bl	80040a4 <I2C1_Init>
	TimerInit();
 8003ea4:	f7fd faf6 	bl	8001494 <TimerInit>
	SystemInit();
 8003ea8:	f7fc fdd8 	bl	8000a5c <SystemInit>
	char buffer1[256] = "b0";
 8003eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003eb4:	f243 0262 	movw	r2, #12386	; 0x3062
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	22fc      	movs	r2, #252	; 0xfc
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fa3f 	bl	8004344 <memset>
	char buffer2[256] = "b0";
 8003ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ece:	f243 0262 	movw	r2, #12386	; 0x3062
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	22fc      	movs	r2, #252	; 0xfc
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fa32 	bl	8004344 <memset>
	uint32_t Timetick = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	AppInitCommon();
 8003ee6:	f000 f8b3 	bl	8004050 <AppInitCommon>
    /* Loop forever */
	while (1){

		if (Calculate_time(Timetick, GetMilSecTick()) >= 1000){
 8003eea:	f7fd fba7 	bl	800163c <GetMilSecTick>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8003ef6:	f7ff ffb4 	bl	8003e62 <Calculate_time>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f00:	f0c0 808d 	bcc.w	800401e <main+0x186>
			I2C_Start(I2C_Direction_Transmitter);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f000 f915 	bl	8004134 <I2C_Start>
			I2C_TransmitData(0xE5);
 8003f0a:	20e5      	movs	r0, #229	; 0xe5
 8003f0c:	f000 f956 	bl	80041bc <I2C_TransmitData>
			I2C_Stop();
 8003f10:	f000 f98e 	bl	8004230 <I2C_Stop>

			I2C_Start(I2C_Direction_Receiver);
 8003f14:	2001      	movs	r0, #1
 8003f16:	f000 f90d 	bl	8004134 <I2C_Start>
			Recive_Data[0] = (I2C_Recevie_ack()<<8)*100/65536 - 6;
 8003f1a:	f000 f96b 	bl	80041f4 <I2C_Recevie_ack>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	2264      	movs	r2, #100	; 0x64
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da02      	bge.n	8003f32 <main+0x9a>
 8003f2c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003f30:	33ff      	adds	r3, #255	; 0xff
 8003f32:	141b      	asrs	r3, r3, #16
 8003f34:	3b06      	subs	r3, #6
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <main+0x1a0>)
 8003f3a:	601a      	str	r2, [r3, #0]
			I2C_Stop();
 8003f3c:	f000 f978 	bl	8004230 <I2C_Stop>

			I2C_Start(I2C_Direction_Transmitter);
 8003f40:	2000      	movs	r0, #0
 8003f42:	f000 f8f7 	bl	8004134 <I2C_Start>
			I2C_TransmitData(0xE3);
 8003f46:	20e3      	movs	r0, #227	; 0xe3
 8003f48:	f000 f938 	bl	80041bc <I2C_TransmitData>
			I2C_Stop();
 8003f4c:	f000 f970 	bl	8004230 <I2C_Stop>

			I2C_Start(I2C_Direction_Receiver);
 8003f50:	2001      	movs	r0, #1
 8003f52:	f000 f8ef 	bl	8004134 <I2C_Start>
			Recive_Data[1] = (I2C_Recevie_ack()<<8)*175.72/65536 - 46.85;
 8003f56:	f000 f94d 	bl	80041f4 <I2C_Recevie_ack>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc fae0 	bl	8000524 <__aeabi_i2d>
 8003f64:	a330      	add	r3, pc, #192	; (adr r3, 8004028 <main+0x190>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f7fc fb45 	bl	80005f8 <__aeabi_dmul>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	4b30      	ldr	r3, [pc, #192]	; (800403c <main+0x1a4>)
 8003f7c:	f7fc fc66 	bl	800084c <__aeabi_ddiv>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	a329      	add	r3, pc, #164	; (adr r3, 8004030 <main+0x198>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc f97b 	bl	8000288 <__aeabi_dsub>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f7fc fd3f 	bl	8000a1c <__aeabi_d2uiz>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <main+0x1a0>)
 8003fa2:	6053      	str	r3, [r2, #4]
			I2C_Stop();
 8003fa4:	f000 f944 	bl	8004230 <I2C_Stop>
			Timetick = GetMilSecTick();
 8003fa8:	f7fd fb48 	bl	800163c <GetMilSecTick>
 8003fac:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
			memset(buffer1,0,sizeof(buffer1));
 8003fb0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f9c2 	bl	8004344 <memset>
			sprintf(buffer1,"HUMI: %0.2d %%",Recive_Data[0]);
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <main+0x1a0>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003fc8:	491d      	ldr	r1, [pc, #116]	; (8004040 <main+0x1a8>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f99a 	bl	8004304 <siprintf>
			memset(buffer2,0,sizeof(buffer2));
 8003fd0:	1d3b      	adds	r3, r7, #4
 8003fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f9b3 	bl	8004344 <memset>
			sprintf(buffer2,"TEMP: %d oC",Recive_Data[1]);
 8003fde:	4b16      	ldr	r3, [pc, #88]	; (8004038 <main+0x1a0>)
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	4917      	ldr	r1, [pc, #92]	; (8004044 <main+0x1ac>)
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f98c 	bl	8004304 <siprintf>
			ucg_DrawString(&ucg, 10, 35, 0,"Assignment 2");
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <main+0x1b0>)
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	2223      	movs	r2, #35	; 0x23
 8003ff4:	210a      	movs	r1, #10
 8003ff6:	4815      	ldr	r0, [pc, #84]	; (800404c <main+0x1b4>)
 8003ff8:	f7ff fb68 	bl	80036cc <ucg_DrawString>
			ucg_DrawString(&ucg, 10, 65, 0,buffer1);
 8003ffc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2300      	movs	r3, #0
 8004004:	2241      	movs	r2, #65	; 0x41
 8004006:	210a      	movs	r1, #10
 8004008:	4810      	ldr	r0, [pc, #64]	; (800404c <main+0x1b4>)
 800400a:	f7ff fb5f 	bl	80036cc <ucg_DrawString>
			ucg_DrawString(&ucg, 10, 100, 0,buffer2);
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	2264      	movs	r2, #100	; 0x64
 8004016:	210a      	movs	r1, #10
 8004018:	480c      	ldr	r0, [pc, #48]	; (800404c <main+0x1b4>)
 800401a:	f7ff fb57 	bl	80036cc <ucg_DrawString>
		}
		processTimerScheduler();
 800401e:	f7fd fb19 	bl	8001654 <processTimerScheduler>
		if (Calculate_time(Timetick, GetMilSecTick()) >= 1000){
 8004022:	e762      	b.n	8003eea <main+0x52>
 8004024:	f3af 8000 	nop.w
 8004028:	3d70a3d7 	.word	0x3d70a3d7
 800402c:	4065f70a 	.word	0x4065f70a
 8004030:	cccccccd 	.word	0xcccccccd
 8004034:	40476ccc 	.word	0x40476ccc
 8004038:	200012e0 	.word	0x200012e0
 800403c:	40f00000 	.word	0x40f00000
 8004040:	08004c74 	.word	0x08004c74
 8004044:	08004c84 	.word	0x08004c84
 8004048:	08004c90 	.word	0x08004c90
 800404c:	2000122c 	.word	0x2000122c

08004050 <AppInitCommon>:
	}
}
/******************************************************************************/

void AppInitCommon(){
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af02      	add	r7, sp, #8
	TimerInit();
 8004056:	f7fd fa1d 	bl	8001494 <TimerInit>
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 800405a:	2100      	movs	r1, #0
 800405c:	480f      	ldr	r0, [pc, #60]	; (800409c <AppInitCommon+0x4c>)
 800405e:	f7fd fd7f 	bl	8001b60 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 8004062:	480e      	ldr	r0, [pc, #56]	; (800409c <AppInitCommon+0x4c>)
 8004064:	f7fd fdc4 	bl	8001bf0 <ucg_ClearScreen>
	ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
 8004068:	490d      	ldr	r1, [pc, #52]	; (80040a0 <AppInitCommon+0x50>)
 800406a:	480c      	ldr	r0, [pc, #48]	; (800409c <AppInitCommon+0x4c>)
 800406c:	f7ff fbf2 	bl	8003854 <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 8004070:	23ff      	movs	r3, #255	; 0xff
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	23ff      	movs	r3, #255	; 0xff
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	2100      	movs	r1, #0
 800407a:	4808      	ldr	r0, [pc, #32]	; (800409c <AppInitCommon+0x4c>)
 800407c:	f7ff fcc8 	bl	8003a10 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 8004080:	2300      	movs	r3, #0
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	2200      	movs	r2, #0
 8004088:	2101      	movs	r1, #1
 800408a:	4804      	ldr	r0, [pc, #16]	; (800409c <AppInitCommon+0x4c>)
 800408c:	f7ff fcc0 	bl	8003a10 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8004090:	4802      	ldr	r0, [pc, #8]	; (800409c <AppInitCommon+0x4c>)
 8004092:	f7ff fdb7 	bl	8003c04 <ucg_SetRotate180>
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	2000122c 	.word	0x2000122c
 80040a0:	08004d80 	.word	0x08004d80

080040a4 <I2C1_Init>:

void I2C1_Init(void){
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_APB1PeriphClockCmd(I2C_MASTER_RCC, ENABLE);
 80040aa:	2101      	movs	r1, #1
 80040ac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80040b0:	f7fd f8fc 	bl	80012ac <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(I2C_MASTER_GPIO_RCC, ENABLE);
 80040b4:	2101      	movs	r1, #1
 80040b6:	2002      	movs	r0, #2
 80040b8:	f7fd f8d8 	bl	800126c <RCC_AHB1PeriphClockCmd>

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80040bc:	2302      	movs	r3, #2
 80040be:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80040c0:	2302      	movs	r3, #2
 80040c2:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75bb      	strb	r3, [r7, #22]


	GPIO_InitStructure.GPIO_Pin = SCL_MASTER_PIN | SDA_MASTER_PIN;
 80040cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040d0:	613b      	str	r3, [r7, #16]
	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStructure);
 80040d2:	f107 0310 	add.w	r3, r7, #16
 80040d6:	4619      	mov	r1, r3
 80040d8:	4813      	ldr	r0, [pc, #76]	; (8004128 <I2C1_Init+0x84>)
 80040da:	f7fc fd47 	bl	8000b6c <GPIO_Init>

	//Chon PA8 lam chan SCL
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource8, GPIO_AF_I2C1);
 80040de:	2204      	movs	r2, #4
 80040e0:	2108      	movs	r1, #8
 80040e2:	4811      	ldr	r0, [pc, #68]	; (8004128 <I2C1_Init+0x84>)
 80040e4:	f7fc fde9 	bl	8000cba <GPIO_PinAFConfig>
	//Chon PB9 lam chan SDA
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource9, GPIO_AF_I2C1);
 80040e8:	2204      	movs	r2, #4
 80040ea:	2109      	movs	r1, #9
 80040ec:	480e      	ldr	r0, [pc, #56]	; (8004128 <I2C1_Init+0x84>)
 80040ee:	f7fc fde4 	bl	8000cba <GPIO_PinAFConfig>

	//Khoi tao ngoai vi I2C3 su dung che do Master
	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80040f2:	2300      	movs	r3, #0
 80040f4:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <I2C1_Init+0x88>)
 80040f8:	603b      	str	r3, [r7, #0]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80040fa:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80040fe:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8004100:	2300      	movs	r3, #0
 8004102:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Disable;
 8004104:	2300      	movs	r3, #0
 8004106:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004108:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800410c:	81bb      	strh	r3, [r7, #12]

	//Khoi tao I2C
	I2C_Init(I2C_MASTER_INSTANCE, &I2C_InitStructure);
 800410e:	463b      	mov	r3, r7
 8004110:	4619      	mov	r1, r3
 8004112:	4807      	ldr	r0, [pc, #28]	; (8004130 <I2C1_Init+0x8c>)
 8004114:	f7fc fe1a 	bl	8000d4c <I2C_Init>

	//Bat I2C
	I2C_Cmd(I2C_MASTER_INSTANCE, ENABLE);
 8004118:	2101      	movs	r1, #1
 800411a:	4805      	ldr	r0, [pc, #20]	; (8004130 <I2C1_Init+0x8c>)
 800411c:	f7fc fed8 	bl	8000ed0 <I2C_Cmd>
}
 8004120:	bf00      	nop
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40020400 	.word	0x40020400
 800412c:	00061a80 	.word	0x00061a80
 8004130:	40005400 	.word	0x40005400

08004134 <I2C_Start>:

void I2C_Start(uint8_t direction){
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
	//Doi I2Cx khong ban
	while (I2C_GetFlagStatus(I2C_MASTER_INSTANCE, I2C_FLAG_BUSY));
 800413e:	bf00      	nop
 8004140:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004144:	4819      	ldr	r0, [pc, #100]	; (80041ac <I2C_Start+0x78>)
 8004146:	f7fc ffaf 	bl	80010a8 <I2C_GetFlagStatus>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f7      	bne.n	8004140 <I2C_Start+0xc>

	I2C_GenerateSTART(I2C_MASTER_INSTANCE, ENABLE);
 8004150:	2101      	movs	r1, #1
 8004152:	4816      	ldr	r0, [pc, #88]	; (80041ac <I2C_Start+0x78>)
 8004154:	f7fc fedc 	bl	8000f10 <I2C_GenerateSTART>

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_MODE_SELECT));
 8004158:	bf00      	nop
 800415a:	4915      	ldr	r1, [pc, #84]	; (80041b0 <I2C_Start+0x7c>)
 800415c:	4813      	ldr	r0, [pc, #76]	; (80041ac <I2C_Start+0x78>)
 800415e:	f7fc ff73 	bl	8001048 <I2C_CheckEvent>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f8      	beq.n	800415a <I2C_Start+0x26>

	//gui dia chi Slave de ghi
	I2C_Send7bitAddress(I2C_MASTER_INSTANCE, SLAVE_ADDRESS, direction);
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	461a      	mov	r2, r3
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	480f      	ldr	r0, [pc, #60]	; (80041ac <I2C_Start+0x78>)
 8004170:	f7fc ff0e 	bl	8000f90 <I2C_Send7bitAddress>


	if(direction == I2C_Direction_Transmitter){
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <I2C_Start+0x58>
		while(!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800417a:	bf00      	nop
 800417c:	490d      	ldr	r1, [pc, #52]	; (80041b4 <I2C_Start+0x80>)
 800417e:	480b      	ldr	r0, [pc, #44]	; (80041ac <I2C_Start+0x78>)
 8004180:	f7fc ff62 	bl	8001048 <I2C_CheckEvent>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f8      	beq.n	800417c <I2C_Start+0x48>
	}
	else if(direction == I2C_Direction_Receiver){
		while(!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	}
}
 800418a:	e00a      	b.n	80041a2 <I2C_Start+0x6e>
	else if(direction == I2C_Direction_Receiver){
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <I2C_Start+0x6e>
		while(!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8004192:	bf00      	nop
 8004194:	4908      	ldr	r1, [pc, #32]	; (80041b8 <I2C_Start+0x84>)
 8004196:	4805      	ldr	r0, [pc, #20]	; (80041ac <I2C_Start+0x78>)
 8004198:	f7fc ff56 	bl	8001048 <I2C_CheckEvent>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f8      	beq.n	8004194 <I2C_Start+0x60>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40005400 	.word	0x40005400
 80041b0:	00030001 	.word	0x00030001
 80041b4:	00070082 	.word	0x00070082
 80041b8:	00030002 	.word	0x00030002

080041bc <I2C_TransmitData>:


void I2C_TransmitData(uint8_t data){
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
	I2C_SendData(I2C_MASTER_INSTANCE, data);
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	4619      	mov	r1, r3
 80041ca:	4808      	ldr	r0, [pc, #32]	; (80041ec <I2C_TransmitData+0x30>)
 80041cc:	f7fc ff1e 	bl	800100c <I2C_SendData>

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80041d0:	bf00      	nop
 80041d2:	4907      	ldr	r1, [pc, #28]	; (80041f0 <I2C_TransmitData+0x34>)
 80041d4:	4805      	ldr	r0, [pc, #20]	; (80041ec <I2C_TransmitData+0x30>)
 80041d6:	f7fc ff37 	bl	8001048 <I2C_CheckEvent>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f8      	beq.n	80041d2 <I2C_TransmitData+0x16>
}
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40005400 	.word	0x40005400
 80041f0:	00070084 	.word	0x00070084

080041f4 <I2C_Recevie_ack>:

	uint8_t data = I2C_ReceiveData(I2C_MASTER_INSTANCE);
	return data;
}

uint8_t I2C_Recevie_ack(void){
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
	//Bat ACK cua recevie data
	I2C_AcknowledgeConfig(I2C_MASTER_INSTANCE, DISABLE);
 80041fa:	2100      	movs	r1, #0
 80041fc:	480a      	ldr	r0, [pc, #40]	; (8004228 <I2C_Recevie_ack+0x34>)
 80041fe:	f7fc fee5 	bl	8000fcc <I2C_AcknowledgeConfig>

	//Doi khi nhan dc 1 byte
	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8004202:	bf00      	nop
 8004204:	4909      	ldr	r1, [pc, #36]	; (800422c <I2C_Recevie_ack+0x38>)
 8004206:	4808      	ldr	r0, [pc, #32]	; (8004228 <I2C_Recevie_ack+0x34>)
 8004208:	f7fc ff1e 	bl	8001048 <I2C_CheckEvent>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f8      	beq.n	8004204 <I2C_Recevie_ack+0x10>

	uint8_t data = I2C_ReceiveData(I2C_MASTER_INSTANCE);
 8004212:	4805      	ldr	r0, [pc, #20]	; (8004228 <I2C_Recevie_ack+0x34>)
 8004214:	f7fc ff0a 	bl	800102c <I2C_ReceiveData>
 8004218:	4603      	mov	r3, r0
 800421a:	71fb      	strb	r3, [r7, #7]

	return data;
 800421c:	79fb      	ldrb	r3, [r7, #7]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40005400 	.word	0x40005400
 800422c:	00030040 	.word	0x00030040

08004230 <I2C_Stop>:

void I2C_Stop(void){
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
	I2C_GenerateSTOP(I2C_MASTER_INSTANCE, ENABLE);
 8004234:	2101      	movs	r1, #1
 8004236:	4802      	ldr	r0, [pc, #8]	; (8004240 <I2C_Stop+0x10>)
 8004238:	f7fc fe8a 	bl	8000f50 <I2C_GenerateSTOP>
}
 800423c:	bf00      	nop
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40005400 	.word	0x40005400

08004244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <_sbrk+0x5c>)
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <_sbrk+0x60>)
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004258:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <_sbrk+0x64>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <_sbrk+0x64>)
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <_sbrk+0x68>)
 8004264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <_sbrk+0x64>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	429a      	cmp	r2, r3
 8004272:	d207      	bcs.n	8004284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004274:	f000 f86e 	bl	8004354 <__errno>
 8004278:	4603      	mov	r3, r0
 800427a:	220c      	movs	r2, #12
 800427c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e009      	b.n	8004298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <_sbrk+0x64>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <_sbrk+0x64>)
 8004294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20018000 	.word	0x20018000
 80042a4:	00000400 	.word	0x00000400
 80042a8:	200012f4 	.word	0x200012f4
 80042ac:	20001440 	.word	0x20001440

080042b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042b0:	480d      	ldr	r0, [pc, #52]	; (80042e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042b4:	f7fc fbd2 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042b8:	480c      	ldr	r0, [pc, #48]	; (80042ec <LoopForever+0x6>)
  ldr r1, =_edata
 80042ba:	490d      	ldr	r1, [pc, #52]	; (80042f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042bc:	4a0d      	ldr	r2, [pc, #52]	; (80042f4 <LoopForever+0xe>)
  movs r3, #0
 80042be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042c0:	e002      	b.n	80042c8 <LoopCopyDataInit>

080042c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042c6:	3304      	adds	r3, #4

080042c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042cc:	d3f9      	bcc.n	80042c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042d0:	4c0a      	ldr	r4, [pc, #40]	; (80042fc <LoopForever+0x16>)
  movs r3, #0
 80042d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042d4:	e001      	b.n	80042da <LoopFillZerobss>

080042d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d8:	3204      	adds	r2, #4

080042da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042dc:	d3fb      	bcc.n	80042d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042de:	f000 f83f 	bl	8004360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042e2:	f7ff fdd9 	bl	8003e98 <main>

080042e6 <LoopForever>:

LoopForever:
  b LoopForever
 80042e6:	e7fe      	b.n	80042e6 <LoopForever>
  ldr   r0, =_estack
 80042e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80042ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80042f4:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 80042f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80042fc:	20001440 	.word	0x20001440

08004300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004300:	e7fe      	b.n	8004300 <ADC_IRQHandler>
	...

08004304 <siprintf>:
 8004304:	b40e      	push	{r1, r2, r3}
 8004306:	b500      	push	{lr}
 8004308:	b09c      	sub	sp, #112	; 0x70
 800430a:	ab1d      	add	r3, sp, #116	; 0x74
 800430c:	9002      	str	r0, [sp, #8]
 800430e:	9006      	str	r0, [sp, #24]
 8004310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004314:	4809      	ldr	r0, [pc, #36]	; (800433c <siprintf+0x38>)
 8004316:	9107      	str	r1, [sp, #28]
 8004318:	9104      	str	r1, [sp, #16]
 800431a:	4909      	ldr	r1, [pc, #36]	; (8004340 <siprintf+0x3c>)
 800431c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004320:	9105      	str	r1, [sp, #20]
 8004322:	6800      	ldr	r0, [r0, #0]
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	a902      	add	r1, sp, #8
 8004328:	f000 f992 	bl	8004650 <_svfiprintf_r>
 800432c:	9b02      	ldr	r3, [sp, #8]
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	b01c      	add	sp, #112	; 0x70
 8004334:	f85d eb04 	ldr.w	lr, [sp], #4
 8004338:	b003      	add	sp, #12
 800433a:	4770      	bx	lr
 800433c:	20000060 	.word	0x20000060
 8004340:	ffff0208 	.word	0xffff0208

08004344 <memset>:
 8004344:	4402      	add	r2, r0
 8004346:	4603      	mov	r3, r0
 8004348:	4293      	cmp	r3, r2
 800434a:	d100      	bne.n	800434e <memset+0xa>
 800434c:	4770      	bx	lr
 800434e:	f803 1b01 	strb.w	r1, [r3], #1
 8004352:	e7f9      	b.n	8004348 <memset+0x4>

08004354 <__errno>:
 8004354:	4b01      	ldr	r3, [pc, #4]	; (800435c <__errno+0x8>)
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20000060 	.word	0x20000060

08004360 <__libc_init_array>:
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	4d0d      	ldr	r5, [pc, #52]	; (8004398 <__libc_init_array+0x38>)
 8004364:	4c0d      	ldr	r4, [pc, #52]	; (800439c <__libc_init_array+0x3c>)
 8004366:	1b64      	subs	r4, r4, r5
 8004368:	10a4      	asrs	r4, r4, #2
 800436a:	2600      	movs	r6, #0
 800436c:	42a6      	cmp	r6, r4
 800436e:	d109      	bne.n	8004384 <__libc_init_array+0x24>
 8004370:	4d0b      	ldr	r5, [pc, #44]	; (80043a0 <__libc_init_array+0x40>)
 8004372:	4c0c      	ldr	r4, [pc, #48]	; (80043a4 <__libc_init_array+0x44>)
 8004374:	f000 fc6a 	bl	8004c4c <_init>
 8004378:	1b64      	subs	r4, r4, r5
 800437a:	10a4      	asrs	r4, r4, #2
 800437c:	2600      	movs	r6, #0
 800437e:	42a6      	cmp	r6, r4
 8004380:	d105      	bne.n	800438e <__libc_init_array+0x2e>
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	f855 3b04 	ldr.w	r3, [r5], #4
 8004388:	4798      	blx	r3
 800438a:	3601      	adds	r6, #1
 800438c:	e7ee      	b.n	800436c <__libc_init_array+0xc>
 800438e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004392:	4798      	blx	r3
 8004394:	3601      	adds	r6, #1
 8004396:	e7f2      	b.n	800437e <__libc_init_array+0x1e>
 8004398:	0800555c 	.word	0x0800555c
 800439c:	0800555c 	.word	0x0800555c
 80043a0:	0800555c 	.word	0x0800555c
 80043a4:	08005560 	.word	0x08005560

080043a8 <__retarget_lock_acquire_recursive>:
 80043a8:	4770      	bx	lr

080043aa <__retarget_lock_release_recursive>:
 80043aa:	4770      	bx	lr

080043ac <_free_r>:
 80043ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ae:	2900      	cmp	r1, #0
 80043b0:	d044      	beq.n	800443c <_free_r+0x90>
 80043b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b6:	9001      	str	r0, [sp, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f1a1 0404 	sub.w	r4, r1, #4
 80043be:	bfb8      	it	lt
 80043c0:	18e4      	addlt	r4, r4, r3
 80043c2:	f000 f8df 	bl	8004584 <__malloc_lock>
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <_free_r+0x94>)
 80043c8:	9801      	ldr	r0, [sp, #4]
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	b933      	cbnz	r3, 80043dc <_free_r+0x30>
 80043ce:	6063      	str	r3, [r4, #4]
 80043d0:	6014      	str	r4, [r2, #0]
 80043d2:	b003      	add	sp, #12
 80043d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043d8:	f000 b8da 	b.w	8004590 <__malloc_unlock>
 80043dc:	42a3      	cmp	r3, r4
 80043de:	d908      	bls.n	80043f2 <_free_r+0x46>
 80043e0:	6825      	ldr	r5, [r4, #0]
 80043e2:	1961      	adds	r1, r4, r5
 80043e4:	428b      	cmp	r3, r1
 80043e6:	bf01      	itttt	eq
 80043e8:	6819      	ldreq	r1, [r3, #0]
 80043ea:	685b      	ldreq	r3, [r3, #4]
 80043ec:	1949      	addeq	r1, r1, r5
 80043ee:	6021      	streq	r1, [r4, #0]
 80043f0:	e7ed      	b.n	80043ce <_free_r+0x22>
 80043f2:	461a      	mov	r2, r3
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	b10b      	cbz	r3, 80043fc <_free_r+0x50>
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	d9fa      	bls.n	80043f2 <_free_r+0x46>
 80043fc:	6811      	ldr	r1, [r2, #0]
 80043fe:	1855      	adds	r5, r2, r1
 8004400:	42a5      	cmp	r5, r4
 8004402:	d10b      	bne.n	800441c <_free_r+0x70>
 8004404:	6824      	ldr	r4, [r4, #0]
 8004406:	4421      	add	r1, r4
 8004408:	1854      	adds	r4, r2, r1
 800440a:	42a3      	cmp	r3, r4
 800440c:	6011      	str	r1, [r2, #0]
 800440e:	d1e0      	bne.n	80043d2 <_free_r+0x26>
 8004410:	681c      	ldr	r4, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	6053      	str	r3, [r2, #4]
 8004416:	440c      	add	r4, r1
 8004418:	6014      	str	r4, [r2, #0]
 800441a:	e7da      	b.n	80043d2 <_free_r+0x26>
 800441c:	d902      	bls.n	8004424 <_free_r+0x78>
 800441e:	230c      	movs	r3, #12
 8004420:	6003      	str	r3, [r0, #0]
 8004422:	e7d6      	b.n	80043d2 <_free_r+0x26>
 8004424:	6825      	ldr	r5, [r4, #0]
 8004426:	1961      	adds	r1, r4, r5
 8004428:	428b      	cmp	r3, r1
 800442a:	bf04      	itt	eq
 800442c:	6819      	ldreq	r1, [r3, #0]
 800442e:	685b      	ldreq	r3, [r3, #4]
 8004430:	6063      	str	r3, [r4, #4]
 8004432:	bf04      	itt	eq
 8004434:	1949      	addeq	r1, r1, r5
 8004436:	6021      	streq	r1, [r4, #0]
 8004438:	6054      	str	r4, [r2, #4]
 800443a:	e7ca      	b.n	80043d2 <_free_r+0x26>
 800443c:	b003      	add	sp, #12
 800443e:	bd30      	pop	{r4, r5, pc}
 8004440:	20001438 	.word	0x20001438

08004444 <sbrk_aligned>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	4e0e      	ldr	r6, [pc, #56]	; (8004480 <sbrk_aligned+0x3c>)
 8004448:	460c      	mov	r4, r1
 800444a:	6831      	ldr	r1, [r6, #0]
 800444c:	4605      	mov	r5, r0
 800444e:	b911      	cbnz	r1, 8004456 <sbrk_aligned+0x12>
 8004450:	f000 fba6 	bl	8004ba0 <_sbrk_r>
 8004454:	6030      	str	r0, [r6, #0]
 8004456:	4621      	mov	r1, r4
 8004458:	4628      	mov	r0, r5
 800445a:	f000 fba1 	bl	8004ba0 <_sbrk_r>
 800445e:	1c43      	adds	r3, r0, #1
 8004460:	d00a      	beq.n	8004478 <sbrk_aligned+0x34>
 8004462:	1cc4      	adds	r4, r0, #3
 8004464:	f024 0403 	bic.w	r4, r4, #3
 8004468:	42a0      	cmp	r0, r4
 800446a:	d007      	beq.n	800447c <sbrk_aligned+0x38>
 800446c:	1a21      	subs	r1, r4, r0
 800446e:	4628      	mov	r0, r5
 8004470:	f000 fb96 	bl	8004ba0 <_sbrk_r>
 8004474:	3001      	adds	r0, #1
 8004476:	d101      	bne.n	800447c <sbrk_aligned+0x38>
 8004478:	f04f 34ff 	mov.w	r4, #4294967295
 800447c:	4620      	mov	r0, r4
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	2000143c 	.word	0x2000143c

08004484 <_malloc_r>:
 8004484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004488:	1ccd      	adds	r5, r1, #3
 800448a:	f025 0503 	bic.w	r5, r5, #3
 800448e:	3508      	adds	r5, #8
 8004490:	2d0c      	cmp	r5, #12
 8004492:	bf38      	it	cc
 8004494:	250c      	movcc	r5, #12
 8004496:	2d00      	cmp	r5, #0
 8004498:	4607      	mov	r7, r0
 800449a:	db01      	blt.n	80044a0 <_malloc_r+0x1c>
 800449c:	42a9      	cmp	r1, r5
 800449e:	d905      	bls.n	80044ac <_malloc_r+0x28>
 80044a0:	230c      	movs	r3, #12
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	2600      	movs	r6, #0
 80044a6:	4630      	mov	r0, r6
 80044a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004580 <_malloc_r+0xfc>
 80044b0:	f000 f868 	bl	8004584 <__malloc_lock>
 80044b4:	f8d8 3000 	ldr.w	r3, [r8]
 80044b8:	461c      	mov	r4, r3
 80044ba:	bb5c      	cbnz	r4, 8004514 <_malloc_r+0x90>
 80044bc:	4629      	mov	r1, r5
 80044be:	4638      	mov	r0, r7
 80044c0:	f7ff ffc0 	bl	8004444 <sbrk_aligned>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	4604      	mov	r4, r0
 80044c8:	d155      	bne.n	8004576 <_malloc_r+0xf2>
 80044ca:	f8d8 4000 	ldr.w	r4, [r8]
 80044ce:	4626      	mov	r6, r4
 80044d0:	2e00      	cmp	r6, #0
 80044d2:	d145      	bne.n	8004560 <_malloc_r+0xdc>
 80044d4:	2c00      	cmp	r4, #0
 80044d6:	d048      	beq.n	800456a <_malloc_r+0xe6>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	4631      	mov	r1, r6
 80044dc:	4638      	mov	r0, r7
 80044de:	eb04 0903 	add.w	r9, r4, r3
 80044e2:	f000 fb5d 	bl	8004ba0 <_sbrk_r>
 80044e6:	4581      	cmp	r9, r0
 80044e8:	d13f      	bne.n	800456a <_malloc_r+0xe6>
 80044ea:	6821      	ldr	r1, [r4, #0]
 80044ec:	1a6d      	subs	r5, r5, r1
 80044ee:	4629      	mov	r1, r5
 80044f0:	4638      	mov	r0, r7
 80044f2:	f7ff ffa7 	bl	8004444 <sbrk_aligned>
 80044f6:	3001      	adds	r0, #1
 80044f8:	d037      	beq.n	800456a <_malloc_r+0xe6>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	442b      	add	r3, r5
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	f8d8 3000 	ldr.w	r3, [r8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d038      	beq.n	800457a <_malloc_r+0xf6>
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	42a2      	cmp	r2, r4
 800450c:	d12b      	bne.n	8004566 <_malloc_r+0xe2>
 800450e:	2200      	movs	r2, #0
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	e00f      	b.n	8004534 <_malloc_r+0xb0>
 8004514:	6822      	ldr	r2, [r4, #0]
 8004516:	1b52      	subs	r2, r2, r5
 8004518:	d41f      	bmi.n	800455a <_malloc_r+0xd6>
 800451a:	2a0b      	cmp	r2, #11
 800451c:	d917      	bls.n	800454e <_malloc_r+0xca>
 800451e:	1961      	adds	r1, r4, r5
 8004520:	42a3      	cmp	r3, r4
 8004522:	6025      	str	r5, [r4, #0]
 8004524:	bf18      	it	ne
 8004526:	6059      	strne	r1, [r3, #4]
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	bf08      	it	eq
 800452c:	f8c8 1000 	streq.w	r1, [r8]
 8004530:	5162      	str	r2, [r4, r5]
 8004532:	604b      	str	r3, [r1, #4]
 8004534:	4638      	mov	r0, r7
 8004536:	f104 060b 	add.w	r6, r4, #11
 800453a:	f000 f829 	bl	8004590 <__malloc_unlock>
 800453e:	f026 0607 	bic.w	r6, r6, #7
 8004542:	1d23      	adds	r3, r4, #4
 8004544:	1af2      	subs	r2, r6, r3
 8004546:	d0ae      	beq.n	80044a6 <_malloc_r+0x22>
 8004548:	1b9b      	subs	r3, r3, r6
 800454a:	50a3      	str	r3, [r4, r2]
 800454c:	e7ab      	b.n	80044a6 <_malloc_r+0x22>
 800454e:	42a3      	cmp	r3, r4
 8004550:	6862      	ldr	r2, [r4, #4]
 8004552:	d1dd      	bne.n	8004510 <_malloc_r+0x8c>
 8004554:	f8c8 2000 	str.w	r2, [r8]
 8004558:	e7ec      	b.n	8004534 <_malloc_r+0xb0>
 800455a:	4623      	mov	r3, r4
 800455c:	6864      	ldr	r4, [r4, #4]
 800455e:	e7ac      	b.n	80044ba <_malloc_r+0x36>
 8004560:	4634      	mov	r4, r6
 8004562:	6876      	ldr	r6, [r6, #4]
 8004564:	e7b4      	b.n	80044d0 <_malloc_r+0x4c>
 8004566:	4613      	mov	r3, r2
 8004568:	e7cc      	b.n	8004504 <_malloc_r+0x80>
 800456a:	230c      	movs	r3, #12
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4638      	mov	r0, r7
 8004570:	f000 f80e 	bl	8004590 <__malloc_unlock>
 8004574:	e797      	b.n	80044a6 <_malloc_r+0x22>
 8004576:	6025      	str	r5, [r4, #0]
 8004578:	e7dc      	b.n	8004534 <_malloc_r+0xb0>
 800457a:	605b      	str	r3, [r3, #4]
 800457c:	deff      	udf	#255	; 0xff
 800457e:	bf00      	nop
 8004580:	20001438 	.word	0x20001438

08004584 <__malloc_lock>:
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <__malloc_lock+0x8>)
 8004586:	f7ff bf0f 	b.w	80043a8 <__retarget_lock_acquire_recursive>
 800458a:	bf00      	nop
 800458c:	20001434 	.word	0x20001434

08004590 <__malloc_unlock>:
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <__malloc_unlock+0x8>)
 8004592:	f7ff bf0a 	b.w	80043aa <__retarget_lock_release_recursive>
 8004596:	bf00      	nop
 8004598:	20001434 	.word	0x20001434

0800459c <__ssputs_r>:
 800459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	688e      	ldr	r6, [r1, #8]
 80045a2:	461f      	mov	r7, r3
 80045a4:	42be      	cmp	r6, r7
 80045a6:	680b      	ldr	r3, [r1, #0]
 80045a8:	4682      	mov	sl, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	4690      	mov	r8, r2
 80045ae:	d82c      	bhi.n	800460a <__ssputs_r+0x6e>
 80045b0:	898a      	ldrh	r2, [r1, #12]
 80045b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045b6:	d026      	beq.n	8004606 <__ssputs_r+0x6a>
 80045b8:	6965      	ldr	r5, [r4, #20]
 80045ba:	6909      	ldr	r1, [r1, #16]
 80045bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045c0:	eba3 0901 	sub.w	r9, r3, r1
 80045c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045c8:	1c7b      	adds	r3, r7, #1
 80045ca:	444b      	add	r3, r9
 80045cc:	106d      	asrs	r5, r5, #1
 80045ce:	429d      	cmp	r5, r3
 80045d0:	bf38      	it	cc
 80045d2:	461d      	movcc	r5, r3
 80045d4:	0553      	lsls	r3, r2, #21
 80045d6:	d527      	bpl.n	8004628 <__ssputs_r+0x8c>
 80045d8:	4629      	mov	r1, r5
 80045da:	f7ff ff53 	bl	8004484 <_malloc_r>
 80045de:	4606      	mov	r6, r0
 80045e0:	b360      	cbz	r0, 800463c <__ssputs_r+0xa0>
 80045e2:	6921      	ldr	r1, [r4, #16]
 80045e4:	464a      	mov	r2, r9
 80045e6:	f000 faeb 	bl	8004bc0 <memcpy>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	81a3      	strh	r3, [r4, #12]
 80045f6:	6126      	str	r6, [r4, #16]
 80045f8:	6165      	str	r5, [r4, #20]
 80045fa:	444e      	add	r6, r9
 80045fc:	eba5 0509 	sub.w	r5, r5, r9
 8004600:	6026      	str	r6, [r4, #0]
 8004602:	60a5      	str	r5, [r4, #8]
 8004604:	463e      	mov	r6, r7
 8004606:	42be      	cmp	r6, r7
 8004608:	d900      	bls.n	800460c <__ssputs_r+0x70>
 800460a:	463e      	mov	r6, r7
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	4632      	mov	r2, r6
 8004610:	4641      	mov	r1, r8
 8004612:	f000 faab 	bl	8004b6c <memmove>
 8004616:	68a3      	ldr	r3, [r4, #8]
 8004618:	1b9b      	subs	r3, r3, r6
 800461a:	60a3      	str	r3, [r4, #8]
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	4433      	add	r3, r6
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	2000      	movs	r0, #0
 8004624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004628:	462a      	mov	r2, r5
 800462a:	f000 fad7 	bl	8004bdc <_realloc_r>
 800462e:	4606      	mov	r6, r0
 8004630:	2800      	cmp	r0, #0
 8004632:	d1e0      	bne.n	80045f6 <__ssputs_r+0x5a>
 8004634:	6921      	ldr	r1, [r4, #16]
 8004636:	4650      	mov	r0, sl
 8004638:	f7ff feb8 	bl	80043ac <_free_r>
 800463c:	230c      	movs	r3, #12
 800463e:	f8ca 3000 	str.w	r3, [sl]
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004648:	81a3      	strh	r3, [r4, #12]
 800464a:	f04f 30ff 	mov.w	r0, #4294967295
 800464e:	e7e9      	b.n	8004624 <__ssputs_r+0x88>

08004650 <_svfiprintf_r>:
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	4698      	mov	r8, r3
 8004656:	898b      	ldrh	r3, [r1, #12]
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	b09d      	sub	sp, #116	; 0x74
 800465c:	4607      	mov	r7, r0
 800465e:	460d      	mov	r5, r1
 8004660:	4614      	mov	r4, r2
 8004662:	d50e      	bpl.n	8004682 <_svfiprintf_r+0x32>
 8004664:	690b      	ldr	r3, [r1, #16]
 8004666:	b963      	cbnz	r3, 8004682 <_svfiprintf_r+0x32>
 8004668:	2140      	movs	r1, #64	; 0x40
 800466a:	f7ff ff0b 	bl	8004484 <_malloc_r>
 800466e:	6028      	str	r0, [r5, #0]
 8004670:	6128      	str	r0, [r5, #16]
 8004672:	b920      	cbnz	r0, 800467e <_svfiprintf_r+0x2e>
 8004674:	230c      	movs	r3, #12
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	e0d0      	b.n	8004820 <_svfiprintf_r+0x1d0>
 800467e:	2340      	movs	r3, #64	; 0x40
 8004680:	616b      	str	r3, [r5, #20]
 8004682:	2300      	movs	r3, #0
 8004684:	9309      	str	r3, [sp, #36]	; 0x24
 8004686:	2320      	movs	r3, #32
 8004688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800468c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004690:	2330      	movs	r3, #48	; 0x30
 8004692:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004838 <_svfiprintf_r+0x1e8>
 8004696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800469a:	f04f 0901 	mov.w	r9, #1
 800469e:	4623      	mov	r3, r4
 80046a0:	469a      	mov	sl, r3
 80046a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a6:	b10a      	cbz	r2, 80046ac <_svfiprintf_r+0x5c>
 80046a8:	2a25      	cmp	r2, #37	; 0x25
 80046aa:	d1f9      	bne.n	80046a0 <_svfiprintf_r+0x50>
 80046ac:	ebba 0b04 	subs.w	fp, sl, r4
 80046b0:	d00b      	beq.n	80046ca <_svfiprintf_r+0x7a>
 80046b2:	465b      	mov	r3, fp
 80046b4:	4622      	mov	r2, r4
 80046b6:	4629      	mov	r1, r5
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff ff6f 	bl	800459c <__ssputs_r>
 80046be:	3001      	adds	r0, #1
 80046c0:	f000 80a9 	beq.w	8004816 <_svfiprintf_r+0x1c6>
 80046c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c6:	445a      	add	r2, fp
 80046c8:	9209      	str	r2, [sp, #36]	; 0x24
 80046ca:	f89a 3000 	ldrb.w	r3, [sl]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80a1 	beq.w	8004816 <_svfiprintf_r+0x1c6>
 80046d4:	2300      	movs	r3, #0
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295
 80046da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046de:	f10a 0a01 	add.w	sl, sl, #1
 80046e2:	9304      	str	r3, [sp, #16]
 80046e4:	9307      	str	r3, [sp, #28]
 80046e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ea:	931a      	str	r3, [sp, #104]	; 0x68
 80046ec:	4654      	mov	r4, sl
 80046ee:	2205      	movs	r2, #5
 80046f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f4:	4850      	ldr	r0, [pc, #320]	; (8004838 <_svfiprintf_r+0x1e8>)
 80046f6:	f7fb fd73 	bl	80001e0 <memchr>
 80046fa:	9a04      	ldr	r2, [sp, #16]
 80046fc:	b9d8      	cbnz	r0, 8004736 <_svfiprintf_r+0xe6>
 80046fe:	06d0      	lsls	r0, r2, #27
 8004700:	bf44      	itt	mi
 8004702:	2320      	movmi	r3, #32
 8004704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004708:	0711      	lsls	r1, r2, #28
 800470a:	bf44      	itt	mi
 800470c:	232b      	movmi	r3, #43	; 0x2b
 800470e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004712:	f89a 3000 	ldrb.w	r3, [sl]
 8004716:	2b2a      	cmp	r3, #42	; 0x2a
 8004718:	d015      	beq.n	8004746 <_svfiprintf_r+0xf6>
 800471a:	9a07      	ldr	r2, [sp, #28]
 800471c:	4654      	mov	r4, sl
 800471e:	2000      	movs	r0, #0
 8004720:	f04f 0c0a 	mov.w	ip, #10
 8004724:	4621      	mov	r1, r4
 8004726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472a:	3b30      	subs	r3, #48	; 0x30
 800472c:	2b09      	cmp	r3, #9
 800472e:	d94d      	bls.n	80047cc <_svfiprintf_r+0x17c>
 8004730:	b1b0      	cbz	r0, 8004760 <_svfiprintf_r+0x110>
 8004732:	9207      	str	r2, [sp, #28]
 8004734:	e014      	b.n	8004760 <_svfiprintf_r+0x110>
 8004736:	eba0 0308 	sub.w	r3, r0, r8
 800473a:	fa09 f303 	lsl.w	r3, r9, r3
 800473e:	4313      	orrs	r3, r2
 8004740:	9304      	str	r3, [sp, #16]
 8004742:	46a2      	mov	sl, r4
 8004744:	e7d2      	b.n	80046ec <_svfiprintf_r+0x9c>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	1d19      	adds	r1, r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	9103      	str	r1, [sp, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	bfbb      	ittet	lt
 8004752:	425b      	neglt	r3, r3
 8004754:	f042 0202 	orrlt.w	r2, r2, #2
 8004758:	9307      	strge	r3, [sp, #28]
 800475a:	9307      	strlt	r3, [sp, #28]
 800475c:	bfb8      	it	lt
 800475e:	9204      	strlt	r2, [sp, #16]
 8004760:	7823      	ldrb	r3, [r4, #0]
 8004762:	2b2e      	cmp	r3, #46	; 0x2e
 8004764:	d10c      	bne.n	8004780 <_svfiprintf_r+0x130>
 8004766:	7863      	ldrb	r3, [r4, #1]
 8004768:	2b2a      	cmp	r3, #42	; 0x2a
 800476a:	d134      	bne.n	80047d6 <_svfiprintf_r+0x186>
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	9203      	str	r2, [sp, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	bfb8      	it	lt
 8004778:	f04f 33ff 	movlt.w	r3, #4294967295
 800477c:	3402      	adds	r4, #2
 800477e:	9305      	str	r3, [sp, #20]
 8004780:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004848 <_svfiprintf_r+0x1f8>
 8004784:	7821      	ldrb	r1, [r4, #0]
 8004786:	2203      	movs	r2, #3
 8004788:	4650      	mov	r0, sl
 800478a:	f7fb fd29 	bl	80001e0 <memchr>
 800478e:	b138      	cbz	r0, 80047a0 <_svfiprintf_r+0x150>
 8004790:	9b04      	ldr	r3, [sp, #16]
 8004792:	eba0 000a 	sub.w	r0, r0, sl
 8004796:	2240      	movs	r2, #64	; 0x40
 8004798:	4082      	lsls	r2, r0
 800479a:	4313      	orrs	r3, r2
 800479c:	3401      	adds	r4, #1
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a4:	4825      	ldr	r0, [pc, #148]	; (800483c <_svfiprintf_r+0x1ec>)
 80047a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047aa:	2206      	movs	r2, #6
 80047ac:	f7fb fd18 	bl	80001e0 <memchr>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d038      	beq.n	8004826 <_svfiprintf_r+0x1d6>
 80047b4:	4b22      	ldr	r3, [pc, #136]	; (8004840 <_svfiprintf_r+0x1f0>)
 80047b6:	bb1b      	cbnz	r3, 8004800 <_svfiprintf_r+0x1b0>
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	3307      	adds	r3, #7
 80047bc:	f023 0307 	bic.w	r3, r3, #7
 80047c0:	3308      	adds	r3, #8
 80047c2:	9303      	str	r3, [sp, #12]
 80047c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c6:	4433      	add	r3, r6
 80047c8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ca:	e768      	b.n	800469e <_svfiprintf_r+0x4e>
 80047cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80047d0:	460c      	mov	r4, r1
 80047d2:	2001      	movs	r0, #1
 80047d4:	e7a6      	b.n	8004724 <_svfiprintf_r+0xd4>
 80047d6:	2300      	movs	r3, #0
 80047d8:	3401      	adds	r4, #1
 80047da:	9305      	str	r3, [sp, #20]
 80047dc:	4619      	mov	r1, r3
 80047de:	f04f 0c0a 	mov.w	ip, #10
 80047e2:	4620      	mov	r0, r4
 80047e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e8:	3a30      	subs	r2, #48	; 0x30
 80047ea:	2a09      	cmp	r2, #9
 80047ec:	d903      	bls.n	80047f6 <_svfiprintf_r+0x1a6>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0c6      	beq.n	8004780 <_svfiprintf_r+0x130>
 80047f2:	9105      	str	r1, [sp, #20]
 80047f4:	e7c4      	b.n	8004780 <_svfiprintf_r+0x130>
 80047f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047fa:	4604      	mov	r4, r0
 80047fc:	2301      	movs	r3, #1
 80047fe:	e7f0      	b.n	80047e2 <_svfiprintf_r+0x192>
 8004800:	ab03      	add	r3, sp, #12
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	462a      	mov	r2, r5
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <_svfiprintf_r+0x1f4>)
 8004808:	a904      	add	r1, sp, #16
 800480a:	4638      	mov	r0, r7
 800480c:	f3af 8000 	nop.w
 8004810:	1c42      	adds	r2, r0, #1
 8004812:	4606      	mov	r6, r0
 8004814:	d1d6      	bne.n	80047c4 <_svfiprintf_r+0x174>
 8004816:	89ab      	ldrh	r3, [r5, #12]
 8004818:	065b      	lsls	r3, r3, #25
 800481a:	f53f af2d 	bmi.w	8004678 <_svfiprintf_r+0x28>
 800481e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004820:	b01d      	add	sp, #116	; 0x74
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004826:	ab03      	add	r3, sp, #12
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	462a      	mov	r2, r5
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <_svfiprintf_r+0x1f4>)
 800482e:	a904      	add	r1, sp, #16
 8004830:	4638      	mov	r0, r7
 8004832:	f000 f879 	bl	8004928 <_printf_i>
 8004836:	e7eb      	b.n	8004810 <_svfiprintf_r+0x1c0>
 8004838:	08005528 	.word	0x08005528
 800483c:	08005532 	.word	0x08005532
 8004840:	00000000 	.word	0x00000000
 8004844:	0800459d 	.word	0x0800459d
 8004848:	0800552e 	.word	0x0800552e

0800484c <_printf_common>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	4616      	mov	r6, r2
 8004852:	4699      	mov	r9, r3
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800485c:	4293      	cmp	r3, r2
 800485e:	bfb8      	it	lt
 8004860:	4613      	movlt	r3, r2
 8004862:	6033      	str	r3, [r6, #0]
 8004864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004868:	4607      	mov	r7, r0
 800486a:	460c      	mov	r4, r1
 800486c:	b10a      	cbz	r2, 8004872 <_printf_common+0x26>
 800486e:	3301      	adds	r3, #1
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	0699      	lsls	r1, r3, #26
 8004876:	bf42      	ittt	mi
 8004878:	6833      	ldrmi	r3, [r6, #0]
 800487a:	3302      	addmi	r3, #2
 800487c:	6033      	strmi	r3, [r6, #0]
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	f015 0506 	ands.w	r5, r5, #6
 8004884:	d106      	bne.n	8004894 <_printf_common+0x48>
 8004886:	f104 0a19 	add.w	sl, r4, #25
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	6832      	ldr	r2, [r6, #0]
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	42ab      	cmp	r3, r5
 8004892:	dc26      	bgt.n	80048e2 <_printf_common+0x96>
 8004894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004898:	1e13      	subs	r3, r2, #0
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	bf18      	it	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	0692      	lsls	r2, r2, #26
 80048a2:	d42b      	bmi.n	80048fc <_printf_common+0xb0>
 80048a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a8:	4649      	mov	r1, r9
 80048aa:	4638      	mov	r0, r7
 80048ac:	47c0      	blx	r8
 80048ae:	3001      	adds	r0, #1
 80048b0:	d01e      	beq.n	80048f0 <_printf_common+0xa4>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	6922      	ldr	r2, [r4, #16]
 80048b6:	f003 0306 	and.w	r3, r3, #6
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	bf02      	ittt	eq
 80048be:	68e5      	ldreq	r5, [r4, #12]
 80048c0:	6833      	ldreq	r3, [r6, #0]
 80048c2:	1aed      	subeq	r5, r5, r3
 80048c4:	68a3      	ldr	r3, [r4, #8]
 80048c6:	bf0c      	ite	eq
 80048c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048cc:	2500      	movne	r5, #0
 80048ce:	4293      	cmp	r3, r2
 80048d0:	bfc4      	itt	gt
 80048d2:	1a9b      	subgt	r3, r3, r2
 80048d4:	18ed      	addgt	r5, r5, r3
 80048d6:	2600      	movs	r6, #0
 80048d8:	341a      	adds	r4, #26
 80048da:	42b5      	cmp	r5, r6
 80048dc:	d11a      	bne.n	8004914 <_printf_common+0xc8>
 80048de:	2000      	movs	r0, #0
 80048e0:	e008      	b.n	80048f4 <_printf_common+0xa8>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4652      	mov	r2, sl
 80048e6:	4649      	mov	r1, r9
 80048e8:	4638      	mov	r0, r7
 80048ea:	47c0      	blx	r8
 80048ec:	3001      	adds	r0, #1
 80048ee:	d103      	bne.n	80048f8 <_printf_common+0xac>
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	3501      	adds	r5, #1
 80048fa:	e7c6      	b.n	800488a <_printf_common+0x3e>
 80048fc:	18e1      	adds	r1, r4, r3
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	2030      	movs	r0, #48	; 0x30
 8004902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004906:	4422      	add	r2, r4
 8004908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800490c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004910:	3302      	adds	r3, #2
 8004912:	e7c7      	b.n	80048a4 <_printf_common+0x58>
 8004914:	2301      	movs	r3, #1
 8004916:	4622      	mov	r2, r4
 8004918:	4649      	mov	r1, r9
 800491a:	4638      	mov	r0, r7
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d0e6      	beq.n	80048f0 <_printf_common+0xa4>
 8004922:	3601      	adds	r6, #1
 8004924:	e7d9      	b.n	80048da <_printf_common+0x8e>
	...

08004928 <_printf_i>:
 8004928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	7e0f      	ldrb	r7, [r1, #24]
 800492e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004930:	2f78      	cmp	r7, #120	; 0x78
 8004932:	4691      	mov	r9, r2
 8004934:	4680      	mov	r8, r0
 8004936:	460c      	mov	r4, r1
 8004938:	469a      	mov	sl, r3
 800493a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800493e:	d807      	bhi.n	8004950 <_printf_i+0x28>
 8004940:	2f62      	cmp	r7, #98	; 0x62
 8004942:	d80a      	bhi.n	800495a <_printf_i+0x32>
 8004944:	2f00      	cmp	r7, #0
 8004946:	f000 80d4 	beq.w	8004af2 <_printf_i+0x1ca>
 800494a:	2f58      	cmp	r7, #88	; 0x58
 800494c:	f000 80c0 	beq.w	8004ad0 <_printf_i+0x1a8>
 8004950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004958:	e03a      	b.n	80049d0 <_printf_i+0xa8>
 800495a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800495e:	2b15      	cmp	r3, #21
 8004960:	d8f6      	bhi.n	8004950 <_printf_i+0x28>
 8004962:	a101      	add	r1, pc, #4	; (adr r1, 8004968 <_printf_i+0x40>)
 8004964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004968:	080049c1 	.word	0x080049c1
 800496c:	080049d5 	.word	0x080049d5
 8004970:	08004951 	.word	0x08004951
 8004974:	08004951 	.word	0x08004951
 8004978:	08004951 	.word	0x08004951
 800497c:	08004951 	.word	0x08004951
 8004980:	080049d5 	.word	0x080049d5
 8004984:	08004951 	.word	0x08004951
 8004988:	08004951 	.word	0x08004951
 800498c:	08004951 	.word	0x08004951
 8004990:	08004951 	.word	0x08004951
 8004994:	08004ad9 	.word	0x08004ad9
 8004998:	08004a01 	.word	0x08004a01
 800499c:	08004a93 	.word	0x08004a93
 80049a0:	08004951 	.word	0x08004951
 80049a4:	08004951 	.word	0x08004951
 80049a8:	08004afb 	.word	0x08004afb
 80049ac:	08004951 	.word	0x08004951
 80049b0:	08004a01 	.word	0x08004a01
 80049b4:	08004951 	.word	0x08004951
 80049b8:	08004951 	.word	0x08004951
 80049bc:	08004a9b 	.word	0x08004a9b
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	1d1a      	adds	r2, r3, #4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	602a      	str	r2, [r5, #0]
 80049c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d0:	2301      	movs	r3, #1
 80049d2:	e09f      	b.n	8004b14 <_printf_i+0x1ec>
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	0607      	lsls	r7, r0, #24
 80049da:	f103 0104 	add.w	r1, r3, #4
 80049de:	6029      	str	r1, [r5, #0]
 80049e0:	d501      	bpl.n	80049e6 <_printf_i+0xbe>
 80049e2:	681e      	ldr	r6, [r3, #0]
 80049e4:	e003      	b.n	80049ee <_printf_i+0xc6>
 80049e6:	0646      	lsls	r6, r0, #25
 80049e8:	d5fb      	bpl.n	80049e2 <_printf_i+0xba>
 80049ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	da03      	bge.n	80049fa <_printf_i+0xd2>
 80049f2:	232d      	movs	r3, #45	; 0x2d
 80049f4:	4276      	negs	r6, r6
 80049f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fa:	485a      	ldr	r0, [pc, #360]	; (8004b64 <_printf_i+0x23c>)
 80049fc:	230a      	movs	r3, #10
 80049fe:	e012      	b.n	8004a26 <_printf_i+0xfe>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	1d19      	adds	r1, r3, #4
 8004a06:	6029      	str	r1, [r5, #0]
 8004a08:	0605      	lsls	r5, r0, #24
 8004a0a:	d501      	bpl.n	8004a10 <_printf_i+0xe8>
 8004a0c:	681e      	ldr	r6, [r3, #0]
 8004a0e:	e002      	b.n	8004a16 <_printf_i+0xee>
 8004a10:	0641      	lsls	r1, r0, #25
 8004a12:	d5fb      	bpl.n	8004a0c <_printf_i+0xe4>
 8004a14:	881e      	ldrh	r6, [r3, #0]
 8004a16:	4853      	ldr	r0, [pc, #332]	; (8004b64 <_printf_i+0x23c>)
 8004a18:	2f6f      	cmp	r7, #111	; 0x6f
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2308      	moveq	r3, #8
 8004a1e:	230a      	movne	r3, #10
 8004a20:	2100      	movs	r1, #0
 8004a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a26:	6865      	ldr	r5, [r4, #4]
 8004a28:	60a5      	str	r5, [r4, #8]
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	bfa2      	ittt	ge
 8004a2e:	6821      	ldrge	r1, [r4, #0]
 8004a30:	f021 0104 	bicge.w	r1, r1, #4
 8004a34:	6021      	strge	r1, [r4, #0]
 8004a36:	b90e      	cbnz	r6, 8004a3c <_printf_i+0x114>
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	d04b      	beq.n	8004ad4 <_printf_i+0x1ac>
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a42:	fb03 6711 	mls	r7, r3, r1, r6
 8004a46:	5dc7      	ldrb	r7, [r0, r7]
 8004a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a4c:	4637      	mov	r7, r6
 8004a4e:	42bb      	cmp	r3, r7
 8004a50:	460e      	mov	r6, r1
 8004a52:	d9f4      	bls.n	8004a3e <_printf_i+0x116>
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d10b      	bne.n	8004a70 <_printf_i+0x148>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	07de      	lsls	r6, r3, #31
 8004a5c:	d508      	bpl.n	8004a70 <_printf_i+0x148>
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	6861      	ldr	r1, [r4, #4]
 8004a62:	4299      	cmp	r1, r3
 8004a64:	bfde      	ittt	le
 8004a66:	2330      	movle	r3, #48	; 0x30
 8004a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a70:	1b52      	subs	r2, r2, r5
 8004a72:	6122      	str	r2, [r4, #16]
 8004a74:	f8cd a000 	str.w	sl, [sp]
 8004a78:	464b      	mov	r3, r9
 8004a7a:	aa03      	add	r2, sp, #12
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f7ff fee4 	bl	800484c <_printf_common>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d14a      	bne.n	8004b1e <_printf_i+0x1f6>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	b004      	add	sp, #16
 8004a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	f043 0320 	orr.w	r3, r3, #32
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	4833      	ldr	r0, [pc, #204]	; (8004b68 <_printf_i+0x240>)
 8004a9c:	2778      	movs	r7, #120	; 0x78
 8004a9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	6829      	ldr	r1, [r5, #0]
 8004aa6:	061f      	lsls	r7, r3, #24
 8004aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aac:	d402      	bmi.n	8004ab4 <_printf_i+0x18c>
 8004aae:	065f      	lsls	r7, r3, #25
 8004ab0:	bf48      	it	mi
 8004ab2:	b2b6      	uxthmi	r6, r6
 8004ab4:	07df      	lsls	r7, r3, #31
 8004ab6:	bf48      	it	mi
 8004ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8004abc:	6029      	str	r1, [r5, #0]
 8004abe:	bf48      	it	mi
 8004ac0:	6023      	strmi	r3, [r4, #0]
 8004ac2:	b91e      	cbnz	r6, 8004acc <_printf_i+0x1a4>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	f023 0320 	bic.w	r3, r3, #32
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	2310      	movs	r3, #16
 8004ace:	e7a7      	b.n	8004a20 <_printf_i+0xf8>
 8004ad0:	4824      	ldr	r0, [pc, #144]	; (8004b64 <_printf_i+0x23c>)
 8004ad2:	e7e4      	b.n	8004a9e <_printf_i+0x176>
 8004ad4:	4615      	mov	r5, r2
 8004ad6:	e7bd      	b.n	8004a54 <_printf_i+0x12c>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	6826      	ldr	r6, [r4, #0]
 8004adc:	6961      	ldr	r1, [r4, #20]
 8004ade:	1d18      	adds	r0, r3, #4
 8004ae0:	6028      	str	r0, [r5, #0]
 8004ae2:	0635      	lsls	r5, r6, #24
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	d501      	bpl.n	8004aec <_printf_i+0x1c4>
 8004ae8:	6019      	str	r1, [r3, #0]
 8004aea:	e002      	b.n	8004af2 <_printf_i+0x1ca>
 8004aec:	0670      	lsls	r0, r6, #25
 8004aee:	d5fb      	bpl.n	8004ae8 <_printf_i+0x1c0>
 8004af0:	8019      	strh	r1, [r3, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	6123      	str	r3, [r4, #16]
 8004af6:	4615      	mov	r5, r2
 8004af8:	e7bc      	b.n	8004a74 <_printf_i+0x14c>
 8004afa:	682b      	ldr	r3, [r5, #0]
 8004afc:	1d1a      	adds	r2, r3, #4
 8004afe:	602a      	str	r2, [r5, #0]
 8004b00:	681d      	ldr	r5, [r3, #0]
 8004b02:	6862      	ldr	r2, [r4, #4]
 8004b04:	2100      	movs	r1, #0
 8004b06:	4628      	mov	r0, r5
 8004b08:	f7fb fb6a 	bl	80001e0 <memchr>
 8004b0c:	b108      	cbz	r0, 8004b12 <_printf_i+0x1ea>
 8004b0e:	1b40      	subs	r0, r0, r5
 8004b10:	6060      	str	r0, [r4, #4]
 8004b12:	6863      	ldr	r3, [r4, #4]
 8004b14:	6123      	str	r3, [r4, #16]
 8004b16:	2300      	movs	r3, #0
 8004b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b1c:	e7aa      	b.n	8004a74 <_printf_i+0x14c>
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	462a      	mov	r2, r5
 8004b22:	4649      	mov	r1, r9
 8004b24:	4640      	mov	r0, r8
 8004b26:	47d0      	blx	sl
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d0ad      	beq.n	8004a88 <_printf_i+0x160>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	079b      	lsls	r3, r3, #30
 8004b30:	d413      	bmi.n	8004b5a <_printf_i+0x232>
 8004b32:	68e0      	ldr	r0, [r4, #12]
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	4298      	cmp	r0, r3
 8004b38:	bfb8      	it	lt
 8004b3a:	4618      	movlt	r0, r3
 8004b3c:	e7a6      	b.n	8004a8c <_printf_i+0x164>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4632      	mov	r2, r6
 8004b42:	4649      	mov	r1, r9
 8004b44:	4640      	mov	r0, r8
 8004b46:	47d0      	blx	sl
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d09d      	beq.n	8004a88 <_printf_i+0x160>
 8004b4c:	3501      	adds	r5, #1
 8004b4e:	68e3      	ldr	r3, [r4, #12]
 8004b50:	9903      	ldr	r1, [sp, #12]
 8004b52:	1a5b      	subs	r3, r3, r1
 8004b54:	42ab      	cmp	r3, r5
 8004b56:	dcf2      	bgt.n	8004b3e <_printf_i+0x216>
 8004b58:	e7eb      	b.n	8004b32 <_printf_i+0x20a>
 8004b5a:	2500      	movs	r5, #0
 8004b5c:	f104 0619 	add.w	r6, r4, #25
 8004b60:	e7f5      	b.n	8004b4e <_printf_i+0x226>
 8004b62:	bf00      	nop
 8004b64:	08005539 	.word	0x08005539
 8004b68:	0800554a 	.word	0x0800554a

08004b6c <memmove>:
 8004b6c:	4288      	cmp	r0, r1
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	eb01 0402 	add.w	r4, r1, r2
 8004b74:	d902      	bls.n	8004b7c <memmove+0x10>
 8004b76:	4284      	cmp	r4, r0
 8004b78:	4623      	mov	r3, r4
 8004b7a:	d807      	bhi.n	8004b8c <memmove+0x20>
 8004b7c:	1e43      	subs	r3, r0, #1
 8004b7e:	42a1      	cmp	r1, r4
 8004b80:	d008      	beq.n	8004b94 <memmove+0x28>
 8004b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b8a:	e7f8      	b.n	8004b7e <memmove+0x12>
 8004b8c:	4402      	add	r2, r0
 8004b8e:	4601      	mov	r1, r0
 8004b90:	428a      	cmp	r2, r1
 8004b92:	d100      	bne.n	8004b96 <memmove+0x2a>
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b9e:	e7f7      	b.n	8004b90 <memmove+0x24>

08004ba0 <_sbrk_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d06      	ldr	r5, [pc, #24]	; (8004bbc <_sbrk_r+0x1c>)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f7ff fb4a 	bl	8004244 <_sbrk>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d102      	bne.n	8004bba <_sbrk_r+0x1a>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	b103      	cbz	r3, 8004bba <_sbrk_r+0x1a>
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	20001430 	.word	0x20001430

08004bc0 <memcpy>:
 8004bc0:	440a      	add	r2, r1
 8004bc2:	4291      	cmp	r1, r2
 8004bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bc8:	d100      	bne.n	8004bcc <memcpy+0xc>
 8004bca:	4770      	bx	lr
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bd6:	4291      	cmp	r1, r2
 8004bd8:	d1f9      	bne.n	8004bce <memcpy+0xe>
 8004bda:	bd10      	pop	{r4, pc}

08004bdc <_realloc_r>:
 8004bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be0:	4680      	mov	r8, r0
 8004be2:	4614      	mov	r4, r2
 8004be4:	460e      	mov	r6, r1
 8004be6:	b921      	cbnz	r1, 8004bf2 <_realloc_r+0x16>
 8004be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bec:	4611      	mov	r1, r2
 8004bee:	f7ff bc49 	b.w	8004484 <_malloc_r>
 8004bf2:	b92a      	cbnz	r2, 8004c00 <_realloc_r+0x24>
 8004bf4:	f7ff fbda 	bl	80043ac <_free_r>
 8004bf8:	4625      	mov	r5, r4
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c00:	f000 f81b 	bl	8004c3a <_malloc_usable_size_r>
 8004c04:	4284      	cmp	r4, r0
 8004c06:	4607      	mov	r7, r0
 8004c08:	d802      	bhi.n	8004c10 <_realloc_r+0x34>
 8004c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c0e:	d812      	bhi.n	8004c36 <_realloc_r+0x5a>
 8004c10:	4621      	mov	r1, r4
 8004c12:	4640      	mov	r0, r8
 8004c14:	f7ff fc36 	bl	8004484 <_malloc_r>
 8004c18:	4605      	mov	r5, r0
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d0ed      	beq.n	8004bfa <_realloc_r+0x1e>
 8004c1e:	42bc      	cmp	r4, r7
 8004c20:	4622      	mov	r2, r4
 8004c22:	4631      	mov	r1, r6
 8004c24:	bf28      	it	cs
 8004c26:	463a      	movcs	r2, r7
 8004c28:	f7ff ffca 	bl	8004bc0 <memcpy>
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4640      	mov	r0, r8
 8004c30:	f7ff fbbc 	bl	80043ac <_free_r>
 8004c34:	e7e1      	b.n	8004bfa <_realloc_r+0x1e>
 8004c36:	4635      	mov	r5, r6
 8004c38:	e7df      	b.n	8004bfa <_realloc_r+0x1e>

08004c3a <_malloc_usable_size_r>:
 8004c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3e:	1f18      	subs	r0, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bfbc      	itt	lt
 8004c44:	580b      	ldrlt	r3, [r1, r0]
 8004c46:	18c0      	addlt	r0, r0, r3
 8004c48:	4770      	bx	lr
	...

08004c4c <_init>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr

08004c58 <_fini>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	bf00      	nop
 8004c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5e:	bc08      	pop	{r3}
 8004c60:	469e      	mov	lr, r3
 8004c62:	4770      	bx	lr
