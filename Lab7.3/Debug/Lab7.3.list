
Lab7.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800146c  0800146c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800146c  0800146c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800146c  0800146c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800146c  0800146c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800146c  0800146c  0001146c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001470  08001470  00011470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000024  08001498  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001498  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000066f5  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013a9  00000000  00000000  0002678c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  00027b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000617  00000000  00000000  00028370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c471  00000000  00000000  00028987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006475  00000000  00000000  00034df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000473d2  00000000  00000000  0003b26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002384  00000000  00000000  00082640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000849c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001454 	.word	0x08001454

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08001454 	.word	0x08001454

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	2300      	movs	r3, #0
 80003f6:	73bb      	strb	r3, [r7, #14]
 80003f8:	230f      	movs	r3, #15
 80003fa:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d039      	beq.n	8000478 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <NVIC_Init+0xbc>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	43db      	mvns	r3, r3
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f1c3 0304 	rsb	r3, r3, #4
 800041a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800041c:	7b7a      	ldrb	r2, [r7, #13]
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	fa42 f303 	asr.w	r3, r2, r3
 8000424:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	461a      	mov	r2, r3
 800042c:	7bbb      	ldrb	r3, [r7, #14]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	789a      	ldrb	r2, [r3, #2]
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	4013      	ands	r3, r2
 800043c:	b2da      	uxtb	r2, r3
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4313      	orrs	r3, r2
 8000442:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <NVIC_Init+0xc0>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4413      	add	r3, r2
 8000452:	7bfa      	ldrb	r2, [r7, #15]
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000460:	4911      	ldr	r1, [pc, #68]	; (80004a8 <NVIC_Init+0xc0>)
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7812      	ldrb	r2, [r2, #0]
 8000466:	0952      	lsrs	r2, r2, #5
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800046c:	2201      	movs	r2, #1
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000472:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000476:	e00f      	b.n	8000498 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000480:	4909      	ldr	r1, [pc, #36]	; (80004a8 <NVIC_Init+0xc0>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	0952      	lsrs	r2, r2, #5
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800048c:	2201      	movs	r2, #1
 800048e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000490:	f100 0320 	add.w	r3, r0, #32
 8000494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	e000e100 	.word	0xe000e100

080004ac <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e076      	b.n	80005b6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004c8:	2201      	movs	r2, #1
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d165      	bne.n	80005b0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	4619      	mov	r1, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	431a      	orrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d003      	beq.n	8000522 <GPIO_Init+0x76>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d12e      	bne.n	8000580 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	4619      	mov	r1, r3
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	b29b      	uxth	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	2301      	movs	r3, #1
 800055c:	408b      	lsls	r3, r1
 800055e:	43db      	mvns	r3, r3
 8000560:	401a      	ands	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	7992      	ldrb	r2, [r2, #6]
 800056e:	4611      	mov	r1, r2
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	b292      	uxth	r2, r2
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	b292      	uxth	r2, r2
 800057a:	431a      	orrs	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	b29b      	uxth	r3, r3
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2103      	movs	r1, #3
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	4619      	mov	r1, r3
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3301      	adds	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d985      	bls.n	80004c8 <GPIO_Init+0x1c>
    }
  }
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	371c      	adds	r7, #28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005e2:	787a      	ldrb	r2, [r7, #1]
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3208      	adds	r2, #8
 80005fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000602:	887b      	ldrh	r3, [r7, #2]
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	210f      	movs	r1, #15
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	8879      	ldrh	r1, [r7, #2]
 8000614:	08c9      	lsrs	r1, r1, #3
 8000616:	b289      	uxth	r1, r1
 8000618:	4608      	mov	r0, r1
 800061a:	ea02 0103 	and.w	r1, r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f100 0208 	add.w	r2, r0, #8
 8000624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000628:	887b      	ldrh	r3, [r7, #2]
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	b29b      	uxth	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3208      	adds	r2, #8
 8000634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4313      	orrs	r3, r2
 800063c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	b29b      	uxth	r3, r3
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3208      	adds	r2, #8
 800064a:	68b9      	ldr	r1, [r7, #8]
 800064c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	2302      	movs	r3, #2
 800067a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800067c:	4b4a      	ldr	r3, [pc, #296]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f003 030c 	and.w	r3, r3, #12
 8000684:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	2b08      	cmp	r3, #8
 800068a:	d011      	beq.n	80006b0 <RCC_GetClocksFreq+0x54>
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	2b08      	cmp	r3, #8
 8000690:	d844      	bhi.n	800071c <RCC_GetClocksFreq+0xc0>
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <RCC_GetClocksFreq+0x44>
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	2b04      	cmp	r3, #4
 800069c:	d004      	beq.n	80006a8 <RCC_GetClocksFreq+0x4c>
 800069e:	e03d      	b.n	800071c <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a42      	ldr	r2, [pc, #264]	; (80007ac <RCC_GetClocksFreq+0x150>)
 80006a4:	601a      	str	r2, [r3, #0]
    break;
 80006a6:	e03d      	b.n	8000724 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a41      	ldr	r2, [pc, #260]	; (80007b0 <RCC_GetClocksFreq+0x154>)
 80006ac:	601a      	str	r2, [r3, #0]
    break;
 80006ae:	e039      	b.n	8000724 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006b0:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	0d9b      	lsrs	r3, r3, #22
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006bc:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006c4:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00c      	beq.n	80006e6 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006cc:	4a38      	ldr	r2, [pc, #224]	; (80007b0 <RCC_GetClocksFreq+0x154>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d4:	4a34      	ldr	r2, [pc, #208]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 80006d6:	6852      	ldr	r2, [r2, #4]
 80006d8:	0992      	lsrs	r2, r2, #6
 80006da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	61fb      	str	r3, [r7, #28]
 80006e4:	e00b      	b.n	80006fe <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006e6:	4a31      	ldr	r2, [pc, #196]	; (80007ac <RCC_GetClocksFreq+0x150>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 80006f0:	6852      	ldr	r2, [r2, #4]
 80006f2:	0992      	lsrs	r2, r2, #6
 80006f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	3301      	adds	r3, #1
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800070e:	69fa      	ldr	r2, [r7, #28]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	fbb2 f2f3 	udiv	r2, r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
    break;
 800071a:	e003      	b.n	8000724 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <RCC_GetClocksFreq+0x150>)
 8000720:	601a      	str	r2, [r3, #0]
    break;
 8000722:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800072c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000734:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <RCC_GetClocksFreq+0x158>)
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	40da      	lsrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000754:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	0a9b      	lsrs	r3, r3, #10
 800075a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800075c:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <RCC_GetClocksFreq+0x158>)
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	40da      	lsrs	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800077c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	0b5b      	lsrs	r3, r3, #13
 8000782:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <RCC_GetClocksFreq+0x158>)
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	40da      	lsrs	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	60da      	str	r2, [r3, #12]
}
 800079c:	bf00      	nop
 800079e:	3724      	adds	r7, #36	; 0x24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800
 80007ac:	00f42400 	.word	0x00f42400
 80007b0:	017d7840 	.word	0x017d7840
 80007b4:	20000014 	.word	0x20000014

080007b8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ce:	4909      	ldr	r1, [pc, #36]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007d6:	e006      	b.n	80007e6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	43db      	mvns	r3, r3
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007e2:	4013      	ands	r3, r2
 80007e4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 800080c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080e:	4909      	ldr	r1, [pc, #36]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000816:	e006      	b.n	8000826 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 800081a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	43db      	mvns	r3, r3
 8000820:	4904      	ldr	r1, [pc, #16]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 8000822:	4013      	ands	r3, r2
 8000824:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <RCC_APB2PeriphClockCmd+0x3c>)
 800084c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800084e:	4909      	ldr	r1, [pc, #36]	; (8000874 <RCC_APB2PeriphClockCmd+0x3c>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4313      	orrs	r3, r2
 8000854:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000856:	e006      	b.n	8000866 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <RCC_APB2PeriphClockCmd+0x3c>)
 800085a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	43db      	mvns	r3, r3
 8000860:	4904      	ldr	r1, [pc, #16]	; (8000874 <RCC_APB2PeriphClockCmd+0x3c>)
 8000862:	4013      	ands	r3, r2
 8000864:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a29      	ldr	r2, [pc, #164]	; (8000934 <TIM_TimeBaseInit+0xbc>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d013      	beq.n	80008bc <TIM_TimeBaseInit+0x44>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a28      	ldr	r2, [pc, #160]	; (8000938 <TIM_TimeBaseInit+0xc0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d00f      	beq.n	80008bc <TIM_TimeBaseInit+0x44>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008a2:	d00b      	beq.n	80008bc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a25      	ldr	r2, [pc, #148]	; (800093c <TIM_TimeBaseInit+0xc4>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d007      	beq.n	80008bc <TIM_TimeBaseInit+0x44>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a24      	ldr	r2, [pc, #144]	; (8000940 <TIM_TimeBaseInit+0xc8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d003      	beq.n	80008bc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <TIM_TimeBaseInit+0xcc>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d108      	bne.n	80008ce <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80008bc:	89fb      	ldrh	r3, [r7, #14]
 80008be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008c2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	885a      	ldrh	r2, [r3, #2]
 80008c8:	89fb      	ldrh	r3, [r7, #14]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <TIM_TimeBaseInit+0xd0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d00c      	beq.n	80008f0 <TIM_TimeBaseInit+0x78>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a1c      	ldr	r2, [pc, #112]	; (800094c <TIM_TimeBaseInit+0xd4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d008      	beq.n	80008f0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80008de:	89fb      	ldrh	r3, [r7, #14]
 80008e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008e4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	891a      	ldrh	r2, [r3, #8]
 80008ea:	89fb      	ldrh	r3, [r7, #14]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	89fa      	ldrh	r2, [r7, #14]
 80008f4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	881a      	ldrh	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <TIM_TimeBaseInit+0xbc>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d003      	beq.n	8000916 <TIM_TimeBaseInit+0x9e>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a09      	ldr	r2, [pc, #36]	; (8000938 <TIM_TimeBaseInit+0xc0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d104      	bne.n	8000920 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	7a9b      	ldrb	r3, [r3, #10]
 800091a:	b29a      	uxth	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2201      	movs	r2, #1
 8000924:	829a      	strh	r2, [r3, #20]
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40010000 	.word	0x40010000
 8000938:	40010400 	.word	0x40010400
 800093c:	40000400 	.word	0x40000400
 8000940:	40000800 	.word	0x40000800
 8000944:	40000c00 	.word	0x40000c00
 8000948:	40001000 	.word	0x40001000
 800094c:	40001400 	.word	0x40001400

08000950 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d008      	beq.n	8000974 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	b29b      	uxth	r3, r3
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	b29a      	uxth	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000972:	e007      	b.n	8000984 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b29b      	uxth	r3, r3
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	801a      	strh	r2, [r3, #0]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10f      	bne.n	80009c2 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	8859      	ldrh	r1, [r3, #2]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	889a      	ldrh	r2, [r3, #4]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	891b      	ldrh	r3, [r3, #8]
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f8da 	bl	8000b68 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	88db      	ldrh	r3, [r3, #6]
 80009b8:	4619      	mov	r1, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f83c 	bl	8000a38 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80009c0:	e036      	b.n	8000a30 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d10f      	bne.n	80009ea <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	8859      	ldrh	r1, [r3, #2]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	889a      	ldrh	r2, [r3, #4]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	891b      	ldrh	r3, [r3, #8]
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f909 	bl	8000bee <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	88db      	ldrh	r3, [r3, #6]
 80009e0:	4619      	mov	r1, r3
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f844 	bl	8000a70 <TIM_SetIC2Prescaler>
}
 80009e8:	e022      	b.n	8000a30 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	2b08      	cmp	r3, #8
 80009f0:	d10f      	bne.n	8000a12 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	8859      	ldrh	r1, [r3, #2]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	889a      	ldrh	r2, [r3, #4]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	891b      	ldrh	r3, [r3, #8]
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f942 	bl	8000c88 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	88db      	ldrh	r3, [r3, #6]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f84e 	bl	8000aac <TIM_SetIC3Prescaler>
}
 8000a10:	e00e      	b.n	8000a30 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	8859      	ldrh	r1, [r3, #2]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	889a      	ldrh	r2, [r3, #4]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	891b      	ldrh	r3, [r3, #8]
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 f97a 	bl	8000d18 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	88db      	ldrh	r3, [r3, #6]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f85a 	bl	8000ae4 <TIM_SetIC4Prescaler>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	8b1b      	ldrh	r3, [r3, #24]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f023 030c 	bic.w	r3, r3, #12
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	8b1b      	ldrh	r3, [r3, #24]
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	831a      	strh	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	8b1b      	ldrh	r3, [r3, #24]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	8b1b      	ldrh	r3, [r3, #24]
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	887b      	ldrh	r3, [r7, #2]
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	831a      	strh	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	8b9b      	ldrh	r3, [r3, #28]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	f023 030c 	bic.w	r3, r3, #12
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	8b9b      	ldrh	r3, [r3, #28]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	839a      	strh	r2, [r3, #28]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	8b9b      	ldrh	r3, [r3, #28]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	8b9b      	ldrh	r3, [r3, #28]
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	839a      	strh	r2, [r3, #28]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d008      	beq.n	8000b48 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	899b      	ldrh	r3, [r3, #12]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000b46:	e009      	b.n	8000b5c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	899b      	ldrh	r3, [r3, #12]
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4013      	ands	r3, r2
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	819a      	strh	r2, [r3, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	4608      	mov	r0, r1
 8000b72:	4611      	mov	r1, r2
 8000b74:	461a      	mov	r2, r3
 8000b76:	4603      	mov	r3, r0
 8000b78:	817b      	strh	r3, [r7, #10]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	813b      	strh	r3, [r7, #8]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	82fb      	strh	r3, [r7, #22]
 8000b86:	2300      	movs	r3, #0
 8000b88:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	8c1b      	ldrh	r3, [r3, #32]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	8b1b      	ldrh	r3, [r3, #24]
 8000b9e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	8c1b      	ldrh	r3, [r3, #32]
 8000ba4:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000bac:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	893b      	ldrh	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	8afb      	ldrh	r3, [r7, #22]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000bc0:	8abb      	ldrh	r3, [r7, #20]
 8000bc2:	f023 030a 	bic.w	r3, r3, #10
 8000bc6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000bc8:	897a      	ldrh	r2, [r7, #10]
 8000bca:	8abb      	ldrh	r3, [r7, #20]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	8afa      	ldrh	r2, [r7, #22]
 8000bda:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	8aba      	ldrh	r2, [r7, #20]
 8000be0:	841a      	strh	r2, [r3, #32]
}
 8000be2:	bf00      	nop
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b087      	sub	sp, #28
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	817b      	strh	r3, [r7, #10]
 8000c00:	460b      	mov	r3, r1
 8000c02:	813b      	strh	r3, [r7, #8]
 8000c04:	4613      	mov	r3, r2
 8000c06:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	82fb      	strh	r3, [r7, #22]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	82bb      	strh	r3, [r7, #20]
 8000c10:	2300      	movs	r3, #0
 8000c12:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	8c1b      	ldrh	r3, [r3, #32]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	f023 0310 	bic.w	r3, r3, #16
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	8b1b      	ldrh	r3, [r3, #24]
 8000c28:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	8c1b      	ldrh	r3, [r3, #32]
 8000c2e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000c30:	897b      	ldrh	r3, [r7, #10]
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8000c36:	8afb      	ldrh	r3, [r7, #22]
 8000c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c3c:	051b      	lsls	r3, r3, #20
 8000c3e:	0d1b      	lsrs	r3, r3, #20
 8000c40:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	031b      	lsls	r3, r3, #12
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	8afb      	ldrh	r3, [r7, #22]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8000c4e:	893b      	ldrh	r3, [r7, #8]
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	8afb      	ldrh	r3, [r7, #22]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000c5a:	8abb      	ldrh	r3, [r7, #20]
 8000c5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000c60:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8000c62:	8a7a      	ldrh	r2, [r7, #18]
 8000c64:	8abb      	ldrh	r3, [r7, #20]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	8afa      	ldrh	r2, [r7, #22]
 8000c74:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	8aba      	ldrh	r2, [r7, #20]
 8000c7a:	841a      	strh	r2, [r3, #32]
}
 8000c7c:	bf00      	nop
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	4608      	mov	r0, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	817b      	strh	r3, [r7, #10]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	813b      	strh	r3, [r7, #8]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	82fb      	strh	r3, [r7, #22]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	82bb      	strh	r3, [r7, #20]
 8000caa:	2300      	movs	r3, #0
 8000cac:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	8c1b      	ldrh	r3, [r3, #32]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	8b9b      	ldrh	r3, [r3, #28]
 8000cc2:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	8c1b      	ldrh	r3, [r3, #32]
 8000cc8:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8000cca:	897b      	ldrh	r3, [r7, #10]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8000cd0:	8afb      	ldrh	r3, [r7, #22]
 8000cd2:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000cd6:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	893b      	ldrh	r3, [r7, #8]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8000cea:	8abb      	ldrh	r3, [r7, #20]
 8000cec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000cf0:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8000cf2:	8a7a      	ldrh	r2, [r7, #18]
 8000cf4:	8abb      	ldrh	r3, [r7, #20]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfe:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	8afa      	ldrh	r2, [r7, #22]
 8000d04:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	8aba      	ldrh	r2, [r7, #20]
 8000d0a:	841a      	strh	r2, [r3, #32]
}
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	4608      	mov	r0, r1
 8000d22:	4611      	mov	r1, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	817b      	strh	r3, [r7, #10]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	813b      	strh	r3, [r7, #8]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	82fb      	strh	r3, [r7, #22]
 8000d36:	2300      	movs	r3, #0
 8000d38:	82bb      	strh	r3, [r7, #20]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	8c1b      	ldrh	r3, [r3, #32]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	8b9b      	ldrh	r3, [r3, #28]
 8000d52:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	8c1b      	ldrh	r3, [r3, #32]
 8000d58:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000d5a:	897b      	ldrh	r3, [r7, #10]
 8000d5c:	031b      	lsls	r3, r3, #12
 8000d5e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8000d60:	8afb      	ldrh	r3, [r7, #22]
 8000d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d66:	051b      	lsls	r3, r3, #20
 8000d68:	0d1b      	lsrs	r3, r3, #20
 8000d6a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000d6c:	893b      	ldrh	r3, [r7, #8]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	8afb      	ldrh	r3, [r7, #22]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	031b      	lsls	r3, r3, #12
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	8afb      	ldrh	r3, [r7, #22]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8000d84:	8abb      	ldrh	r3, [r7, #20]
 8000d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d8a:	045b      	lsls	r3, r3, #17
 8000d8c:	0c5b      	lsrs	r3, r3, #17
 8000d8e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000d90:	8a7a      	ldrh	r2, [r7, #18]
 8000d92:	8abb      	ldrh	r3, [r7, #20]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	8afa      	ldrh	r2, [r7, #22]
 8000da2:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	8aba      	ldrh	r2, [r7, #20]
 8000da8:	841a      	strh	r2, [r3, #32]
}
 8000daa:	bf00      	nop
 8000dac:	371c      	adds	r7, #28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	8a1b      	ldrh	r3, [r3, #16]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	88db      	ldrh	r3, [r3, #6]
 8000de6:	461a      	mov	r2, r3
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	4313      	orrs	r3, r2
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	899b      	ldrh	r3, [r3, #12]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000e04:	f023 030c 	bic.w	r3, r3, #12
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	889a      	ldrh	r2, [r3, #4]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	891b      	ldrh	r3, [r3, #8]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	4313      	orrs	r3, r2
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	8a9b      	ldrh	r3, [r3, #20]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	899b      	ldrh	r3, [r3, #12]
 8000e42:	461a      	mov	r2, r3
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	4313      	orrs	r3, r2
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc00 	bl	800065c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <USART_Init+0x168>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d003      	beq.n	8000e6c <USART_Init+0xb4>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <USART_Init+0x16c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d102      	bne.n	8000e72 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	623b      	str	r3, [r7, #32]
 8000e70:	e001      	b.n	8000e76 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	899b      	ldrh	r3, [r3, #12]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	da0c      	bge.n	8000e9c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000e82:	6a3a      	ldr	r2, [r7, #32]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	009a      	lsls	r2, r3, #2
 8000e8c:	441a      	add	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	e00b      	b.n	8000eb4 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000e9c:	6a3a      	ldr	r2, [r7, #32]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	441a      	add	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <USART_Init+0x170>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	095b      	lsrs	r3, r3, #5
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	2264      	movs	r2, #100	; 0x64
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	899b      	ldrh	r3, [r3, #12]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da0c      	bge.n	8000ef8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	3332      	adds	r3, #50	; 0x32
 8000ee4:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <USART_Init+0x170>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef6:	e00b      	b.n	8000f10 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	3332      	adds	r3, #50	; 0x32
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <USART_Init+0x170>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	095b      	lsrs	r3, r3, #5
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	811a      	strh	r2, [r3, #8]
}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40011400 	.word	0x40011400
 8000f28:	51eb851f 	.word	0x51eb851f

08000f2c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d008      	beq.n	8000f50 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	899b      	ldrh	r3, [r3, #12]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000f4e:	e007      	b.n	8000f60 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	899b      	ldrh	r3, [r3, #12]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	819a      	strh	r2, [r3, #12]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	809a      	strh	r2, [r3, #4]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	889b      	ldrh	r3, [r3, #4]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fa2:	b29b      	uxth	r3, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	095b      	lsrs	r3, r3, #5
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	f003 031f 	and.w	r3, r3, #31
 8000fdc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d107      	bne.n	8000ffe <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	899b      	ldrh	r3, [r3, #12]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e011      	b.n	8001022 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d107      	bne.n	8001014 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	8a1b      	ldrh	r3, [r3, #16]
 8001008:	b29b      	uxth	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4013      	ands	r3, r2
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e006      	b.n	8001022 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	8a9b      	ldrh	r3, [r3, #20]
 8001018:	b29b      	uxth	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	4013      	ands	r3, r2
 8001020:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b29b      	uxth	r3, r3
 8001028:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800102a:	2201      	movs	r2, #1
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <USART_GetITStatus+0xa4>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800104e:	2301      	movs	r3, #1
 8001050:	74fb      	strb	r3, [r7, #19]
 8001052:	e001      	b.n	8001058 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001058:	7cfb      	ldrb	r3, [r7, #19]
}
 800105a:	4618      	mov	r0, r3
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001066:	b480      	push	{r7}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	81fb      	strh	r3, [r7, #14]
 8001076:	2300      	movs	r3, #0
 8001078:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	2201      	movs	r2, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	801a      	strh	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Handler+0x18>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <SysTick_Handler+0x18>)
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000040 	.word	0x20000040

080010bc <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c2:	b672      	cpsid	i
}
 80010c4:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 80010c6:	f240 5125 	movw	r1, #1317	; 0x525
 80010ca:	480f      	ldr	r0, [pc, #60]	; (8001108 <USART2_IRQHandler+0x4c>)
 80010cc:	f7ff ff70 	bl	8000fb0 <USART_GetITStatus>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d112      	bne.n	80010fc <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <USART2_IRQHandler+0x50>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <USART2_IRQHandler+0x4c>)
 80010de:	f7ff ff57 	bl	8000f90 <USART_ReceiveData>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 80010e8:	1cfb      	adds	r3, r7, #3
 80010ea:	4619      	mov	r1, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f822 	bl	8001136 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80010f2:	f240 5125 	movw	r1, #1317	; 0x525
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <USART2_IRQHandler+0x4c>)
 80010f8:	f7ff ffb5 	bl	8001066 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 80010fc:	b662      	cpsie	i
}
 80010fe:	bf00      	nop
    }
    __enable_irq();
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40004400 	.word	0x40004400
 800110c:	20000044 	.word	0x20000044

08001110 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	885a      	ldrh	r2, [r3, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	bf2c      	ite	cs
 8001124:	2301      	movcs	r3, #1
 8001126:	2300      	movcc	r3, #0
 8001128:	b2db      	uxtb	r3, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e021      	b.n	800118e <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	441a      	add	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	88c9      	ldrh	r1, [r1, #6]
 8001158:	440b      	add	r3, r1
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	88db      	ldrh	r3, [r3, #6]
 8001162:	3301      	adds	r3, #1
 8001164:	b29b      	uxth	r3, r3
 8001166:	b21a      	sxth	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	b29b      	uxth	r3, r3
 8001170:	b21b      	sxth	r3, r3
 8001172:	4013      	ands	r3, r2
 8001174:	b21b      	sxth	r3, r3
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	885b      	ldrh	r3, [r3, #2]
 8001180:	3301      	adds	r3, #1
 8001182:	b29a      	uxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3d8      	bcc.n	800114a <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffb9 	bl	8001110 <bufIsFull>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d011      	beq.n	80011c8 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	891a      	ldrh	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4013      	ands	r3, r2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80011c8:	b662      	cpsie	i
}
 80011ca:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <main>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
int main(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
	TimIC_Init();
 80011da:	f000 f807 	bl	80011ec <TimIC_Init>
	USART2_Init();
 80011de:	f000 f8ab 	bl	8001338 <USART2_Init>
	SystemCoreClockUpdate();
 80011e2:	f7ff f82d 	bl	8000240 <SystemCoreClockUpdate>

	while (1){
		Send_NumberPress();
 80011e6:	f000 f869 	bl	80012bc <Send_NumberPress>
 80011ea:	e7fc      	b.n	80011e6 <main+0x10>

080011ec <TimIC_Init>:
   }
}
/******************************************************************************/
void TimIC_Init(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef		GPIO_Initstructe;
	TIM_ICInitTypeDef		Tim_ICInittructure;
	NVIC_InitTypeDef		NVIC_Initstructe;

	//Cau hinh chan GPIO
	RCC_AHB1PeriphClockCmd(BUTTON_GPIO_RCC, ENABLE);
 80011f2:	2101      	movs	r1, #1
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff fadf 	bl	80007b8 <RCC_AHB1PeriphClockCmd>

	GPIO_Initstructe.GPIO_Mode = GPIO_Mode_AF;
 80011fa:	2302      	movs	r3, #2
 80011fc:	763b      	strb	r3, [r7, #24]
	GPIO_Initstructe.GPIO_OType = GPIO_OType_PP;
 80011fe:	2300      	movs	r3, #0
 8001200:	76bb      	strb	r3, [r7, #26]
	GPIO_Initstructe.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	76fb      	strb	r3, [r7, #27]
	GPIO_Initstructe.GPIO_Speed = GPIO_Speed_50MHz;
 8001206:	2302      	movs	r3, #2
 8001208:	767b      	strb	r3, [r7, #25]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_TIM2);
 800120a:	2201      	movs	r2, #1
 800120c:	2103      	movs	r1, #3
 800120e:	4826      	ldr	r0, [pc, #152]	; (80012a8 <TimIC_Init+0xbc>)
 8001210:	f7ff f9db 	bl	80005ca <GPIO_PinAFConfig>

	GPIO_Initstructe.GPIO_Pin = GPIO_Pin_3;
 8001214:	2308      	movs	r3, #8
 8001216:	617b      	str	r3, [r7, #20]
	GPIO_Init(GPIOB, &GPIO_Initstructe);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <TimIC_Init+0xbc>)
 8001220:	f7ff f944 	bl	80004ac <GPIO_Init>

	//Cau hinh Timer basic
	RCC_APB2PeriphClockCmd(TIM_RCC, ENABLE);
 8001224:	2101      	movs	r1, #1
 8001226:	2001      	movs	r0, #1
 8001228:	f7ff fb06 	bl	8000838 <RCC_APB2PeriphClockCmd>

	TIM_Initstructe.TIM_CounterMode = TIM_CounterMode_Up;
 800122c:	2300      	movs	r3, #0
 800122e:	83fb      	strh	r3, [r7, #30]
	TIM_Initstructe.TIM_ClockDivision = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_Initstructe.TIM_Prescaler = TIM_PRESCALE;
 8001234:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8001238:	83bb      	strh	r3, [r7, #28]
	TIM_Initstructe.TIM_Period = TIM_PERIOD;
 800123a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123e:	623b      	str	r3, [r7, #32]

	TIM_TimeBaseInit(TIM_INSTANCE, &TIM_Initstructe);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800124a:	f7ff fb15 	bl	8000878 <TIM_TimeBaseInit>

	//Cau hinh IC
	Tim_ICInittructure.TIM_Channel = TIM_Channel_2;
 800124e:	2304      	movs	r3, #4
 8001250:	813b      	strh	r3, [r7, #8]
	Tim_ICInittructure.TIM_ICFilter = 0x0;
 8001252:	2300      	movs	r3, #0
 8001254:	823b      	strh	r3, [r7, #16]
	Tim_ICInittructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 8001256:	230a      	movs	r3, #10
 8001258:	817b      	strh	r3, [r7, #10]
	Tim_ICInittructure.TIM_ICPrescaler = TIM_ICPSC_DIV2;
 800125a:	2304      	movs	r3, #4
 800125c:	81fb      	strh	r3, [r7, #14]
	Tim_ICInittructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 800125e:	2301      	movs	r3, #1
 8001260:	81bb      	strh	r3, [r7, #12]

	TIM_ICInit(TIM_INSTANCE, &Tim_ICInittructure);
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800126c:	f7ff fb90 	bl	8000990 <TIM_ICInit>

	TIM_Cmd(TIM_INSTANCE, ENABLE);
 8001270:	2101      	movs	r1, #1
 8001272:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001276:	f7ff fb6b 	bl	8000950 <TIM_Cmd>

	//Khoi tao ngat cho timer
	TIM_ITConfig(TIM_INSTANCE, TIM_IT_CC2, ENABLE);
 800127a:	2201      	movs	r2, #1
 800127c:	2104      	movs	r1, #4
 800127e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001282:	f7ff fc4d 	bl	8000b20 <TIM_ITConfig>

	NVIC_Initstructe.NVIC_IRQChannel = TIM2_IRQn;
 8001286:	231c      	movs	r3, #28
 8001288:	713b      	strb	r3, [r7, #4]
	NVIC_Initstructe.NVIC_IRQChannelCmd = ENABLE;
 800128a:	2301      	movs	r3, #1
 800128c:	71fb      	strb	r3, [r7, #7]
	NVIC_Initstructe.NVIC_IRQChannelPreemptionPriority = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	717b      	strb	r3, [r7, #5]
	NVIC_Initstructe.NVIC_IRQChannelSubPriority = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	71bb      	strb	r3, [r7, #6]

	NVIC_Init(&NVIC_Initstructe);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f8a5 	bl	80003e8 <NVIC_Init>

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020400 	.word	0x40020400

080012ac <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <Send_NumberPress>:
		Status = 1;
	}
}

static
void Send_NumberPress(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
	uint32_t Tim_SendData = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
	if (Status == 1){
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <Send_NumberPress+0x6c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d128      	bne.n	8001320 <Send_NumberPress+0x64>
		if (Tim_Update < Tim_Rising){
 80012ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	4a15      	ldr	r2, [pc, #84]	; (800132c <Send_NumberPress+0x70>)
 80012d6:	8812      	ldrh	r2, [r2, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d20a      	bcs.n	80012f2 <Send_NumberPress+0x36>
			Tim_SendData = (0xffff + Tim_Update) - Tim_Rising;
 80012dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <Send_NumberPress+0x70>)
 80012e4:	8812      	ldrh	r2, [r2, #0]
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012ec:	33ff      	adds	r3, #255	; 0xff
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	e006      	b.n	8001300 <Send_NumberPress+0x44>
		}
		else {
			Tim_SendData = Tim_Update - Tim_Rising;
 80012f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <Send_NumberPress+0x70>)
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	607b      	str	r3, [r7, #4]
		}
		if (Tim_SendData > TimLimit_SendData){
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001306:	d90b      	bls.n	8001320 <Send_NumberPress+0x64>
			USART_SendData(USART2, Number_Press);
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Send_NumberPress+0x74>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <Send_NumberPress+0x78>)
 8001310:	f7ff fe2c 	bl	8000f6c <USART_SendData>
			Status = 0;
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <Send_NumberPress+0x6c>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
			Number_Press = 0;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <Send_NumberPress+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000050 	.word	0x20000050
 800132c:	2000004e 	.word	0x2000004e
 8001330:	2000004c 	.word	0x2000004c
 8001334:	40004400 	.word	0x40004400

08001338 <USART2_Init>:

void USART2_Init(){
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef		GPIO_InitStructe;
	USART_InitTypeDef		USART_InitStructe;

	//Cap clock
	RCC_AHB1PeriphClockCmd(USART_GPIO_RCC, ENABLE);
 800133e:	2101      	movs	r1, #1
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fa39 	bl	80007b8 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(USART_RCC, ENABLE);
 8001346:	2101      	movs	r1, #1
 8001348:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800134c:	f7ff fa54 	bl	80007f8 <RCC_APB1PeriphClockCmd>

	//Cau hinh chan GPIO
	GPIO_InitStructe.GPIO_Mode = GPIO_Mode_AF;
 8001350:	2302      	movs	r3, #2
 8001352:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructe.GPIO_OType = GPIO_OType_PP;
 8001354:	2300      	movs	r3, #0
 8001356:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructe.GPIO_PuPd = GPIO_PuPd_UP;
 8001358:	2301      	movs	r3, #1
 800135a:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructe.GPIO_Speed = GPIO_Speed_50MHz;
 800135c:	2302      	movs	r3, #2
 800135e:	757b      	strb	r3, [r7, #21]

	GPIO_PinAFConfig(USART_GPIO_PORT, GPIO_PinSource2, GPIO_AF_USART2);
 8001360:	2207      	movs	r2, #7
 8001362:	2102      	movs	r1, #2
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <USART2_Init+0x78>)
 8001366:	f7ff f930 	bl	80005ca <GPIO_PinAFConfig>
	GPIO_InitStructe.GPIO_Pin = USART_GPIO_PIN;
 800136a:	2304      	movs	r3, #4
 800136c:	613b      	str	r3, [r7, #16]
	GPIO_Init(USART_GPIO_PORT, &GPIO_InitStructe);
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	480e      	ldr	r0, [pc, #56]	; (80013b0 <USART2_Init+0x78>)
 8001376:	f7ff f899 	bl	80004ac <GPIO_Init>

	//Cau hinh USART
	USART_InitStructe.USART_BaudRate = 9600;
 800137a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800137e:	603b      	str	r3, [r7, #0]
	USART_InitStructe.USART_WordLength = USART_WordLength_8b;
 8001380:	2300      	movs	r3, #0
 8001382:	80bb      	strh	r3, [r7, #4]
	USART_InitStructe.USART_StopBits = USART_StopBits_1;
 8001384:	2300      	movs	r3, #0
 8001386:	80fb      	strh	r3, [r7, #6]
	USART_InitStructe.USART_Parity = USART_Parity_No;
 8001388:	2300      	movs	r3, #0
 800138a:	813b      	strh	r3, [r7, #8]
	USART_InitStructe.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800138c:	2300      	movs	r3, #0
 800138e:	81bb      	strh	r3, [r7, #12]
	USART_InitStructe.USART_Mode = USART_Mode_Tx;
 8001390:	2308      	movs	r3, #8
 8001392:	817b      	strh	r3, [r7, #10]

	USART_Init(USART2, &USART_InitStructe);
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <USART2_Init+0x7c>)
 800139a:	f7ff fd0d 	bl	8000db8 <USART_Init>

	USART_Cmd(USART2, ENABLE);
 800139e:	2101      	movs	r1, #1
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <USART2_Init+0x7c>)
 80013a2:	f7ff fdc3 	bl	8000f2c <USART_Cmd>

}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40004400 	.word	0x40004400

080013b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013bc:	f7fe ff0a 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopForever+0xe>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopForever+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013e6:	f000 f811 	bl	800140c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ea:	f7ff fef4 	bl	80011d6 <main>

080013ee <LoopForever>:

LoopForever:
  b LoopForever
 80013ee:	e7fe      	b.n	80013ee <LoopForever>
  ldr   r0, =_estack
 80013f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013fc:	08001474 	.word	0x08001474
  ldr r2, =_sbss
 8001400:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001404:	20000054 	.word	0x20000054

08001408 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <__libc_init_array>:
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	4d0d      	ldr	r5, [pc, #52]	; (8001444 <__libc_init_array+0x38>)
 8001410:	4c0d      	ldr	r4, [pc, #52]	; (8001448 <__libc_init_array+0x3c>)
 8001412:	1b64      	subs	r4, r4, r5
 8001414:	10a4      	asrs	r4, r4, #2
 8001416:	2600      	movs	r6, #0
 8001418:	42a6      	cmp	r6, r4
 800141a:	d109      	bne.n	8001430 <__libc_init_array+0x24>
 800141c:	4d0b      	ldr	r5, [pc, #44]	; (800144c <__libc_init_array+0x40>)
 800141e:	4c0c      	ldr	r4, [pc, #48]	; (8001450 <__libc_init_array+0x44>)
 8001420:	f000 f818 	bl	8001454 <_init>
 8001424:	1b64      	subs	r4, r4, r5
 8001426:	10a4      	asrs	r4, r4, #2
 8001428:	2600      	movs	r6, #0
 800142a:	42a6      	cmp	r6, r4
 800142c:	d105      	bne.n	800143a <__libc_init_array+0x2e>
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	f855 3b04 	ldr.w	r3, [r5], #4
 8001434:	4798      	blx	r3
 8001436:	3601      	adds	r6, #1
 8001438:	e7ee      	b.n	8001418 <__libc_init_array+0xc>
 800143a:	f855 3b04 	ldr.w	r3, [r5], #4
 800143e:	4798      	blx	r3
 8001440:	3601      	adds	r6, #1
 8001442:	e7f2      	b.n	800142a <__libc_init_array+0x1e>
 8001444:	0800146c 	.word	0x0800146c
 8001448:	0800146c 	.word	0x0800146c
 800144c:	0800146c 	.word	0x0800146c
 8001450:	08001470 	.word	0x08001470

08001454 <_init>:
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001456:	bf00      	nop
 8001458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145a:	bc08      	pop	{r3}
 800145c:	469e      	mov	lr, r3
 800145e:	4770      	bx	lr

08001460 <_fini>:
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001462:	bf00      	nop
 8001464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001466:	bc08      	pop	{r3}
 8001468:	469e      	mov	lr, r3
 800146a:	4770      	bx	lr
