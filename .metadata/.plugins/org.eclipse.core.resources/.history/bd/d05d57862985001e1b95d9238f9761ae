 /* File name: Assignment02.IoT303x
 *
 * Description:
 *
 *
 * Last Changed By:  Author: Pham Nhat Tan
 * Revision:         Revision:
 * Last Changed:     Date: Nov 17, 2023
 *
 ******************************************************************************/
/******************************************************************************/
/*                              INCLUDE FILES                                 */
/******************************************************************************/
#include <stdint.h>
#include "timer.h"
#include "Ucglib.h"
#include "stm32f401re_gpio.h"
#include "stm32f401re_rcc.h"
#include <string.h>
#include <stdio.h>
#include "temhumsensor.h"
#include "stm32f401re_i2c.h"
/******************************************************************************/
/*                     PRIVATE TYPES and DEFINITIONS                         */
/******************************************************************************/
static ucg_t ucg;

#define GPIO_PIN_SET			1
#define GPIO_PIN_RESET			0

#define I2C_MASTER_RCC					RCC_APB1Periph_I2C1
#define I2C_MASTER_INSTANCE				I2C1

#define I2C_MASTER_GPIO_RCC				RCC_AHB1Periph_GPIOB
#define I2C_MASTER_PORT					GPIOB
#define SDA_MASTER_PIN					GPIO_Pin_9
#define SCL_MASTER_PIN					GPIO_Pin_8

#define I2C_SPEED						400000 //400KB/s

#define SLAVE_ADDRESS					0x40<<1

static uint16_t Recive_Data;

/******************************************************************************/
/*                     EXPORTED TYPES and DEFINITIONS                         */
/******************************************************************************/

/******************************************************************************/
/*                              PRIVATE DATA                                  */
/******************************************************************************/

/******************************************************************************/
/*                              EXPORTED DATA                                 */
/******************************************************************************/
uint32_t Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent){
	uint32_t TimeTotal;
	if (TimeInit >= TimeCurrent){
		TimeTotal = TimeCurrent - TimeInit;
	}else {
		TimeTotal = 0xFFFFFFFFU + TimeCurrent - TimeInit;
	}
	return TimeTotal;
}

void Delay(uint32_t ms){
	uint32_t buff = GetMilSecTick();
	while (Calculate_time(buff, GetMilSecTick()) <= ms);
}
/******************************************************************************/
/*                            PRIVATE FUNCTIONS                               */
/******************************************************************************/
void AppInitCommon();
void I2C1_Init(void);
void I2C_Start(void);
void I2C_SendAddress(uint8_t address);
void I2C_TransmitData(uint8_t data);
void I2C_Stop(void);

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
int main(void)
{
	TimerInit();
	SystemInit();
	char buffer[256] = "b0";
	uint32_t Timetick = 0;
	uint16_t  i = 0;
	AppInitCommon();
    /* Loop forever */
	while (1){
		if (Calculate_time(Timetick, GetMilSecTick()) >= 1000){
			i++;
			Timetick = GetMilSecTick();
			memset(buffer,0,sizeof(buffer));
			sprintf(buffer,"b: %d",i);
			ucg_DrawString(&ucg, 60, 24, 0,buffer);
		}
		processTimerScheduler();
	}
}
/******************************************************************************/

void AppInitCommon(){
	TimerInit();
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
	ucg_ClearScreen(&ucg);
	ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
	ucg_SetColor(&ucg, 0, 255, 255, 255);
	ucg_SetColor(&ucg, 1, 0, 0, 0);
	ucg_SetRotate180(&ucg);
}

void I2C1_Init(void){
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_APB1PeriphClockCmd(I2C_MASTER_RCC, ENABLE);
	RCC_AHB1PeriphClockCmd(I2C_MASTER_GPIO_RCC, ENABLE);

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;


	GPIO_InitStructure.GPIO_Pin = SCL_MASTER_PIN;
	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStructure);

	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStructure);

	//Chon PA8 lam chan SCL
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource8, GPIO_AF_I2C1);
	//Chon PB9 lam chan SDA
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource9, GPIO_AF_I2C1);

	//Khoi tao ngoai vi I2C3 su dung che do Master
	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;

	//Khoi tao I2C
	I2C_Init(I2C_MASTER_INSTANCE, &I2C_InitStructure);

	//Bat I2C
	I2C_Cmd(I2C_MASTER_INSTANCE, ENABLE);
}

void I2C_Start(void){
	//Doi I2Cx khong ban
	while (I2C_GetFlagStatus(I2C_MASTER_INSTANCE, I2C_FLAG_BUSY));

	I2C_GenerateSTART(I2C_MASTER_INSTANCE, ENABLE);

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_MODE_SELECT));
}

void I2C_SendAddress(uint8_t address){
	I2C_Send7bitAddress(I2C_MASTER_INSTANCE, address, I2C_Direction_Transmitter);

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
}

void I2C_TransmitData(uint8_t data){
	I2C_SendData(I2C_MASTER_INSTANCE, data);

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
}

void I2C_Stop(void){
	I2C_GenerateSTOP(I2C_MASTER_INSTANCE, ENABLE);
}

