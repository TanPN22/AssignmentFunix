 /* File name: Lab 7.1 / 7.2 / 7.3
 *
 * Description:
 *
 *
 * Last Changed By:  $Author: $Pham Nhat Tan
 * Revision:         $Revision: $
 * Last Changed:     $Date: $Nov 19, 2023
 *
 * Code sample:
 ******************************************************************************/
/******************************************************************************/
/*                              INCLUDE FILES                                 */
/******************************************************************************/
#include "stdio.h"
#include "stm32f401re_gpio.h"
#include "stm32f401re_rcc.h"
#include "stm32f401re_tim.h"
/******************************************************************************/
/*                     PRIVATE TYPES and DEFINITIONS                         */
/******************************************************************************/
#define GPIO_PIN_SET 				1
#define GPIO_PIN_RESET 				0

#define LEDGREEN1_GPIO_PORT 			GPIOA
#define LEDGREEN1_GPIO_PIN				GPIO_Pin_0

#define LEDGREEN2_GPIO_PORT 			GPIOA
#define LEDGREEN2_GPIO_PIN				GPIO_Pin_11

#define LED_GPIO_RCC					RCC_AHB1Periph_GPIOA

#define TIM_RCC							RCC_APB2Periph_TIM1
#define TIM_INSTANCE					TIM1

#define TIM_PRESCALE 					0
#define TIM_PERIOD						8399

#define SYSCFG_GPIO_RCC					RCC_APB2Periph_SYSCFG

/******************************************************************************/
/*                     EXPORTED TYPES and DEFINITIONS                         */
/******************************************************************************/


/******************************************************************************/
/*                              PRIVATE DATA                                  */
/******************************************************************************/

/******************************************************************************/
/*                              EXPORTED DATA                                 */
/******************************************************************************/

/******************************************************************************/
/*                            PRIVATE FUNCTIONS                               */
/******************************************************************************/
void TimPWM_Init(void);
static void Led_ControlPWM(uint8_t dutyCycle);
//static void Led_Init(void);
//void Led_control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status);
//void Green_control(uint8_t status);
//void LedGreen_blink(uint8_t NumBlink);
void Delay(uint32_t ms);

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
int main(void)
{
	TimPWM_Init();
	SystemCoreClockUpdate();

	while (1){
		Led_ControlPWM(50);
   }
}
/******************************************************************************/
void TimPWM_Init(void){
	//Init typedef
	TIM_TimeBaseInitTypeDef TIM_Initstructe;
	GPIO_InitTypeDef		GPIO_Initstructe;
	TIM_OCInitTypeDef		Tim_OCInittructure;

	//Cau hinh chan GPIO
	RCC_AHB1PeriphClockCmd(LED_GPIO_RCC, ENABLE);

	GPIO_Initstructe.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Initstructe.GPIO_OType = GPIO_OType_PP;
	GPIO_Initstructe.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Initstructe.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);

	GPIO_Initstructe.GPIO_Pin = GPIO_Pin_11;
	GPIO_Init(GPIOA, &GPIO_Initstructe);

	//Cau hinh Timer basic
	RCC_APB2PeriphClockCmd(TIM_RCC, ENABLE);

	TIM_Initstructe.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_Initstructe.TIM_ClockDivision = 0;
	TIM_Initstructe.TIM_RepetitionCounter = 0;
	TIM_Initstructe.TIM_Prescaler = TIM_PRESCALE;
	TIM_Initstructe.TIM_Period = TIM_PERIOD;

	TIM_TimeBaseInit(TIM_INSTANCE, &TIM_Initstructe);

	//Cau hinh PWM
	Tim_OCInittructure.TIM_OCMode = TIM_OCMode_PWM2;
	Tim_OCInittructure.TIM_OutputState = TIM_OutputState_Enable;
	Tim_OCInittructure.TIM_Pulse = 0;
	Tim_OCInittructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC4Init(TIM_INSTANCE, &Tim_OCInittructure);

	TIM_Cmd(TIM_INSTANCE, ENABLE);

	TIM_CtrlPWMOutputs(TIM_INSTANCE, ENABLE);
}

static void Led_ControlPWM(uint8_t dutyCycle){
	static uint32_t pulse_length = 0;
	if (dutyCycle >= 100) return;
	pulse_length = ((TIM_PERIOD *dutyCycle)/100);

	TIM_SetCompare4(TIM_INSTANCE, pulse_length);
}

void Delay(uint32_t ms){
	while (ms != 0){
		TIM_SetCounter(TIM_INSTANCE, 0);
		while (TIM_GetCounter(TIM_INSTANCE) != TIM_PERIOD);
		ms --;
	}
}
//static void Led_Init(void){
//	//Khai bao kieu du lieu
//	GPIO_InitTypeDef GPIO_Initstruct;
//
//	//Bat block cho GPIOA va GPIOB
//	RCC_AHB1PeriphClockCmd(LED_GPIO_RCC, ENABLE);
//
//	//Khoi tao cac gia tri ban dau cho GREEN1
//	GPIO_Initstruct.GPIO_Pin = LEDGREEN1_GPIO_PIN;
//	GPIO_Initstruct.GPIO_Mode = GPIO_Mode_OUT;
//	GPIO_Initstruct.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Initstruct.GPIO_OType = GPIO_OType_PP;
//	GPIO_Init(LEDGREEN1_GPIO_PORT, &GPIO_Initstruct);
//
//	//Khoi tao cac gia tri ban dau cho GREEN2
//	GPIO_Initstruct.GPIO_Pin = LEDGREEN2_GPIO_PIN;
//	GPIO_Initstruct.GPIO_Mode = GPIO_Mode_OUT;
//	GPIO_Initstruct.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Initstruct.GPIO_OType = GPIO_OType_PP;
//	GPIO_Init(LEDGREEN2_GPIO_PORT, &GPIO_Initstruct);
//
//}
//
//void Led_control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status){
//	if (status == GPIO_PIN_SET){
//		GPIO_SetBits(GPIOx, GPIO_Pin);
//	}else if(status == GPIO_PIN_RESET){
//		GPIO_ResetBits(GPIOx, GPIO_Pin);
//	}
//}

//void Green_control(uint8_t status){
//	if (status == GPIO_PIN_SET){
//		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_SET);
//		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_SET);
//	}else if(status == GPIO_PIN_RESET){
//		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_RESET);
//		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_RESET);
//	}
//}
//
//void LedGreen_blink(uint8_t NumBlink){
//	for (int i = 0; i < NumBlink; i++){
//		Green_control(1);
//		Delay(100);
//		Green_control(0);
//		Delay(100);
//	}
//}
