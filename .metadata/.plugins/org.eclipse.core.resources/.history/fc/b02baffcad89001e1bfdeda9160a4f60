/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
//------------------------Inc--------------------------------------------------
#include <stdint.h>
#include "stm32f401re_rcc.h"
#include "stm32f401re_gpio.h"
#include "stm32f401re_spi.h"
#include "misc.h"
#include "led.h"
#include "timer.h"

//------------------------Define-----------------------------------------------
#define GPIO_PIN_SET 					1
#define GPIO_PIN_RESET					0

#define LEDGREEN1_GPIO_PORT 			GPIOA
#define LEDGREEN1_GPIO_PIN				GPIO_Pin_0

#define LEDGREEN2_GPIO_PORT 			GPIOA
#define LEDGREEN2_GPIO_PIN				GPIO_Pin_11

#define LED_GPIO_RCC					RCC_AHB1Periph_GPIOA

#define BUTTON_GPIO_PORT 				GPIOB
#define BUTTON_GPIO_PIN					GPIO_Pin_3

#define BUTTON_GPIO_RCC					RCC_AHB1Periph_GPIOB

#define SPI_MASTER_GPIO_CLK				RCC_AHB1Periph_GPIOB
#define SPI_MASTER_CLK					RCC_APB1Periph_SPI2
#define SPI_MASTER_GPIO_PORT			GPIOB
#define SPI_MASTER_INSTANCE				SPI2
#define SPI_MASTER_NSS_PIN				GPIO_Pin_12
#define SPI_MASTER_SCK_PIN				GPIO_Pin_13
#define SPI_MASTER_MISO_PIN				GPIO_Pin_14
#define SPI_MASTER_MOSI_PIN				GPIO_Pin_15

#define SPI_SLAVE_GPIO_CLK				RCC_AHB1Periph_GPIOA
#define SPI_SLAVE_CLK					RCC_APB2Periph_SPI1
#define SPI_SLAVE_GPIO_PORT				GPIOA
#define SPI_SLAVE_INSTANCE				SPI1
#define SPI_SLAVE_NSS_PIN				GPIO_Pin_4
#define SPI_SLAVE_SCK_PIN				GPIO_Pin_5
#define SPI_SLAVE_MISO_PIN				GPIO_Pin_6
#define SPI_SLAVE_MOSI_PIN				GPIO_Pin_7

#define SLAVE_DATA_CHECK				0xB1

volatile uint16_t Recive_Data_Slave = 0;

//--------------------Nguyen mau ham------------------------------
void 				AppInitCommon(void);
void 				SPI2_Init(void);
void 				SPI1_Init(void);
void 				SPI_TransmitData(SPI_TypeDef *SPIx, uint8_t data);
void 				SPI1_IRQHandler(void);
void 				Green_control(uint8_t status);
void 				Delay(uint32_t ms);
static void 		Button_Init(void);
static void 		Led_Init(void);
static uint32_t 	Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent);
static uint8_t 		Button_GetLogic(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

int main(void)
{
	//Init all the Parameter
	AppInitCommon();

	while (1){
		if (Button_GetLogic(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == Bit_RESET){
			SPI_TransmitData(SPI_MASTER_INSTANCE, 0xB1);
		}
		if (Recive_Data_Slave == SLAVE_DATA_CHECK)
		{
			for (int i = 0; i<5; i++){
				Green_control(1);
				Delay(1000);
				Green_control(0);
				Delay(1000);
			}
			Recive_Data_Slave = 0;
		}
	}
}


//----------------------Cac ham-----------------------------------
/**
 * @func   AppInitCommon
 * @brief  Initialize common application
 * @param  None
 * @retval None
 */
void AppInitCommon(void){

	//Initzation the SPI1
	SPI1_Init();

	//Initzation the SPI2
	SPI2_Init();

	//Initzation the Led
	Led_Init();

	//Initzation the Button
	Button_Init();

	//Initzation the Timer
	TimerInit();

	//Initzation the system.
	SystemCoreClockUpdate();
	SystemInit();
}

/**
 * @func   SPI2_Init
 * @brief  Initialize the SPI2
 * @param  None
 * @retval None
 */
void SPI2_Init(void){
	GPIO_InitTypeDef	GPIO_InitStructure;
	SPI_InitTypeDef		SPI_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_AHB1PeriphClockCmd(SPI_MASTER_GPIO_CLK, ENABLE);

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_OType_PP;

	GPIO_InitStructure.GPIO_Pin = SPI_MASTER_SCK_PIN | SPI_MASTER_MISO_PIN | SPI_MASTER_MOSI_PIN;
	GPIO_Init(SPI_MASTER_GPIO_PORT, &GPIO_InitStructure);

	//Khoi tao SPI2
	GPIO_PinAFConfig(SPI_MASTER_GPIO_PORT, GPIO_PinSource13, GPIO_AF_SPI2);
	GPIO_PinAFConfig(SPI_MASTER_GPIO_PORT, GPIO_PinSource14, GPIO_AF_SPI2);
	GPIO_PinAFConfig(SPI_MASTER_GPIO_PORT, GPIO_PinSource15, GPIO_AF_SPI2);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	GPIO_InitStructure.GPIO_Pin = SPI_MASTER_NSS_PIN;
	GPIO_Init(SPI_MASTER_GPIO_PORT, &GPIO_InitStructure);

	//Khoi tao ngoai vi SPI su dung che do Master
	//Bat clock cho APB1
	RCC_APB1PeriphClockCmd(SPI_MASTER_CLK, ENABLE);

	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;

	//Khoi tao Fullduplex (Song cong)
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;

	//Khoi tao moi lan truyen 8 bits
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;

	//Khoi tao CPOL = 0
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;

	//Khoi tao lay mau tai luc len
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;

	//Dieu khien chan NSS mem
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;

	//Khoi tao baudRate scale 4
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;

	//Bit dau tien la LSB
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;

	//Khoi tao SPI
	SPI_Init(SPI_MASTER_INSTANCE, &SPI_InitStructure);

	//Bat SPI
	SPI_Cmd(SPI_MASTER_INSTANCE, ENABLE);
}

/**
 * @func   SPI1_Init
 * @brief  Initialize the SPI2
 * @param  None
 * @retval None
 */
void SPI1_Init(void){
	GPIO_InitTypeDef	GPIO_InitStructure;
	SPI_InitTypeDef		SPI_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_AHB1PeriphClockCmd(SPI_SLAVE_GPIO_CLK, ENABLE);

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_OType_PP;

	GPIO_InitStructure.GPIO_Pin = SPI_SLAVE_SCK_PIN | SPI_SLAVE_MISO_PIN | SPI_SLAVE_MOSI_PIN;
	GPIO_Init(SPI_SLAVE_GPIO_PORT, &GPIO_InitStructure);

	//Khoi tao SPI2
	GPIO_PinAFConfig(SPI_SLAVE_GPIO_PORT, GPIO_PinSource5, GPIO_AF_SPI1);
	GPIO_PinAFConfig(SPI_SLAVE_GPIO_PORT, GPIO_PinSource6, GPIO_AF_SPI1);
	GPIO_PinAFConfig(SPI_SLAVE_GPIO_PORT, GPIO_PinSource7, GPIO_AF_SPI1);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	GPIO_InitStructure.GPIO_Pin = SPI_SLAVE_NSS_PIN;
	GPIO_Init(SPI_SLAVE_GPIO_PORT, &GPIO_InitStructure);

	//Khoi tao ngoai vi SPI su dung che do Master
	//Bat clock cho APB1
	RCC_APB2PeriphClockCmd(SPI_SLAVE_CLK, ENABLE);

	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;

	//Khoi tao Fullduplex (Song cong)
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;

	//Khoi tao moi lan truyen 8 bits
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;

	//Khoi tao CPOL = 0
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;

	//Khoi tao lay mau tai luc len
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;

	//Dieu khien chan NSS mem
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;

	//Khoi tao baudRate scale 4
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;

	//Bit dau tien la LSB
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;

	//Khoi tao SPI
	SPI_Init(SPI_SLAVE_INSTANCE, &SPI_InitStructure);

	//Bat SPI
	SPI_Cmd(SPI_SLAVE_INSTANCE, ENABLE);

	//Cau hinh ngat NVIC
	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

	NVIC_Init(&NVIC_InitStructure);

	SPI_I2S_ITConfig(SPI_SLAVE_INSTANCE, SPI_I2S_IT_RXNE, ENABLE);
}

/**
 * @func   Led_Init
 * @brief  Initialize the LED
 * @param  None
 * @retval None
 */
static void Led_Init(void){
	//Khai bao kieu du lieu
	GPIO_InitTypeDef GPIO_Initstruct;

	//Bat block cho GPIO
	RCC_AHB1PeriphClockCmd(LED_GPIO_RCC, ENABLE);

	//Khoi tao cac gia tri ban dau cho GREEN1
	GPIO_Initstruct.GPIO_Pin = LEDGREEN1_GPIO_PIN | LEDGREEN2_GPIO_PIN;
	GPIO_Initstruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_Initstruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Initstruct.GPIO_OType = GPIO_OType_PP;
	GPIO_Init(LEDGREEN1_GPIO_PORT, &GPIO_Initstruct);
}

/**
 * @func   Button_Init
 * @brief  Initialize the Button
 * @param  None
 * @retval None
 */
static void Button_Init(void){
	//Khai bao kieu du lieu
	GPIO_InitTypeDef GPIO_Initstruct2;

	//Bat Clock cho GPIOB
	RCC_AHB1PeriphClockCmd(BUTTON_GPIO_RCC, ENABLE);

	//Khoi tao ngat cho nut nhan 2
	//Khoi tao cac gia tri ban dau cho chan GPIO
	GPIO_Initstruct2.GPIO_Pin = BUTTON_GPIO_PIN;
	GPIO_Initstruct2.GPIO_Mode = GPIO_Mode_IN;
	GPIO_Initstruct2.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Initstruct2.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_Initstruct2);
}

/**
 * @func   CalculateTime
 * @brief  Calculate the time betwen 2 time.
 * @param  Time now, Time Miles
 * @retval Timenow - Time Miles
 */
static uint32_t Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent){
	uint32_t TimeTotal;
	if (TimeInit >= TimeCurrent){
		TimeTotal = TimeCurrent - TimeInit;
	}else {
		TimeTotal = 0xFFFFFFFFU + TimeCurrent - TimeInit;
	}
	return TimeTotal;
}

/**
 * @func   Delay
 * @brief  Delay the time
 * @param  Time delay
 * @retval None
 */
void Delay(uint32_t ms){
	uint32_t buff = GetMilSecTick();
	while (Calculate_time(buff, GetMilSecTick()) <= ms);
}

/**
 * @func   SPI_TransmitData
 * @brief  Start transmit the data
 * @param  SPIx, Data transmit
 * @retval None
 */
void SPI_TransmitData(SPI_TypeDef *SPIx, uint8_t data){
	//Bat chan NSS de bao tin hieu truyen
	GPIO_SetBits(SPI_MASTER_GPIO_PORT, SPI_MASTER_NSS_PIN);

	SPI_I2S_SendData(SPIx, data);

	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET);

	//Tat chan NSS de ket thuc truyen
	GPIO_ResetBits(SPI_MASTER_GPIO_PORT, SPI_MASTER_NSS_PIN);

}
/**
 * @func   Button_GetLogic
 * @brief  Start transmit the data
 * @param  GPIOx, GPIO_Pin
 * @retval Logic of button(0 or 1)
 */
static uint8_t Button_GetLogic(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
	return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin);
}

/**
 * @func   Led_control
 * @brief  Control the status of LED
 * @param  GPIOx, GPIO_Pin, status of led
 * @retval None
 */
void Led_control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status){
	if (status == GPIO_PIN_SET){
		GPIO_SetBits(GPIOx, GPIO_Pin);
	}else if(status == GPIO_PIN_RESET){
		GPIO_ResetBits(GPIOx, GPIO_Pin);
	}
}

/**
 * @func   Green_control
 * @brief  Control all the Green Led
 * @param  status of led
 * @retval None
 */
void Green_control(uint8_t status){
	if (status == GPIO_PIN_SET){
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_SET);
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_SET);
	}else if(status == GPIO_PIN_RESET){
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_RESET);
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_RESET);
	}
}

/**
 * @func   SPI1_IRQHandler
 * @brief  The Interupt function of the SPI1. If get a IT signal from SPI1, all Command in this function will run.
 * @param  None
 * @retval None
 */
void SPI1_IRQHandler(void){
	if (SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) == SET){
		Recive_Data_Slave = SPI_I2S_ReceiveData(SPI1);
	}
	SPI_I2S_ClearITPendingBit(SPI1, SPI_I2S_IT_RXNE);
}

