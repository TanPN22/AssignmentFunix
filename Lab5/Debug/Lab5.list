
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001638  08001638  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001638  08001638  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001638  08001638  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001638  08001638  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001638  08001638  00011638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800163c  0800163c  0001163c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000024  08001664  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001664  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000059b8  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000156b  00000000  00000000  00025a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  00026fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051f  00000000  00000000  000276c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bb5d  00000000  00000000  00027bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000061eb  00000000  00000000  0003373c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00040d37  00000000  00000000  00039927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cec  00000000  00000000  0007a660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0007c34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001620 	.word	0x08001620

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08001620 	.word	0x08001620

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	2300      	movs	r3, #0
 80003f6:	73bb      	strb	r3, [r7, #14]
 80003f8:	230f      	movs	r3, #15
 80003fa:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d039      	beq.n	8000478 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <NVIC_Init+0xbc>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	43db      	mvns	r3, r3
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f1c3 0304 	rsb	r3, r3, #4
 800041a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800041c:	7b7a      	ldrb	r2, [r7, #13]
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	fa42 f303 	asr.w	r3, r2, r3
 8000424:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	461a      	mov	r2, r3
 800042c:	7bbb      	ldrb	r3, [r7, #14]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	789a      	ldrb	r2, [r3, #2]
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	4013      	ands	r3, r2
 800043c:	b2da      	uxtb	r2, r3
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4313      	orrs	r3, r2
 8000442:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <NVIC_Init+0xc0>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4413      	add	r3, r2
 8000452:	7bfa      	ldrb	r2, [r7, #15]
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000460:	4911      	ldr	r1, [pc, #68]	; (80004a8 <NVIC_Init+0xc0>)
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7812      	ldrb	r2, [r2, #0]
 8000466:	0952      	lsrs	r2, r2, #5
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800046c:	2201      	movs	r2, #1
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000472:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000476:	e00f      	b.n	8000498 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000480:	4909      	ldr	r1, [pc, #36]	; (80004a8 <NVIC_Init+0xc0>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	0952      	lsrs	r2, r2, #5
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800048c:	2201      	movs	r2, #1
 800048e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000490:	f100 0320 	add.w	r3, r0, #32
 8000494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	e000e100 	.word	0xe000e100

080004ac <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e076      	b.n	80005b6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004c8:	2201      	movs	r2, #1
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d165      	bne.n	80005b0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	4619      	mov	r1, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	431a      	orrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d003      	beq.n	8000522 <GPIO_Init+0x76>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d12e      	bne.n	8000580 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	4619      	mov	r1, r3
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	b29b      	uxth	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	2301      	movs	r3, #1
 800055c:	408b      	lsls	r3, r1
 800055e:	43db      	mvns	r3, r3
 8000560:	401a      	ands	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	7992      	ldrb	r2, [r2, #6]
 800056e:	4611      	mov	r1, r2
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	b292      	uxth	r2, r2
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	b292      	uxth	r2, r2
 800057a:	431a      	orrs	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	b29b      	uxth	r3, r3
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2103      	movs	r1, #3
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	4619      	mov	r1, r3
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3301      	adds	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d985      	bls.n	80004c8 <GPIO_Init+0x1c>
    }
  }
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	371c      	adds	r7, #28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	691a      	ldr	r2, [r3, #16]
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	4013      	ands	r3, r2
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e001      	b.n	80005f0 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	831a      	strh	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	887a      	ldrh	r2, [r7, #2]
 800062c:	835a      	strh	r2, [r3, #26]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	807b      	strh	r3, [r7, #2]
 8000646:	4613      	mov	r3, r2
 8000648:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000652:	787a      	ldrb	r2, [r7, #1]
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	08db      	lsrs	r3, r3, #3
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3208      	adds	r2, #8
 800066e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	f003 0307 	and.w	r3, r3, #7
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	210f      	movs	r1, #15
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	8879      	ldrh	r1, [r7, #2]
 8000684:	08c9      	lsrs	r1, r1, #3
 8000686:	b289      	uxth	r1, r1
 8000688:	4608      	mov	r0, r1
 800068a:	ea02 0103 	and.w	r1, r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f100 0208 	add.w	r2, r0, #8
 8000694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	b29b      	uxth	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3208      	adds	r2, #8
 80006a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3208      	adds	r2, #8
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006da:	2300      	movs	r3, #0
 80006dc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80006de:	2304      	movs	r3, #4
 80006e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80006e2:	4b57      	ldr	r3, [pc, #348]	; (8000840 <I2C_Init+0x174>)
 80006e4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	889b      	ldrh	r3, [r3, #4]
 80006ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80006ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fa3d 	bl	8000b78 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	4a4f      	ldr	r2, [pc, #316]	; (8000844 <I2C_Init+0x178>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800070e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000712:	4313      	orrs	r3, r2
 8000714:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800071a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	f023 0301 	bic.w	r3, r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a44      	ldr	r2, [pc, #272]	; (8000848 <I2C_Init+0x17c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d815      	bhi.n	8000766 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800074a:	2b03      	cmp	r3, #3
 800074c:	d801      	bhi.n	8000752 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800074e:	2304      	movs	r3, #4
 8000750:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000752:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000756:	4313      	orrs	r3, r2
 8000758:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800075a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800075c:	3301      	adds	r3, #1
 800075e:	b29a      	uxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	841a      	strh	r2, [r3, #32]
 8000764:	e040      	b.n	80007e8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	88db      	ldrh	r3, [r3, #6]
 800076a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800076e:	4293      	cmp	r3, r2
 8000770:	d109      	bne.n	8000786 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4613      	mov	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000784:	e00e      	b.n	80007a4 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4613      	mov	r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	009a      	lsls	r2, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	69fa      	ldr	r2, [r7, #28]
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800079c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80007a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d103      	bne.n	80007b6 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80007ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80007b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80007b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b29b      	uxth	r3, r3
 80007be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80007c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80007c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80007c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ce:	fb02 f303 	mul.w	r3, r2, r3
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <I2C_Init+0x180>)
 80007d4:	fb82 1203 	smull	r1, r2, r2, r3
 80007d8:	1192      	asrs	r2, r2, #6
 80007da:	17db      	asrs	r3, r3, #31
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b29b      	uxth	r3, r3
 80007e0:	3301      	adds	r3, #1
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007ec:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000804:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000806:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800080a:	f023 0302 	bic.w	r3, r3, #2
 800080e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	889a      	ldrh	r2, [r3, #4]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	895b      	ldrh	r3, [r3, #10]
 8000818:	4313      	orrs	r3, r2
 800081a:	b29a      	uxth	r2, r3
 800081c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081e:	4313      	orrs	r3, r2
 8000820:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000826:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	899a      	ldrh	r2, [r3, #12]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	891b      	ldrh	r3, [r3, #8]
 8000830:	4313      	orrs	r3, r2
 8000832:	b29a      	uxth	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	811a      	strh	r2, [r3, #8]
}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	007a1200 	.word	0x007a1200
 8000844:	431bde83 	.word	0x431bde83
 8000848:	000186a0 	.word	0x000186a0
 800084c:	10624dd3 	.word	0x10624dd3

08000850 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d008      	beq.n	8000874 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	b29b      	uxth	r3, r3
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000872:	e007      	b.n	8000884 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b29b      	uxth	r3, r3
 800087a:	f023 0301 	bic.w	r3, r3, #1
 800087e:	b29a      	uxth	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	801a      	strh	r2, [r3, #0]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d008      	beq.n	80008b4 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 80008b2:	e007      	b.n	80008c4 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008be:	b29a      	uxth	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	801a      	strh	r2, [r3, #0]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80008f2:	e007      	b.n	8000904 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008fe:	b29a      	uxth	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	801a      	strh	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
 800091c:	4613      	mov	r3, r2
 800091e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000920:	78bb      	ldrb	r3, [r7, #2]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	70fb      	strb	r3, [r7, #3]
 800092e:	e003      	b.n	8000938 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	f023 0301 	bic.w	r3, r3, #1
 8000936:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	b29a      	uxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	821a      	strh	r2, [r3, #16]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d008      	beq.n	8000970 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	b29b      	uxth	r3, r3
 8000964:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000968:	b29a      	uxth	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 800096e:	e007      	b.n	8000980 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	b29b      	uxth	r3, r3
 8000976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800097a:	b29a      	uxth	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	801a      	strh	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	b29a      	uxth	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	821a      	strh	r2, [r3, #16]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	8a1b      	ldrh	r3, [r3, #16]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	807b      	strh	r3, [r7, #2]
 80009d4:	4613      	mov	r3, r2
 80009d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80009d8:	787b      	ldrb	r3, [r7, #1]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	887b      	ldrh	r3, [r7, #2]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 80009ee:	e009      	b.n	8000a04 <I2C_ITConfig+0x3c>
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	889b      	ldrh	r3, [r3, #4]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	887b      	ldrh	r3, [r7, #2]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4013      	ands	r3, r2
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	809a      	strh	r2, [r3, #4]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	8a9b      	ldrh	r3, [r3, #20]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	8b1b      	ldrh	r3, [r3, #24]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	041b      	lsls	r3, r3, #16
 8000a3e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a4a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	4013      	ands	r3, r2
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d102      	bne.n	8000a5e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	75fb      	strb	r3, [r7, #23]
 8000a5c:	e001      	b.n	8000a62 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	371c      	adds	r7, #28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	8a9b      	ldrh	r3, [r3, #20]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	8b1b      	ldrh	r3, [r3, #24]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	041b      	lsls	r3, r3, #16
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000aa4:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8000aa6:	697b      	ldr	r3, [r7, #20]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	0f1b      	lsrs	r3, r3, #28
 8000ad2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ada:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3314      	adds	r3, #20
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e005      	b.n	8000af6 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	0c1b      	lsrs	r3, r3, #16
 8000aee:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3318      	adds	r3, #24
 8000af4:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000b02:	2301      	movs	r3, #1
 8000b04:	75fb      	strb	r3, [r7, #23]
 8000b06:	e001      	b.n	8000b0c <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b2e:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	829a      	strh	r2, [r3, #20]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	829a      	strh	r2, [r3, #20]
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	2302      	movs	r3, #2
 8000b96:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b98:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 030c 	and.w	r3, r3, #12
 8000ba0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d011      	beq.n	8000bcc <RCC_GetClocksFreq+0x54>
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d844      	bhi.n	8000c38 <RCC_GetClocksFreq+0xc0>
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <RCC_GetClocksFreq+0x44>
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d004      	beq.n	8000bc4 <RCC_GetClocksFreq+0x4c>
 8000bba:	e03d      	b.n	8000c38 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a42      	ldr	r2, [pc, #264]	; (8000cc8 <RCC_GetClocksFreq+0x150>)
 8000bc0:	601a      	str	r2, [r3, #0]
    break;
 8000bc2:	e03d      	b.n	8000c40 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a41      	ldr	r2, [pc, #260]	; (8000ccc <RCC_GetClocksFreq+0x154>)
 8000bc8:	601a      	str	r2, [r3, #0]
    break;
 8000bca:	e039      	b.n	8000c40 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000bcc:	4b3d      	ldr	r3, [pc, #244]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	0d9b      	lsrs	r3, r3, #22
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000be0:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00c      	beq.n	8000c02 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000be8:	4a38      	ldr	r2, [pc, #224]	; (8000ccc <RCC_GetClocksFreq+0x154>)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf0:	4a34      	ldr	r2, [pc, #208]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000bf2:	6852      	ldr	r2, [r2, #4]
 8000bf4:	0992      	lsrs	r2, r2, #6
 8000bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	e00b      	b.n	8000c1a <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <RCC_GetClocksFreq+0x150>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000c0c:	6852      	ldr	r2, [r2, #4]
 8000c0e:	0992      	lsrs	r2, r2, #6
 8000c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	0c1b      	lsrs	r3, r3, #16
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	3301      	adds	r3, #1
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
    break;
 8000c36:	e003      	b.n	8000c40 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <RCC_GetClocksFreq+0x150>)
 8000c3c:	601a      	str	r2, [r3, #0]
    break;
 8000c3e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c48:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <RCC_GetClocksFreq+0x158>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	40da      	lsrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c70:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	0a9b      	lsrs	r3, r3, #10
 8000c76:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c78:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <RCC_GetClocksFreq+0x158>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <RCC_GetClocksFreq+0x14c>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000c98:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	0b5b      	lsrs	r3, r3, #13
 8000c9e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <RCC_GetClocksFreq+0x158>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	40da      	lsrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3724      	adds	r7, #36	; 0x24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	00f42400 	.word	0x00f42400
 8000ccc:	017d7840 	.word	0x017d7840
 8000cd0:	20000014 	.word	0x20000014

08000cd4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cea:	4909      	ldr	r1, [pc, #36]	; (8000d10 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000cf2:	e006      	b.n	8000d02 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4904      	ldr	r1, [pc, #16]	; (8000d10 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d006      	beq.n	8000d34 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2a:	4909      	ldr	r1, [pc, #36]	; (8000d50 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000d32:	e006      	b.n	8000d42 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4904      	ldr	r1, [pc, #16]	; (8000d50 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	889b      	ldrh	r3, [r3, #4]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d66:	b29b      	uxth	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000d90:	887b      	ldrh	r3, [r7, #2]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	095b      	lsrs	r3, r3, #5
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	f003 031f 	and.w	r3, r3, #31
 8000da0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d107      	bne.n	8000dc2 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	899b      	ldrh	r3, [r3, #12]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e011      	b.n	8000de6 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d107      	bne.n	8000dd8 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	8a1b      	ldrh	r3, [r3, #16]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e006      	b.n	8000de6 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	8a9b      	ldrh	r3, [r3, #20]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	4013      	ands	r3, r2
 8000de4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000dee:	2201      	movs	r2, #1
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4013      	ands	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <USART_GetITStatus+0xa4>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000e12:	2301      	movs	r3, #1
 8000e14:	74fb      	strb	r3, [r7, #19]
 8000e16:	e001      	b.n	8000e1c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000e1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	460b      	mov	r3, r1
 8000e34:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	81fb      	strh	r3, [r7, #14]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	2201      	movs	r2, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000e4e:	89bb      	ldrh	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	801a      	strh	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da0b      	bge.n	8000e90 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <NVIC_SetPriority+0x4c>)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	3b04      	subs	r3, #4
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8e:	e009      	b.n	8000ea4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <NVIC_SetPriority+0x50>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ffc2 	bl	8000e64 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8000f02:	463b      	mov	r3, r7
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe37 	bl	8000b78 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <TimerInit+0x3c>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	099b      	lsrs	r3, r3, #6
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ffcf 	bl	8000eb8 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ffa0 	bl	8000e64 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8000f24:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <TimerInit+0x40>)
 8000f2c:	f000 f8af 	bl	800108e <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	10624dd3 	.word	0x10624dd3
 8000f3c:	20000040 	.word	0x20000040

08000f40 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <GetMilSecTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200001c0 	.word	0x200001c0

08000f58 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Handler+0x18>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <SysTick_Handler+0x18>)
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	200001c0 	.word	0x200001c0

08000f74 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7a:	b672      	cpsid	i
}
 8000f7c:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000f7e:	f240 5125 	movw	r1, #1317	; 0x525
 8000f82:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <USART2_IRQHandler+0x4c>)
 8000f84:	f7ff fef6 	bl	8000d74 <USART_GetITStatus>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d112      	bne.n	8000fb4 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <USART2_IRQHandler+0x50>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <USART2_IRQHandler+0x4c>)
 8000f96:	f7ff fedd 	bl	8000d54 <USART_ReceiveData>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000fa0:	1cfb      	adds	r3, r7, #3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f822 	bl	8000fee <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000faa:	f240 5125 	movw	r1, #1317	; 0x525
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <USART2_IRQHandler+0x4c>)
 8000fb0:	f7ff ff3b 	bl	8000e2a <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fb4:	b662      	cpsie	i
}
 8000fb6:	bf00      	nop
    }
    __enable_irq();
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	200001c4 	.word	0x200001c4

08000fc8 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	885a      	ldrh	r2, [r3, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	bf2c      	ite	cs
 8000fdc:	2301      	movcs	r3, #1
 8000fde:	2300      	movcc	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e021      	b.n	8001046 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	441a      	add	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	88c9      	ldrh	r1, [r1, #6]
 8001010:	440b      	add	r3, r1
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	88db      	ldrh	r3, [r3, #6]
 800101a:	3301      	adds	r3, #1
 800101c:	b29b      	uxth	r3, r3
 800101e:	b21a      	sxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	3b01      	subs	r3, #1
 8001026:	b29b      	uxth	r3, r3
 8001028:	b21b      	sxth	r3, r3
 800102a:	4013      	ands	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	885b      	ldrh	r3, [r3, #2]
 8001038:	3301      	adds	r3, #1
 800103a:	b29a      	uxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	3301      	adds	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3d8      	bcc.n	8001002 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffb9 	bl	8000fc8 <bufIsFull>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d011      	beq.n	8001080 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	891a      	ldrh	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	b29b      	uxth	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	b29b      	uxth	r3, r3
 800106a:	b21a      	sxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	3b01      	subs	r3, #1
 8001072:	b29b      	uxth	r3, r3
 8001074:	b21b      	sxth	r3, r3
 8001076:	4013      	ands	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001080:	b662      	cpsie	i
}
 8001082:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	70fb      	strb	r3, [r7, #3]
 800109a:	4613      	mov	r3, r2
 800109c:	803b      	strh	r3, [r7, #0]
    while (size--) {
 800109e:	e004      	b.n	80010aa <memsetl+0x1c>
        *dst++ = value;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	701a      	strb	r2, [r3, #0]
    while (size--) {
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	1e5a      	subs	r2, r3, #1
 80010ae:	803a      	strh	r2, [r7, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f5      	bne.n	80010a0 <memsetl+0x12>
    }    
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <Calculate_time>:
void I2C_Stop(void);
static uint8_t Button_GetLogic(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
void Led_control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status);
void Green_control(uint8_t status);

uint32_t Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent){
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
	uint32_t TimeTotal;
	if (TimeInit >= TimeCurrent){
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d304      	bcc.n	80010de <Calculate_time+0x1c>
		TimeTotal = TimeCurrent - TimeInit;
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e004      	b.n	80010e8 <Calculate_time+0x26>
	}else {
		TimeTotal = 0xFFFFFFFFU + TimeCurrent - TimeInit;
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
	}
	return TimeTotal;
 80010e8:	68fb      	ldr	r3, [r7, #12]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <Delay>:

void Delay(uint32_t ms){
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	uint32_t buff = GetMilSecTick();
 80010fe:	f7ff ff1f 	bl	8000f40 <GetMilSecTick>
 8001102:	60f8      	str	r0, [r7, #12]
	while (Calculate_time(buff, GetMilSecTick()) <= ms);
 8001104:	bf00      	nop
 8001106:	f7ff ff1b 	bl	8000f40 <GetMilSecTick>
 800110a:	4603      	mov	r3, r0
 800110c:	4619      	mov	r1, r3
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f7ff ffd7 	bl	80010c2 <Calculate_time>
 8001114:	4602      	mov	r2, r0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4293      	cmp	r3, r2
 800111a:	d2f4      	bcs.n	8001106 <Delay+0x10>
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <main>:

int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	I2C1_Init();
 800112e:	f000 f895 	bl	800125c <I2C1_Init>
	I2C3_Init();
 8001132:	f000 f83f 	bl	80011b4 <I2C3_Init>
	Led_Init();
 8001136:	f000 f937 	bl	80013a8 <Led_Init>
	Button_Init();
 800113a:	f000 f951 	bl	80013e0 <Button_Init>
	TimerInit();
 800113e:	f7ff fedd 	bl	8000efc <TimerInit>
	SystemCoreClockUpdate();
 8001142:	f7ff f87d 	bl	8000240 <SystemCoreClockUpdate>
	SystemInit();
 8001146:	f7ff f845 	bl	80001d4 <SystemInit>

	while (1){
		if (Button_GetLogic(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == Bit_RESET){
 800114a:	2108      	movs	r1, #8
 800114c:	4817      	ldr	r0, [pc, #92]	; (80011ac <main+0x84>)
 800114e:	f000 f9c3 	bl	80014d8 <Button_GetLogic>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d109      	bne.n	800116c <main+0x44>
			I2C_Start();
 8001158:	f000 f95c 	bl	8001414 <I2C_Start>
			I2C_SendAddress(SERIAL_ADR);
 800115c:	2002      	movs	r0, #2
 800115e:	f000 f977 	bl	8001450 <I2C_SendAddress>
			I2C_TransmitData(DATA_RCV_VALID);
 8001162:	2010      	movs	r0, #16
 8001164:	f000 f990 	bl	8001488 <I2C_TransmitData>
			I2C_Stop();
 8001168:	f000 f9ac 	bl	80014c4 <I2C_Stop>
		}
		if (Recive_Data == DATA_RCV_VALID)
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <main+0x88>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	2b10      	cmp	r3, #16
 8001172:	d1ea      	bne.n	800114a <main+0x22>
		{
			for (int i = 0; i<5; i++){
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e010      	b.n	800119c <main+0x74>
				Green_control(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 f9da 	bl	8001534 <Green_control>
				Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f7ff ffb7 	bl	80010f6 <Delay>
				Green_control(0);
 8001188:	2000      	movs	r0, #0
 800118a:	f000 f9d3 	bl	8001534 <Green_control>
				Delay(1000);
 800118e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001192:	f7ff ffb0 	bl	80010f6 <Delay>
			for (int i = 0; i<5; i++){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	ddeb      	ble.n	800117a <main+0x52>
			}
			Recive_Data = DATA_RCV_IDLE;
 80011a2:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <main+0x88>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
		if (Button_GetLogic(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == Bit_RESET){
 80011a8:	e7cf      	b.n	800114a <main+0x22>
 80011aa:	bf00      	nop
 80011ac:	40020400 	.word	0x40020400
 80011b0:	200001cc 	.word	0x200001cc

080011b4 <I2C3_Init>:
	}
}


//----------------------Cac ham-----------------------------------
void I2C3_Init(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_APB1PeriphClockCmd(I2C_MASTER_RCC, ENABLE);
 80011ba:	2101      	movs	r1, #1
 80011bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80011c0:	f7ff fda8 	bl	8000d14 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(I2C_MASTER_GPIO_RCC, ENABLE);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff fd84 	bl	8000cd4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80011cc:	2101      	movs	r1, #1
 80011ce:	2001      	movs	r0, #1
 80011d0:	f7ff fd80 	bl	8000cd4 <RCC_AHB1PeriphClockCmd>

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80011d4:	2302      	movs	r3, #2
 80011d6:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80011d8:	2302      	movs	r3, #2
 80011da:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80011dc:	2301      	movs	r3, #1
 80011de:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80011e0:	2301      	movs	r3, #1
 80011e2:	75bb      	strb	r3, [r7, #22]


	GPIO_InitStructure.GPIO_Pin = SCL_MASTER_PIN;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	613b      	str	r3, [r7, #16]
	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStructure);
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	4817      	ldr	r0, [pc, #92]	; (8001250 <I2C3_Init+0x9c>)
 80011f2:	f7ff f95b 	bl	80004ac <GPIO_Init>

	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStructure);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4814      	ldr	r0, [pc, #80]	; (8001250 <I2C3_Init+0x9c>)
 80011fe:	f7ff f955 	bl	80004ac <GPIO_Init>

	//Chon PA8 lam chan SCL
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource8, GPIO_AF_I2C3);
 8001202:	2204      	movs	r2, #4
 8001204:	2108      	movs	r1, #8
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <I2C3_Init+0x9c>)
 8001208:	f7ff fa17 	bl	800063a <GPIO_PinAFConfig>
	//Chon PB9 lam chan SDA
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource9, GPIO_AF_I2C3);
 800120c:	2204      	movs	r2, #4
 800120e:	2109      	movs	r1, #9
 8001210:	480f      	ldr	r0, [pc, #60]	; (8001250 <I2C3_Init+0x9c>)
 8001212:	f7ff fa12 	bl	800063a <GPIO_PinAFConfig>

	//Khoi tao ngoai vi I2C3 su dung che do Master
	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001216:	2300      	movs	r3, #0
 8001218:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <I2C3_Init+0xa0>)
 800121c:	603b      	str	r3, [r7, #0]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800121e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001222:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001224:	2300      	movs	r3, #0
 8001226:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122c:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800122e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001232:	81bb      	strh	r3, [r7, #12]

	//Khoi tao I2C
	I2C_Init(I2C_MASTER_INSTANCE, &I2C_InitStructure);
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <I2C3_Init+0xa4>)
 800123a:	f7ff fa47 	bl	80006cc <I2C_Init>

	//Bat I2C
	I2C_Cmd(I2C_MASTER_INSTANCE, ENABLE);
 800123e:	2101      	movs	r1, #1
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <I2C3_Init+0xa4>)
 8001242:	f7ff fb05 	bl	8000850 <I2C_Cmd>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40020000 	.word	0x40020000
 8001254:	00061a80 	.word	0x00061a80
 8001258:	40005c00 	.word	0x40005c00

0800125c <I2C1_Init>:

void I2C1_Init(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
	I2C_InitTypeDef		I2C_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_APB1PeriphClockCmd(I2C_SLAVE_RCC, ENABLE);
 8001262:	2101      	movs	r1, #1
 8001264:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001268:	f7ff fd54 	bl	8000d14 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(I2C_SLAVE_GPIO_RCC, ENABLE);
 800126c:	2101      	movs	r1, #1
 800126e:	2002      	movs	r0, #2
 8001270:	f7ff fd30 	bl	8000cd4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001274:	2101      	movs	r1, #1
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff fd2c 	bl	8000cd4 <RCC_AHB1PeriphClockCmd>

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800127c:	2302      	movs	r3, #2
 800127e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001280:	2302      	movs	r3, #2
 8001282:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001288:	2301      	movs	r3, #1
 800128a:	77bb      	strb	r3, [r7, #30]


	GPIO_InitStructure.GPIO_Pin = SCL_SLAVE_PIN |SDA_SLAVE_PIN;
 800128c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001290:	61bb      	str	r3, [r7, #24]
	GPIO_Init(I2C_SLAVE_PORT, &GPIO_InitStructure);
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4619      	mov	r1, r3
 8001298:	4823      	ldr	r0, [pc, #140]	; (8001328 <I2C1_Init+0xcc>)
 800129a:	f7ff f907 	bl	80004ac <GPIO_Init>

	GPIO_Init(I2C_SLAVE_PORT, &GPIO_InitStructure);
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <I2C1_Init+0xcc>)
 80012a6:	f7ff f901 	bl	80004ac <GPIO_Init>

	//Chon PA8 lam chan SCL
	GPIO_PinAFConfig(I2C_SLAVE_PORT, GPIO_PinSource8, GPIO_AF_I2C1);
 80012aa:	2204      	movs	r2, #4
 80012ac:	2108      	movs	r1, #8
 80012ae:	481e      	ldr	r0, [pc, #120]	; (8001328 <I2C1_Init+0xcc>)
 80012b0:	f7ff f9c3 	bl	800063a <GPIO_PinAFConfig>
	//Chon PB9 lam chan SDA
	GPIO_PinAFConfig(I2C_SLAVE_PORT, GPIO_PinSource9, GPIO_AF_I2C1);
 80012b4:	2204      	movs	r2, #4
 80012b6:	2109      	movs	r1, #9
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <I2C1_Init+0xcc>)
 80012ba:	f7ff f9be 	bl	800063a <GPIO_PinAFConfig>

	//Khoi tao ngoai vi I2C1 su dung che do SLAVE
	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80012be:	2300      	movs	r3, #0
 80012c0:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <I2C1_Init+0xd0>)
 80012c4:	60bb      	str	r3, [r7, #8]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80012c6:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80012ca:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = SERIAL_ADR;
 80012cc:	2302      	movs	r3, #2
 80012ce:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80012d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012da:	82bb      	strh	r3, [r7, #20]

	//Khoi tao I2C
	I2C_Init(I2C_SLAVE_INSTANCE, &I2C_InitStructure);
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	4619      	mov	r1, r3
 80012e2:	4813      	ldr	r0, [pc, #76]	; (8001330 <I2C1_Init+0xd4>)
 80012e4:	f7ff f9f2 	bl	80006cc <I2C_Init>

	//Bat I2C
	I2C_Cmd(I2C_SLAVE_INSTANCE, ENABLE);
 80012e8:	2101      	movs	r1, #1
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <I2C1_Init+0xd4>)
 80012ec:	f7ff fab0 	bl	8000850 <I2C_Cmd>

	//Bat ngat cho chan
	I2C_ITConfig(I2C_SLAVE_INSTANCE, I2C_IT_EVT, ENABLE);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <I2C1_Init+0xd4>)
 80012f8:	f7ff fb66 	bl	80009c8 <I2C_ITConfig>
	I2C_ITConfig(I2C_SLAVE_INSTANCE, I2C_IT_BUF, ENABLE);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001302:	480b      	ldr	r0, [pc, #44]	; (8001330 <I2C1_Init+0xd4>)
 8001304:	f7ff fb60 	bl	80009c8 <I2C_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn;
 8001308:	231f      	movs	r3, #31
 800130a:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001314:	2301      	movs	r3, #1
 8001316:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f864 	bl	80003e8 <NVIC_Init>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40020400 	.word	0x40020400
 800132c:	00061a80 	.word	0x00061a80
 8001330:	40005400 	.word	0x40005400

08001334 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	switch (I2C_GetLastEvent(I2C_SLAVE_INSTANCE)){
 8001338:	4815      	ldr	r0, [pc, #84]	; (8001390 <I2C1_EV_IRQHandler+0x5c>)
 800133a:	f7ff fb99 	bl	8000a70 <I2C_GetLastEvent>
 800133e:	4603      	mov	r3, r0
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <I2C1_EV_IRQHandler+0x60>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00c      	beq.n	8001360 <I2C1_EV_IRQHandler+0x2c>
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <I2C1_EV_IRQHandler+0x60>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d81a      	bhi.n	8001382 <I2C1_EV_IRQHandler+0x4e>
 800134c:	2b10      	cmp	r3, #16
 800134e:	d013      	beq.n	8001378 <I2C1_EV_IRQHandler+0x44>
 8001350:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 8001354:	d115      	bne.n	8001382 <I2C1_EV_IRQHandler+0x4e>
	case I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED:
		//Dia chi gui boi master trung voi dia chi

		I2C_ClearFlag(I2C_SLAVE_INSTANCE, I2C_FLAG_ADDR);
 8001356:	4910      	ldr	r1, [pc, #64]	; (8001398 <I2C1_EV_IRQHandler+0x64>)
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <I2C1_EV_IRQHandler+0x5c>)
 800135a:	f7ff fbde 	bl	8000b1a <I2C_ClearFlag>
		break;
 800135e:	e011      	b.n	8001384 <I2C1_EV_IRQHandler+0x50>
	case I2C_EVENT_SLAVE_BYTE_RECEIVED:

		Recive_Data = I2C_ReceiveData(I2C_SLAVE_INSTANCE);
 8001360:	480b      	ldr	r0, [pc, #44]	; (8001390 <I2C1_EV_IRQHandler+0x5c>)
 8001362:	f7ff fb23 	bl	80009ac <I2C_ReceiveData>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <I2C1_EV_IRQHandler+0x68>)
 800136c:	801a      	strh	r2, [r3, #0]

		I2C_ClearFlag(I2C_SLAVE_INSTANCE, I2C_FLAG_RXNE);
 800136e:	490c      	ldr	r1, [pc, #48]	; (80013a0 <I2C1_EV_IRQHandler+0x6c>)
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <I2C1_EV_IRQHandler+0x5c>)
 8001372:	f7ff fbd2 	bl	8000b1a <I2C_ClearFlag>
		break;
 8001376:	e005      	b.n	8001384 <I2C1_EV_IRQHandler+0x50>
	case I2C_EVENT_SLAVE_STOP_DETECTED:
		//Huy bo bit stop

		I2C_AcknowledgeConfig(I2C_SLAVE_INSTANCE, ENABLE);
 8001378:	2101      	movs	r1, #1
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <I2C1_EV_IRQHandler+0x5c>)
 800137c:	f7ff fae6 	bl	800094c <I2C_AcknowledgeConfig>
		break;
 8001380:	e000      	b.n	8001384 <I2C1_EV_IRQHandler+0x50>
	default:
		break;
 8001382:	bf00      	nop
	}
	I2C_ClearITPendingBit(I2C_SLAVE_INSTANCE, I2C_IT_RXNE);
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <I2C1_EV_IRQHandler+0x70>)
 8001386:	4802      	ldr	r0, [pc, #8]	; (8001390 <I2C1_EV_IRQHandler+0x5c>)
 8001388:	f7ff fbde 	bl	8000b48 <I2C_ClearITPendingBit>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	00020040 	.word	0x00020040
 8001398:	10000002 	.word	0x10000002
 800139c:	200001cc 	.word	0x200001cc
 80013a0:	10000040 	.word	0x10000040
 80013a4:	06000040 	.word	0x06000040

080013a8 <Led_Init>:

static void Led_Init(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	//Khai bao kieu du lieu
	GPIO_InitTypeDef GPIO_Initstruct;

	//Bat block cho GPIO
	RCC_AHB1PeriphClockCmd(LED_GPIO_RCC, ENABLE);
 80013ae:	2101      	movs	r1, #1
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff fc8f 	bl	8000cd4 <RCC_AHB1PeriphClockCmd>

	//Khoi tao cac gia tri ban dau cho GREEN1
	GPIO_Initstruct.GPIO_Pin = LEDGREEN1_GPIO_PIN | LEDGREEN2_GPIO_PIN;
 80013b6:	f640 0301 	movw	r3, #2049	; 0x801
 80013ba:	603b      	str	r3, [r7, #0]
	GPIO_Initstruct.GPIO_Mode = GPIO_Mode_OUT;
 80013bc:	2301      	movs	r3, #1
 80013be:	713b      	strb	r3, [r7, #4]
	GPIO_Initstruct.GPIO_Speed = GPIO_Speed_50MHz;
 80013c0:	2302      	movs	r3, #2
 80013c2:	717b      	strb	r3, [r7, #5]
	GPIO_Initstruct.GPIO_OType = GPIO_OType_PP;
 80013c4:	2300      	movs	r3, #0
 80013c6:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(LEDGREEN1_GPIO_PORT, &GPIO_Initstruct);
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <Led_Init+0x34>)
 80013ce:	f7ff f86d 	bl	80004ac <GPIO_Init>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40020000 	.word	0x40020000

080013e0 <Button_Init>:

static void Button_Init(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	//Khai bao kieu du lieu
	GPIO_InitTypeDef GPIO_Initstruct2;

	//Bat Clock cho GPIOB
	RCC_AHB1PeriphClockCmd(BUTTON_GPIO_RCC, ENABLE);
 80013e6:	2101      	movs	r1, #1
 80013e8:	2002      	movs	r0, #2
 80013ea:	f7ff fc73 	bl	8000cd4 <RCC_AHB1PeriphClockCmd>

	//Khoi tao ngat cho nut nhan 2
	//Khoi tao cac gia tri ban dau cho chan GPIO
	GPIO_Initstruct2.GPIO_Pin = BUTTON_GPIO_PIN;
 80013ee:	2308      	movs	r3, #8
 80013f0:	603b      	str	r3, [r7, #0]
	GPIO_Initstruct2.GPIO_Mode = GPIO_Mode_IN;
 80013f2:	2300      	movs	r3, #0
 80013f4:	713b      	strb	r3, [r7, #4]
	GPIO_Initstruct2.GPIO_Speed = GPIO_Speed_50MHz;
 80013f6:	2302      	movs	r3, #2
 80013f8:	717b      	strb	r3, [r7, #5]
	GPIO_Initstruct2.GPIO_PuPd = GPIO_PuPd_UP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_Initstruct2);
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <Button_Init+0x30>)
 8001404:	f7ff f852 	bl	80004ac <GPIO_Init>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40020400 	.word	0x40020400

08001414 <I2C_Start>:

void I2C_Start(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	//Doi I2Cx khong ban
	while (I2C_GetFlagStatus(I2C_MASTER_INSTANCE, I2C_FLAG_BUSY));
 8001418:	bf00      	nop
 800141a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800141e:	480a      	ldr	r0, [pc, #40]	; (8001448 <I2C_Start+0x34>)
 8001420:	f7ff fb48 	bl	8000ab4 <I2C_GetFlagStatus>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f7      	bne.n	800141a <I2C_Start+0x6>

	I2C_GenerateSTART(I2C_MASTER_INSTANCE, ENABLE);
 800142a:	2101      	movs	r1, #1
 800142c:	4806      	ldr	r0, [pc, #24]	; (8001448 <I2C_Start+0x34>)
 800142e:	f7ff fa2f 	bl	8000890 <I2C_GenerateSTART>

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_MODE_SELECT));
 8001432:	bf00      	nop
 8001434:	4905      	ldr	r1, [pc, #20]	; (800144c <I2C_Start+0x38>)
 8001436:	4804      	ldr	r0, [pc, #16]	; (8001448 <I2C_Start+0x34>)
 8001438:	f7ff faea 	bl	8000a10 <I2C_CheckEvent>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f8      	beq.n	8001434 <I2C_Start+0x20>
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40005c00 	.word	0x40005c00
 800144c:	00030001 	.word	0x00030001

08001450 <I2C_SendAddress>:

void I2C_SendAddress(uint8_t address){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	I2C_Send7bitAddress(I2C_MASTER_INSTANCE, address, I2C_Direction_Transmitter);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <I2C_SendAddress+0x30>)
 8001462:	f7ff fa55 	bl	8000910 <I2C_Send7bitAddress>

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001466:	bf00      	nop
 8001468:	4906      	ldr	r1, [pc, #24]	; (8001484 <I2C_SendAddress+0x34>)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <I2C_SendAddress+0x30>)
 800146c:	f7ff fad0 	bl	8000a10 <I2C_CheckEvent>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f8      	beq.n	8001468 <I2C_SendAddress+0x18>
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40005c00 	.word	0x40005c00
 8001484:	00070082 	.word	0x00070082

08001488 <I2C_TransmitData>:

void I2C_TransmitData(uint8_t data){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	I2C_SendData(I2C_SLAVE_INSTANCE, data);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4619      	mov	r1, r3
 8001496:	4808      	ldr	r0, [pc, #32]	; (80014b8 <I2C_TransmitData+0x30>)
 8001498:	f7ff fa78 	bl	800098c <I2C_SendData>

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800149c:	bf00      	nop
 800149e:	4907      	ldr	r1, [pc, #28]	; (80014bc <I2C_TransmitData+0x34>)
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <I2C_TransmitData+0x38>)
 80014a2:	f7ff fab5 	bl	8000a10 <I2C_CheckEvent>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f8      	beq.n	800149e <I2C_TransmitData+0x16>
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40005400 	.word	0x40005400
 80014bc:	00070084 	.word	0x00070084
 80014c0:	40005c00 	.word	0x40005c00

080014c4 <I2C_Stop>:

void I2C_Stop(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	I2C_GenerateSTOP(I2C_MASTER_INSTANCE, ENABLE);
 80014c8:	2101      	movs	r1, #1
 80014ca:	4802      	ldr	r0, [pc, #8]	; (80014d4 <I2C_Stop+0x10>)
 80014cc:	f7ff fa00 	bl	80008d0 <I2C_GenerateSTOP>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005c00 	.word	0x40005c00

080014d8 <Button_GetLogic>:

static uint8_t Button_GetLogic(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
	return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin);
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff f86e 	bl	80005ca <GPIO_ReadInputDataBit>
 80014ee:	4603      	mov	r3, r0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Led_control>:

void Led_control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
	if (status == GPIO_PIN_SET){
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d105      	bne.n	800151a <Led_control+0x22>
		GPIO_SetBits(GPIOx, GPIO_Pin);
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff f873 	bl	80005fe <GPIO_SetBits>
	}else if(status == GPIO_PIN_RESET){
		GPIO_ResetBits(GPIOx, GPIO_Pin);
	}
}
 8001518:	e007      	b.n	800152a <Led_control+0x32>
	}else if(status == GPIO_PIN_RESET){
 800151a:	787b      	ldrb	r3, [r7, #1]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d104      	bne.n	800152a <Led_control+0x32>
		GPIO_ResetBits(GPIOx, GPIO_Pin);
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff f879 	bl	800061c <GPIO_ResetBits>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <Green_control>:

void Green_control(uint8_t status){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	if (status == GPIO_PIN_SET){
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d10b      	bne.n	800155c <Green_control+0x28>
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	2101      	movs	r1, #1
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <Green_control+0x4c>)
 800154a:	f7ff ffd5 	bl	80014f8 <Led_control>
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001554:	480a      	ldr	r0, [pc, #40]	; (8001580 <Green_control+0x4c>)
 8001556:	f7ff ffcf 	bl	80014f8 <Led_control>
	}else if(status == GPIO_PIN_RESET){
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_RESET);
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_RESET);
	}
}
 800155a:	e00d      	b.n	8001578 <Green_control+0x44>
	}else if(status == GPIO_PIN_RESET){
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10a      	bne.n	8001578 <Green_control+0x44>
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2101      	movs	r1, #1
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <Green_control+0x4c>)
 8001568:	f7ff ffc6 	bl	80014f8 <Led_control>
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <Green_control+0x4c>)
 8001574:	f7ff ffc0 	bl	80014f8 <Led_control>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40020000 	.word	0x40020000

08001584 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001586:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001588:	f7fe fe24 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <LoopForever+0xe>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	; (80015d0 <LoopForever+0x16>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015b2:	f000 f811 	bl	80015d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b6:	f7ff fdb7 	bl	8001128 <main>

080015ba <LoopForever>:

LoopForever:
  b LoopForever
 80015ba:	e7fe      	b.n	80015ba <LoopForever>
  ldr   r0, =_estack
 80015bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80015c8:	08001640 	.word	0x08001640
  ldr r2, =_sbss
 80015cc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80015d0:	200001d0 	.word	0x200001d0

080015d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <__libc_init_array>:
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	4d0d      	ldr	r5, [pc, #52]	; (8001610 <__libc_init_array+0x38>)
 80015dc:	4c0d      	ldr	r4, [pc, #52]	; (8001614 <__libc_init_array+0x3c>)
 80015de:	1b64      	subs	r4, r4, r5
 80015e0:	10a4      	asrs	r4, r4, #2
 80015e2:	2600      	movs	r6, #0
 80015e4:	42a6      	cmp	r6, r4
 80015e6:	d109      	bne.n	80015fc <__libc_init_array+0x24>
 80015e8:	4d0b      	ldr	r5, [pc, #44]	; (8001618 <__libc_init_array+0x40>)
 80015ea:	4c0c      	ldr	r4, [pc, #48]	; (800161c <__libc_init_array+0x44>)
 80015ec:	f000 f818 	bl	8001620 <_init>
 80015f0:	1b64      	subs	r4, r4, r5
 80015f2:	10a4      	asrs	r4, r4, #2
 80015f4:	2600      	movs	r6, #0
 80015f6:	42a6      	cmp	r6, r4
 80015f8:	d105      	bne.n	8001606 <__libc_init_array+0x2e>
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
 80015fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001600:	4798      	blx	r3
 8001602:	3601      	adds	r6, #1
 8001604:	e7ee      	b.n	80015e4 <__libc_init_array+0xc>
 8001606:	f855 3b04 	ldr.w	r3, [r5], #4
 800160a:	4798      	blx	r3
 800160c:	3601      	adds	r6, #1
 800160e:	e7f2      	b.n	80015f6 <__libc_init_array+0x1e>
 8001610:	08001638 	.word	0x08001638
 8001614:	08001638 	.word	0x08001638
 8001618:	08001638 	.word	0x08001638
 800161c:	0800163c 	.word	0x0800163c

08001620 <_init>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr

0800162c <_fini>:
 800162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162e:	bf00      	nop
 8001630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001632:	bc08      	pop	{r3}
 8001634:	469e      	mov	lr, r3
 8001636:	4770      	bx	lr
