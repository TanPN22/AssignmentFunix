
Lab8.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000450  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e4  080005ec  000105ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e4  080005e4  000105ec  2**0
                  CONTENTS
  4 .ARM          00000000  080005e4  080005e4  000105ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e4  080005ec  000105ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e4  080005e4  000105e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005e8  080005e8  000105e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080005ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005ec  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001061c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000028dd  00000000  00000000  0001065f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ab9  00000000  00000000  00012f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  000139f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001f7  00000000  00000000  00013cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a8a1  00000000  00000000  00013ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002bb9  00000000  00000000  0001e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003d754  00000000  00000000  00021301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009f8  00000000  00000000  0005ea58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  0005f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005cc 	.word	0x080005cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005cc 	.word	0x080005cc

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f80d 	bl	8000240 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <SetSysClock+0x94>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000248:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <SetSysClock+0x94>)
 800024a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800024e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000250:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <SetSysClock+0x98>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <SetSysClock+0x98>)
 8000256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800025a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <SetSysClock+0x94>)
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <SetSysClock+0x94>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <SetSysClock+0x94>)
 8000266:	4a1b      	ldr	r2, [pc, #108]	; (80002d4 <SetSysClock+0x94>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800026c:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <SetSysClock+0x94>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <SetSysClock+0x94>)
 8000272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000276:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <SetSysClock+0x94>)
 800027a:	4a18      	ldr	r2, [pc, #96]	; (80002dc <SetSysClock+0x9c>)
 800027c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <SetSysClock+0x94>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <SetSysClock+0x94>)
 8000284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000288:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800028a:	bf00      	nop
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <SetSysClock+0x94>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <SetSysClock+0xa0>)
 800029a:	f240 6202 	movw	r2, #1538	; 0x602
 800029e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <SetSysClock+0x94>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <SetSysClock+0x94>)
 80002a6:	f023 0303 	bic.w	r3, r3, #3
 80002aa:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <SetSysClock+0x94>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <SetSysClock+0x94>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002b8:	bf00      	nop
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <SetSysClock+0x94>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f003 030c 	and.w	r3, r3, #12
 80002c2:	2b08      	cmp	r3, #8
 80002c4:	d1f9      	bne.n	80002ba <SetSysClock+0x7a>
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40007000 	.word	0x40007000
 80002dc:	08015410 	.word	0x08015410
 80002e0:	40023c00 	.word	0x40023c00

080002e4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	889b      	ldrh	r3, [r3, #4]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80002f6:	b29b      	uxth	r3, r3
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000304:	b480      	push	{r7}
 8000306:	b087      	sub	sp, #28
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	2300      	movs	r3, #0
 800031a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000320:	887b      	ldrh	r3, [r7, #2]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	095b      	lsrs	r3, r3, #5
 8000326:	b2db      	uxtb	r3, r3
 8000328:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800032a:	887b      	ldrh	r3, [r7, #2]
 800032c:	f003 031f 	and.w	r3, r3, #31
 8000330:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000332:	2201      	movs	r2, #1
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d107      	bne.n	8000352 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	899b      	ldrh	r3, [r3, #12]
 8000346:	b29b      	uxth	r3, r3
 8000348:	461a      	mov	r2, r3
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	4013      	ands	r3, r2
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e011      	b.n	8000376 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d107      	bne.n	8000368 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	8a1b      	ldrh	r3, [r3, #16]
 800035c:	b29b      	uxth	r3, r3
 800035e:	461a      	mov	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	4013      	ands	r3, r2
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e006      	b.n	8000376 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	8a9b      	ldrh	r3, [r3, #20]
 800036c:	b29b      	uxth	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	4013      	ands	r3, r2
 8000374:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000376:	887b      	ldrh	r3, [r7, #2]
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	b29b      	uxth	r3, r3
 800037c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800037e:	2201      	movs	r2, #1
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	fa02 f303 	lsl.w	r3, r2, r3
 8000386:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	b29b      	uxth	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	4013      	ands	r3, r2
 8000394:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d005      	beq.n	80003a8 <USART_GetITStatus+0xa4>
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80003a2:	2301      	movs	r3, #1
 80003a4:	74fb      	strb	r3, [r7, #19]
 80003a6:	e001      	b.n	80003ac <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80003a8:	2300      	movs	r3, #0
 80003aa:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80003ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	371c      	adds	r7, #28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b085      	sub	sp, #20
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	460b      	mov	r3, r1
 80003c4:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80003c6:	2300      	movs	r3, #0
 80003c8:	81fb      	strh	r3, [r7, #14]
 80003ca:	2300      	movs	r3, #0
 80003cc:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80003ce:	887b      	ldrh	r3, [r7, #2]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80003d4:	89fb      	ldrh	r3, [r7, #14]
 80003d6:	2201      	movs	r2, #1
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80003de:	89bb      	ldrh	r3, [r7, #12]
 80003e0:	43db      	mvns	r3, r3
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	801a      	strh	r2, [r3, #0]
}
 80003e8:	bf00      	nop
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SysTick_Handler+0x18>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	4a03      	ldr	r2, [pc, #12]	; (800040c <SysTick_Handler+0x18>)
 8000400:	6013      	str	r3, [r2, #0]
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	2000001c 	.word	0x2000001c

08000410 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000416:	b672      	cpsid	i
}
 8000418:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 800041a:	f240 5125 	movw	r1, #1317	; 0x525
 800041e:	480f      	ldr	r0, [pc, #60]	; (800045c <USART2_IRQHandler+0x4c>)
 8000420:	f7ff ff70 	bl	8000304 <USART_GetITStatus>
 8000424:	4603      	mov	r3, r0
 8000426:	2b01      	cmp	r3, #1
 8000428:	d112      	bne.n	8000450 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <USART2_IRQHandler+0x50>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000430:	480a      	ldr	r0, [pc, #40]	; (800045c <USART2_IRQHandler+0x4c>)
 8000432:	f7ff ff57 	bl	80002e4 <USART_ReceiveData>
 8000436:	4603      	mov	r3, r0
 8000438:	b2db      	uxtb	r3, r3
 800043a:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 800043c:	1cfb      	adds	r3, r7, #3
 800043e:	4619      	mov	r1, r3
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f822 	bl	800048a <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000446:	f240 5125 	movw	r1, #1317	; 0x525
 800044a:	4804      	ldr	r0, [pc, #16]	; (800045c <USART2_IRQHandler+0x4c>)
 800044c:	f7ff ffb5 	bl	80003ba <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000450:	b662      	cpsie	i
}
 8000452:	bf00      	nop
    }
    __enable_irq();
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40004400 	.word	0x40004400
 8000460:	20000020 	.word	0x20000020

08000464 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	885a      	ldrh	r2, [r3, #2]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	429a      	cmp	r2, r3
 8000476:	bf2c      	ite	cs
 8000478:	2301      	movcs	r3, #1
 800047a:	2300      	movcc	r3, #0
 800047c:	b2db      	uxtb	r3, r3
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 800048a:	b580      	push	{r7, lr}
 800048c:	b084      	sub	sp, #16
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000498:	2300      	movs	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	e021      	b.n	80004e2 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	441a      	add	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	6879      	ldr	r1, [r7, #4]
 80004aa:	88c9      	ldrh	r1, [r1, #6]
 80004ac:	440b      	add	r3, r1
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	88db      	ldrh	r3, [r3, #6]
 80004b6:	3301      	adds	r3, #1
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	b21a      	sxth	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	b21b      	sxth	r3, r3
 80004c6:	4013      	ands	r3, r2
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	885b      	ldrh	r3, [r3, #2]
 80004d4:	3301      	adds	r3, #1
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	3301      	adds	r3, #1
 80004e0:	73fb      	strb	r3, [r7, #15]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	7bfa      	ldrb	r2, [r7, #15]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d3d8      	bcc.n	800049e <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff ffb9 	bl	8000464 <bufIsFull>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d011      	beq.n	800051c <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	891a      	ldrh	r2, [r3, #8]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	b29b      	uxth	r3, r3
 8000502:	4413      	add	r3, r2
 8000504:	b29b      	uxth	r3, r3
 8000506:	b21a      	sxth	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	3b01      	subs	r3, #1
 800050e:	b29b      	uxth	r3, r3
 8000510:	b21b      	sxth	r3, r3
 8000512:	4013      	ands	r3, r2
 8000514:	b21b      	sxth	r3, r3
 8000516:	b29a      	uxth	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800051c:	b662      	cpsie	i
}
 800051e:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <main>:
 *
 ******************************************************************************
 */

int main(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 800052e:	e7fe      	b.n	800052e <main+0x4>

08000530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000532:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000534:	f7ff fe4e 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <LoopForever+0x6>)
  ldr r1, =_edata
 800053a:	490d      	ldr	r1, [pc, #52]	; (8000570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <LoopForever+0xe>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000550:	4c0a      	ldr	r4, [pc, #40]	; (800057c <LoopForever+0x16>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055e:	f000 f811 	bl	8000584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff ffe2 	bl	800052a <main>

08000566 <LoopForever>:

LoopForever:
  b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   r0, =_estack
 8000568:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000574:	080005ec 	.word	0x080005ec
  ldr r2, =_sbss
 8000578:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800057c:	20000028 	.word	0x20000028

08000580 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC_IRQHandler>
	...

08000584 <__libc_init_array>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	4d0d      	ldr	r5, [pc, #52]	; (80005bc <__libc_init_array+0x38>)
 8000588:	4c0d      	ldr	r4, [pc, #52]	; (80005c0 <__libc_init_array+0x3c>)
 800058a:	1b64      	subs	r4, r4, r5
 800058c:	10a4      	asrs	r4, r4, #2
 800058e:	2600      	movs	r6, #0
 8000590:	42a6      	cmp	r6, r4
 8000592:	d109      	bne.n	80005a8 <__libc_init_array+0x24>
 8000594:	4d0b      	ldr	r5, [pc, #44]	; (80005c4 <__libc_init_array+0x40>)
 8000596:	4c0c      	ldr	r4, [pc, #48]	; (80005c8 <__libc_init_array+0x44>)
 8000598:	f000 f818 	bl	80005cc <_init>
 800059c:	1b64      	subs	r4, r4, r5
 800059e:	10a4      	asrs	r4, r4, #2
 80005a0:	2600      	movs	r6, #0
 80005a2:	42a6      	cmp	r6, r4
 80005a4:	d105      	bne.n	80005b2 <__libc_init_array+0x2e>
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ac:	4798      	blx	r3
 80005ae:	3601      	adds	r6, #1
 80005b0:	e7ee      	b.n	8000590 <__libc_init_array+0xc>
 80005b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b6:	4798      	blx	r3
 80005b8:	3601      	adds	r6, #1
 80005ba:	e7f2      	b.n	80005a2 <__libc_init_array+0x1e>
 80005bc:	080005e4 	.word	0x080005e4
 80005c0:	080005e4 	.word	0x080005e4
 80005c4:	080005e4 	.word	0x080005e4
 80005c8:	080005e8 	.word	0x080005e8

080005cc <_init>:
 80005cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ce:	bf00      	nop
 80005d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d2:	bc08      	pop	{r3}
 80005d4:	469e      	mov	lr, r3
 80005d6:	4770      	bx	lr

080005d8 <_fini>:
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005da:	bf00      	nop
 80005dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005de:	bc08      	pop	{r3}
 80005e0:	469e      	mov	lr, r3
 80005e2:	4770      	bx	lr
