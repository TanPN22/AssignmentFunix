
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001364  08001364  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001364  08001364  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001364  08001364  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001364  08001364  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001364  08001364  00011364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001368  08001368  00011368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800136c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000024  08001390  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001390  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005894  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000153a  00000000  00000000  0002592b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  00026e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004d9  00000000  00000000  00027508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bf9b  00000000  00000000  000279e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000615d  00000000  00000000  0003397c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00040c50  00000000  00000000  00039ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b20  00000000  00000000  0007a72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  0007c24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800134c 	.word	0x0800134c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	0800134c 	.word	0x0800134c

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	2300      	movs	r3, #0
 80003f6:	73bb      	strb	r3, [r7, #14]
 80003f8:	230f      	movs	r3, #15
 80003fa:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d039      	beq.n	8000478 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <NVIC_Init+0xbc>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	43db      	mvns	r3, r3
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f1c3 0304 	rsb	r3, r3, #4
 800041a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800041c:	7b7a      	ldrb	r2, [r7, #13]
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	fa42 f303 	asr.w	r3, r2, r3
 8000424:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	461a      	mov	r2, r3
 800042c:	7bbb      	ldrb	r3, [r7, #14]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	789a      	ldrb	r2, [r3, #2]
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	4013      	ands	r3, r2
 800043c:	b2da      	uxtb	r2, r3
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4313      	orrs	r3, r2
 8000442:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <NVIC_Init+0xc0>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4413      	add	r3, r2
 8000452:	7bfa      	ldrb	r2, [r7, #15]
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000460:	4911      	ldr	r1, [pc, #68]	; (80004a8 <NVIC_Init+0xc0>)
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7812      	ldrb	r2, [r2, #0]
 8000466:	0952      	lsrs	r2, r2, #5
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800046c:	2201      	movs	r2, #1
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000472:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000476:	e00f      	b.n	8000498 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000480:	4909      	ldr	r1, [pc, #36]	; (80004a8 <NVIC_Init+0xc0>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	0952      	lsrs	r2, r2, #5
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800048c:	2201      	movs	r2, #1
 800048e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000490:	f100 0320 	add.w	r3, r0, #32
 8000494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	e000e100 	.word	0xe000e100

080004ac <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e076      	b.n	80005b6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004c8:	2201      	movs	r2, #1
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d165      	bne.n	80005b0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	4619      	mov	r1, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	431a      	orrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d003      	beq.n	8000522 <GPIO_Init+0x76>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d12e      	bne.n	8000580 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	4619      	mov	r1, r3
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	b29b      	uxth	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	2301      	movs	r3, #1
 800055c:	408b      	lsls	r3, r1
 800055e:	43db      	mvns	r3, r3
 8000560:	401a      	ands	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	7992      	ldrb	r2, [r2, #6]
 800056e:	4611      	mov	r1, r2
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	b292      	uxth	r2, r2
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	b292      	uxth	r2, r2
 800057a:	431a      	orrs	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	b29b      	uxth	r3, r3
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2103      	movs	r1, #3
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	4619      	mov	r1, r3
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3301      	adds	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d985      	bls.n	80004c8 <GPIO_Init+0x1c>
    }
  }
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	371c      	adds	r7, #28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	691a      	ldr	r2, [r3, #16]
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	4013      	ands	r3, r2
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e001      	b.n	80005f0 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	831a      	strh	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	887a      	ldrh	r2, [r7, #2]
 800062c:	835a      	strh	r2, [r3, #26]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	807b      	strh	r3, [r7, #2]
 8000646:	4613      	mov	r3, r2
 8000648:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000652:	787a      	ldrb	r2, [r7, #1]
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	08db      	lsrs	r3, r3, #3
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3208      	adds	r2, #8
 800066e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	f003 0307 	and.w	r3, r3, #7
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	210f      	movs	r1, #15
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	8879      	ldrh	r1, [r7, #2]
 8000684:	08c9      	lsrs	r1, r1, #3
 8000686:	b289      	uxth	r1, r1
 8000688:	4608      	mov	r0, r1
 800068a:	ea02 0103 	and.w	r1, r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f100 0208 	add.w	r2, r0, #8
 8000694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	b29b      	uxth	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3208      	adds	r2, #8
 80006a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3208      	adds	r2, #8
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006ec:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f003 030c 	and.w	r3, r3, #12
 80006f4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	2b08      	cmp	r3, #8
 80006fa:	d011      	beq.n	8000720 <RCC_GetClocksFreq+0x54>
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	2b08      	cmp	r3, #8
 8000700:	d844      	bhi.n	800078c <RCC_GetClocksFreq+0xc0>
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <RCC_GetClocksFreq+0x44>
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b04      	cmp	r3, #4
 800070c:	d004      	beq.n	8000718 <RCC_GetClocksFreq+0x4c>
 800070e:	e03d      	b.n	800078c <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a42      	ldr	r2, [pc, #264]	; (800081c <RCC_GetClocksFreq+0x150>)
 8000714:	601a      	str	r2, [r3, #0]
    break;
 8000716:	e03d      	b.n	8000794 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a41      	ldr	r2, [pc, #260]	; (8000820 <RCC_GetClocksFreq+0x154>)
 800071c:	601a      	str	r2, [r3, #0]
    break;
 800071e:	e039      	b.n	8000794 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000720:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	0d9b      	lsrs	r3, r3, #22
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800072c:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000734:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00c      	beq.n	8000756 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800073c:	4a38      	ldr	r2, [pc, #224]	; (8000820 <RCC_GetClocksFreq+0x154>)
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	fbb2 f3f3 	udiv	r3, r2, r3
 8000744:	4a34      	ldr	r2, [pc, #208]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 8000746:	6852      	ldr	r2, [r2, #4]
 8000748:	0992      	lsrs	r2, r2, #6
 800074a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800074e:	fb02 f303 	mul.w	r3, r2, r3
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	e00b      	b.n	800076e <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000756:	4a31      	ldr	r2, [pc, #196]	; (800081c <RCC_GetClocksFreq+0x150>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 8000760:	6852      	ldr	r2, [r2, #4]
 8000762:	0992      	lsrs	r2, r2, #6
 8000764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000768:	fb02 f303 	mul.w	r3, r2, r3
 800076c:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	f003 0303 	and.w	r3, r3, #3
 8000778:	3301      	adds	r3, #1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800077e:	69fa      	ldr	r2, [r7, #28]
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	fbb2 f2f3 	udiv	r2, r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
    break;
 800078a:	e003      	b.n	8000794 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <RCC_GetClocksFreq+0x150>)
 8000790:	601a      	str	r2, [r3, #0]
    break;
 8000792:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800079c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007a4:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <RCC_GetClocksFreq+0x158>)
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	40da      	lsrs	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80007c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	0a9b      	lsrs	r3, r3, #10
 80007ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007cc:	4a15      	ldr	r2, [pc, #84]	; (8000824 <RCC_GetClocksFreq+0x158>)
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	40da      	lsrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <RCC_GetClocksFreq+0x14c>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007ec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	0b5b      	lsrs	r3, r3, #13
 80007f2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007f4:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <RCC_GetClocksFreq+0x158>)
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	40da      	lsrs	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	60da      	str	r2, [r3, #12]
}
 800080c:	bf00      	nop
 800080e:	3724      	adds	r7, #36	; 0x24
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40023800 	.word	0x40023800
 800081c:	00f42400 	.word	0x00f42400
 8000820:	017d7840 	.word	0x017d7840
 8000824:	20000014 	.word	0x20000014

08000828 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d006      	beq.n	8000848 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <RCC_AHB1PeriphClockCmd+0x3c>)
 800083c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4313      	orrs	r3, r2
 8000844:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000846:	e006      	b.n	8000856 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <RCC_AHB1PeriphClockCmd+0x3c>)
 800084a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	43db      	mvns	r3, r3
 8000850:	4904      	ldr	r1, [pc, #16]	; (8000864 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000852:	4013      	ands	r3, r2
 8000854:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <RCC_APB1PeriphClockCmd+0x3c>)
 800087c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087e:	4909      	ldr	r1, [pc, #36]	; (80008a4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4313      	orrs	r3, r2
 8000884:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000886:	e006      	b.n	8000896 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <RCC_APB1PeriphClockCmd+0x3c>)
 800088a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	43db      	mvns	r3, r3
 8000890:	4904      	ldr	r1, [pc, #16]	; (80008a4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000892:	4013      	ands	r3, r2
 8000894:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d006      	beq.n	80008c8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <RCC_APB2PeriphClockCmd+0x3c>)
 80008bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008be:	4909      	ldr	r1, [pc, #36]	; (80008e4 <RCC_APB2PeriphClockCmd+0x3c>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80008c6:	e006      	b.n	80008d6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <RCC_APB2PeriphClockCmd+0x3c>)
 80008ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	43db      	mvns	r3, r3
 80008d0:	4904      	ldr	r1, [pc, #16]	; (80008e4 <RCC_APB2PeriphClockCmd+0x3c>)
 80008d2:	4013      	ands	r3, r2
 80008d4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80008fc:	89fb      	ldrh	r3, [r7, #14]
 80008fe:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000902:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	881a      	ldrh	r2, [r3, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	885b      	ldrh	r3, [r3, #2]
 800090c:	4313      	orrs	r3, r2
 800090e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000914:	4313      	orrs	r3, r2
 8000916:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800091c:	4313      	orrs	r3, r2
 800091e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000924:	4313      	orrs	r3, r2
 8000926:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800092c:	4313      	orrs	r3, r2
 800092e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000934:	4313      	orrs	r3, r2
 8000936:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800093c:	4313      	orrs	r3, r2
 800093e:	b29a      	uxth	r2, r3
 8000940:	89fb      	ldrh	r3, [r7, #14]
 8000942:	4313      	orrs	r3, r2
 8000944:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	89fa      	ldrh	r2, [r7, #14]
 800094a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	8b9b      	ldrh	r3, [r3, #28]
 8000950:	b29b      	uxth	r3, r3
 8000952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000956:	b29a      	uxth	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	8a1a      	ldrh	r2, [r3, #16]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	821a      	strh	r2, [r3, #16]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d008      	beq.n	8000994 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	b29b      	uxth	r3, r3
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	b29a      	uxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000992:	e007      	b.n	80009a4 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800099e:	b29a      	uxth	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	801a      	strh	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	899b      	ldrh	r3, [r3, #12]
 80009bc:	b29b      	uxth	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	887a      	ldrh	r2, [r7, #2]
 80009da:	819a      	strh	r2, [r3, #12]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
 80009f4:	4613      	mov	r3, r2
 80009f6:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80009f8:	2300      	movs	r3, #0
 80009fa:	81fb      	strh	r3, [r7, #14]
 80009fc:	2300      	movs	r3, #0
 80009fe:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	091b      	lsrs	r3, r3, #4
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8000a12:	78bb      	ldrb	r3, [r7, #2]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d008      	beq.n	8000a2a <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	89bb      	ldrh	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8000a28:	e009      	b.n	8000a3e <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	889b      	ldrh	r3, [r3, #4]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	4013      	ands	r3, r2
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	809a      	strh	r2, [r3, #4]
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b085      	sub	sp, #20
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	891b      	ldrh	r3, [r3, #8]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	4013      	ands	r3, r2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	e001      	b.n	8000a74 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	81bb      	strh	r3, [r7, #12]
 8000a96:	2300      	movs	r3, #0
 8000a98:	817b      	strh	r3, [r7, #10]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8000ab4:	897b      	ldrh	r3, [r7, #10]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	889b      	ldrh	r3, [r3, #4]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	897b      	ldrh	r3, [r7, #10]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	891b      	ldrh	r3, [r3, #8]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	89bb      	ldrh	r3, [r7, #12]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d005      	beq.n	8000ae6 <SPI_I2S_GetITStatus+0x64>
 8000ada:	893b      	ldrh	r3, [r7, #8]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e001      	b.n	8000aea <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	2201      	movs	r2, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	811a      	strh	r2, [r3, #8]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	889b      	ldrh	r3, [r3, #4]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b3e:	b29b      	uxth	r3, r3
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	095b      	lsrs	r3, r3, #5
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	f003 031f 	and.w	r3, r3, #31
 8000b78:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d107      	bne.n	8000b9a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	899b      	ldrh	r3, [r3, #12]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4013      	ands	r3, r2
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e011      	b.n	8000bbe <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d107      	bne.n	8000bb0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	8a1b      	ldrh	r3, [r3, #16]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	4013      	ands	r3, r2
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e006      	b.n	8000bbe <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	8a9b      	ldrh	r3, [r3, #20]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d005      	beq.n	8000bf0 <USART_GetITStatus+0xa4>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000bea:	2301      	movs	r3, #1
 8000bec:	74fb      	strb	r3, [r7, #19]
 8000bee:	e001      	b.n	8000bf4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000bf4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	371c      	adds	r7, #28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	81fb      	strh	r3, [r7, #14]
 8000c12:	2300      	movs	r3, #0
 8000c14:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000c26:	89bb      	ldrh	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	801a      	strh	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	da0b      	bge.n	8000c68 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <NVIC_SetPriority+0x4c>)
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	3b04      	subs	r3, #4
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c66:	e009      	b.n	8000c7c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <NVIC_SetPriority+0x50>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ffc2 	bl	8000c3c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fcf5 	bl	80006cc <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <TimerInit+0x3c>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffcf 	bl	8000c90 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ffa0 	bl	8000c3c <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8000cfc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000d00:	2100      	movs	r1, #0
 8000d02:	4804      	ldr	r0, [pc, #16]	; (8000d14 <TimerInit+0x40>)
 8000d04:	f000 f8af 	bl	8000e66 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	10624dd3 	.word	0x10624dd3
 8000d14:	20000040 	.word	0x20000040

08000d18 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <GetMilSecTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200001c0 	.word	0x200001c0

08000d30 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Handler+0x18>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <SysTick_Handler+0x18>)
 8000d3c:	6013      	str	r3, [r2, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	200001c0 	.word	0x200001c0

08000d4c <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d52:	b672      	cpsid	i
}
 8000d54:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000d56:	f240 5125 	movw	r1, #1317	; 0x525
 8000d5a:	480f      	ldr	r0, [pc, #60]	; (8000d98 <USART2_IRQHandler+0x4c>)
 8000d5c:	f7ff fef6 	bl	8000b4c <USART_GetITStatus>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d112      	bne.n	8000d8c <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <USART2_IRQHandler+0x50>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000d6c:	480a      	ldr	r0, [pc, #40]	; (8000d98 <USART2_IRQHandler+0x4c>)
 8000d6e:	f7ff fedd 	bl	8000b2c <USART_ReceiveData>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000d78:	1cfb      	adds	r3, r7, #3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f000 f822 	bl	8000dc6 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000d82:	f240 5125 	movw	r1, #1317	; 0x525
 8000d86:	4804      	ldr	r0, [pc, #16]	; (8000d98 <USART2_IRQHandler+0x4c>)
 8000d88:	f7ff ff3b 	bl	8000c02 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d8c:	b662      	cpsie	i
}
 8000d8e:	bf00      	nop
    }
    __enable_irq();
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	200001c4 	.word	0x200001c4

08000da0 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	885a      	ldrh	r2, [r3, #2]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	bf2c      	ite	cs
 8000db4:	2301      	movcs	r3, #1
 8000db6:	2300      	movcc	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e021      	b.n	8000e1e <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	441a      	add	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	88c9      	ldrh	r1, [r1, #6]
 8000de8:	440b      	add	r3, r1
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	88db      	ldrh	r3, [r3, #6]
 8000df2:	3301      	adds	r3, #1
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4013      	ands	r3, r2
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	885b      	ldrh	r3, [r3, #2]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	791b      	ldrb	r3, [r3, #4]
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d3d8      	bcc.n	8000dda <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ffb9 	bl	8000da0 <bufIsFull>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d011      	beq.n	8000e58 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	891a      	ldrh	r2, [r3, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e58:	b662      	cpsie	i
}
 8000e5a:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	70fb      	strb	r3, [r7, #3]
 8000e72:	4613      	mov	r3, r2
 8000e74:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8000e76:	e004      	b.n	8000e82 <memsetl+0x1c>
        *dst++ = value;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	78fa      	ldrb	r2, [r7, #3]
 8000e80:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8000e82:	883b      	ldrh	r3, [r7, #0]
 8000e84:	1e5a      	subs	r2, r3, #1
 8000e86:	803a      	strh	r2, [r7, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f5      	bne.n	8000e78 <memsetl+0x12>
    }    
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <main>:
static uint32_t 	Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent);
static uint8_t 		Button_GetLogic(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

//----------------------------------------------------------------------
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	//Init all the Parameter
	AppInitCommon();
 8000ea2:	f000 f831 	bl	8000f08 <AppInitCommon>

	while (1){
		if (Button_GetLogic(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == Bit_RESET){
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	4814      	ldr	r0, [pc, #80]	; (8000efc <main+0x60>)
 8000eaa:	f000 f991 	bl	80011d0 <Button_GetLogic>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d103      	bne.n	8000ebc <main+0x20>
			SPI_TransmitData(SPI_MASTER_INSTANCE, 0xB1);
 8000eb4:	21b1      	movs	r1, #177	; 0xb1
 8000eb6:	4812      	ldr	r0, [pc, #72]	; (8000f00 <main+0x64>)
 8000eb8:	f000 f966 	bl	8001188 <SPI_TransmitData>
		}
		if (reciveDataSlave == SLAVE_DATA_CHECK)
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <main+0x68>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	2bb1      	cmp	r3, #177	; 0xb1
 8000ec4:	d1ef      	bne.n	8000ea6 <main+0xa>
		{
			for (int i = 0; i<5; i++){
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	e010      	b.n	8000eee <main+0x52>
				Green_control(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 f9ad 	bl	800122c <Green_control>
				Delay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed6:	f000 f93f 	bl	8001158 <Delay>
				Green_control(0);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f9a6 	bl	800122c <Green_control>
				Delay(1000);
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	f000 f938 	bl	8001158 <Delay>
			for (int i = 0; i<5; i++){
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	ddeb      	ble.n	8000ecc <main+0x30>
			}
			reciveDataSlave = 0;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <main+0x68>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	801a      	strh	r2, [r3, #0]
		if (Button_GetLogic(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == Bit_RESET){
 8000efa:	e7d4      	b.n	8000ea6 <main+0xa>
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40003800 	.word	0x40003800
 8000f04:	200001cc 	.word	0x200001cc

08000f08 <AppInitCommon>:
 * @func   AppInitCommon
 * @brief  Initialize common application
 * @param  None
 * @retval None
 */
void AppInitCommon(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

	//Initzation the SPI1
	SPI1_Init();
 8000f0c:	f000 f86a 	bl	8000fe4 <SPI1_Init>

	//Initzation the SPI2
	SPI2_Init();
 8000f10:	f000 f80c 	bl	8000f2c <SPI2_Init>

	//Initzation the Led
	Led_Init();
 8000f14:	f000 f8d0 	bl	80010b8 <Led_Init>

	//Initzation the Button
	Button_Init();
 8000f18:	f000 f8ea 	bl	80010f0 <Button_Init>

	//Initzation the Timer
	TimerInit();
 8000f1c:	f7ff feda 	bl	8000cd4 <TimerInit>

	//Initzation the system.
	SystemCoreClockUpdate();
 8000f20:	f7ff f98e 	bl	8000240 <SystemCoreClockUpdate>
	SystemInit();
 8000f24:	f7ff f956 	bl	80001d4 <SystemInit>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <SPI2_Init>:
 * @func   SPI2_Init
 * @brief  Initialize the SPI2
 * @param  None
 * @retval None
 */
void SPI2_Init(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	SPI_InitTypeDef		SPI_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_AHB1PeriphClockCmd(SPI_MASTER_GPIO_CLK, ENABLE);
 8000f32:	2101      	movs	r1, #1
 8000f34:	2002      	movs	r0, #2
 8000f36:	f7ff fc77 	bl	8000828 <RCC_AHB1PeriphClockCmd>

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_OType_PP;
 8000f42:	2300      	movs	r3, #0
 8000f44:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = SPI_MASTER_SCK_PIN | SPI_MASTER_MISO_PIN | SPI_MASTER_MOSI_PIN;
 8000f46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f4a:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_MASTER_GPIO_PORT, &GPIO_InitStructure);
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4822      	ldr	r0, [pc, #136]	; (8000fdc <SPI2_Init+0xb0>)
 8000f54:	f7ff faaa 	bl	80004ac <GPIO_Init>

	//Khoi tao SPI2
	GPIO_PinAFConfig(SPI_MASTER_GPIO_PORT, GPIO_PinSource13, GPIO_AF_SPI2);
 8000f58:	2205      	movs	r2, #5
 8000f5a:	210d      	movs	r1, #13
 8000f5c:	481f      	ldr	r0, [pc, #124]	; (8000fdc <SPI2_Init+0xb0>)
 8000f5e:	f7ff fb6c 	bl	800063a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_MASTER_GPIO_PORT, GPIO_PinSource14, GPIO_AF_SPI2);
 8000f62:	2205      	movs	r2, #5
 8000f64:	210e      	movs	r1, #14
 8000f66:	481d      	ldr	r0, [pc, #116]	; (8000fdc <SPI2_Init+0xb0>)
 8000f68:	f7ff fb67 	bl	800063a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_MASTER_GPIO_PORT, GPIO_PinSource15, GPIO_AF_SPI2);
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	210f      	movs	r1, #15
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <SPI2_Init+0xb0>)
 8000f72:	f7ff fb62 	bl	800063a <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000f76:	2301      	movs	r3, #1
 8000f78:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	77bb      	strb	r3, [r7, #30]

	GPIO_InitStructure.GPIO_Pin = SPI_MASTER_NSS_PIN;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_MASTER_GPIO_PORT, &GPIO_InitStructure);
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <SPI2_Init+0xb0>)
 8000f90:	f7ff fa8c 	bl	80004ac <GPIO_Init>

	//Khoi tao ngoai vi SPI su dung che do Master
	//Bat clock cho APB1
	RCC_APB1PeriphClockCmd(SPI_MASTER_CLK, ENABLE);
 8000f94:	2101      	movs	r1, #1
 8000f96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f9a:	f7ff fc65 	bl	8000868 <RCC_APB1PeriphClockCmd>

	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000f9e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000fa2:	80fb      	strh	r3, [r7, #6]

	//Khoi tao Fullduplex (Song cong)
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	80bb      	strh	r3, [r7, #4]

	//Khoi tao moi lan truyen 8 bits
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	813b      	strh	r3, [r7, #8]

	//Khoi tao CPOL = 0
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000fac:	2300      	movs	r3, #0
 8000fae:	817b      	strh	r3, [r7, #10]

	//Khoi tao lay mau tai luc len
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	81bb      	strh	r3, [r7, #12]

	//Dieu khien chan NSS mem
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb8:	81fb      	strh	r3, [r7, #14]

	//Khoi tao baudRate scale 4
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	823b      	strh	r3, [r7, #16]

	//Bit dau tien la LSB
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	827b      	strh	r3, [r7, #18]

	//Khoi tao SPI
	SPI_Init(SPI_MASTER_INSTANCE, &SPI_InitStructure);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <SPI2_Init+0xb4>)
 8000fc8:	f7ff fc8e 	bl	80008e8 <SPI_Init>

	//Bat SPI
	SPI_Cmd(SPI_MASTER_INSTANCE, ENABLE);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <SPI2_Init+0xb4>)
 8000fd0:	f7ff fcce 	bl	8000970 <SPI_Cmd>
}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	40003800 	.word	0x40003800

08000fe4 <SPI1_Init>:
 * @func   SPI1_Init
 * @brief  Initialize the SPI2
 * @param  None
 * @retval None
 */
void SPI1_Init(void){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
	SPI_InitTypeDef		SPI_InitStructure;
	NVIC_InitTypeDef	NVIC_InitStructure;

	//Khoi tao GPIO
	//Cap clock cho AHB1
	RCC_AHB1PeriphClockCmd(SPI_SLAVE_GPIO_CLK, ENABLE);
 8000fea:	2101      	movs	r1, #1
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff fc1b 	bl	8000828 <RCC_AHB1PeriphClockCmd>

	//Khoi tao cac tham so ban dau
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_OType_PP;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = SPI_SLAVE_SCK_PIN | SPI_SLAVE_MISO_PIN | SPI_SLAVE_MOSI_PIN;
 8000ffe:	23e0      	movs	r3, #224	; 0xe0
 8001000:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_SLAVE_GPIO_PORT, &GPIO_InitStructure);
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	4619      	mov	r1, r3
 8001008:	4829      	ldr	r0, [pc, #164]	; (80010b0 <SPI1_Init+0xcc>)
 800100a:	f7ff fa4f 	bl	80004ac <GPIO_Init>

	//Khoi tao SPI2
	GPIO_PinAFConfig(SPI_SLAVE_GPIO_PORT, GPIO_PinSource5, GPIO_AF_SPI1);
 800100e:	2205      	movs	r2, #5
 8001010:	2105      	movs	r1, #5
 8001012:	4827      	ldr	r0, [pc, #156]	; (80010b0 <SPI1_Init+0xcc>)
 8001014:	f7ff fb11 	bl	800063a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_SLAVE_GPIO_PORT, GPIO_PinSource6, GPIO_AF_SPI1);
 8001018:	2205      	movs	r2, #5
 800101a:	2106      	movs	r1, #6
 800101c:	4824      	ldr	r0, [pc, #144]	; (80010b0 <SPI1_Init+0xcc>)
 800101e:	f7ff fb0c 	bl	800063a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_SLAVE_GPIO_PORT, GPIO_PinSource7, GPIO_AF_SPI1);
 8001022:	2205      	movs	r2, #5
 8001024:	2107      	movs	r1, #7
 8001026:	4822      	ldr	r0, [pc, #136]	; (80010b0 <SPI1_Init+0xcc>)
 8001028:	f7ff fb07 	bl	800063a <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800102c:	2301      	movs	r3, #1
 800102e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001030:	2302      	movs	r3, #2
 8001032:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001034:	2300      	movs	r3, #0
 8001036:	77bb      	strb	r3, [r7, #30]

	GPIO_InitStructure.GPIO_Pin = SPI_SLAVE_NSS_PIN;
 8001038:	2310      	movs	r3, #16
 800103a:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_SLAVE_GPIO_PORT, &GPIO_InitStructure);
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4619      	mov	r1, r3
 8001042:	481b      	ldr	r0, [pc, #108]	; (80010b0 <SPI1_Init+0xcc>)
 8001044:	f7ff fa32 	bl	80004ac <GPIO_Init>

	//Khoi tao ngoai vi SPI su dung che do Master
	//Bat clock cho APB1
	RCC_APB2PeriphClockCmd(SPI_SLAVE_CLK, ENABLE);
 8001048:	2101      	movs	r1, #1
 800104a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800104e:	f7ff fc2b 	bl	80008a8 <RCC_APB2PeriphClockCmd>

	//Khoi tao cac tham so ban dau
	//Khoi tao mode master
	SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8001052:	2300      	movs	r3, #0
 8001054:	80fb      	strh	r3, [r7, #6]

	//Khoi tao Fullduplex (Song cong)
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001056:	2300      	movs	r3, #0
 8001058:	80bb      	strh	r3, [r7, #4]

	//Khoi tao moi lan truyen 8 bits
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800105a:	2300      	movs	r3, #0
 800105c:	813b      	strh	r3, [r7, #8]

	//Khoi tao CPOL = 0
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800105e:	2300      	movs	r3, #0
 8001060:	817b      	strh	r3, [r7, #10]

	//Khoi tao lay mau tai luc len
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001062:	2300      	movs	r3, #0
 8001064:	81bb      	strh	r3, [r7, #12]

	//Dieu khien chan NSS mem
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106a:	81fb      	strh	r3, [r7, #14]

	//Khoi tao baudRate scale 4
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 800106c:	2308      	movs	r3, #8
 800106e:	823b      	strh	r3, [r7, #16]

	//Bit dau tien la LSB
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	827b      	strh	r3, [r7, #18]

	//Khoi tao SPI
	SPI_Init(SPI_SLAVE_INSTANCE, &SPI_InitStructure);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	480e      	ldr	r0, [pc, #56]	; (80010b4 <SPI1_Init+0xd0>)
 800107a:	f7ff fc35 	bl	80008e8 <SPI_Init>

	//Bat SPI
	SPI_Cmd(SPI_SLAVE_INSTANCE, ENABLE);
 800107e:	2101      	movs	r1, #1
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <SPI1_Init+0xd0>)
 8001082:	f7ff fc75 	bl	8000970 <SPI_Cmd>

	//Cau hinh ngat NVIC
	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 8001086:	2323      	movs	r3, #35	; 0x23
 8001088:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001092:	2301      	movs	r3, #1
 8001094:	70fb      	strb	r3, [r7, #3]

	NVIC_Init(&NVIC_InitStructure);
 8001096:	463b      	mov	r3, r7
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f9a5 	bl	80003e8 <NVIC_Init>

	SPI_I2S_ITConfig(SPI_SLAVE_INSTANCE, SPI_I2S_IT_RXNE, ENABLE);
 800109e:	2201      	movs	r2, #1
 80010a0:	2160      	movs	r1, #96	; 0x60
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <SPI1_Init+0xd0>)
 80010a4:	f7ff fca0 	bl	80009e8 <SPI_I2S_ITConfig>
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40013000 	.word	0x40013000

080010b8 <Led_Init>:
 * @func   Led_Init
 * @brief  Initialize the LED
 * @param  None
 * @retval None
 */
static void Led_Init(void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	//Khai bao kieu du lieu
	GPIO_InitTypeDef GPIO_Initstruct;

	//Bat block cho GPIO
	RCC_AHB1PeriphClockCmd(LED_GPIO_RCC, ENABLE);
 80010be:	2101      	movs	r1, #1
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fbb1 	bl	8000828 <RCC_AHB1PeriphClockCmd>

	//Khoi tao cac gia tri ban dau cho GREEN1
	GPIO_Initstruct.GPIO_Pin = LEDGREEN1_GPIO_PIN | LEDGREEN2_GPIO_PIN;
 80010c6:	f640 0301 	movw	r3, #2049	; 0x801
 80010ca:	603b      	str	r3, [r7, #0]
	GPIO_Initstruct.GPIO_Mode = GPIO_Mode_OUT;
 80010cc:	2301      	movs	r3, #1
 80010ce:	713b      	strb	r3, [r7, #4]
	GPIO_Initstruct.GPIO_Speed = GPIO_Speed_50MHz;
 80010d0:	2302      	movs	r3, #2
 80010d2:	717b      	strb	r3, [r7, #5]
	GPIO_Initstruct.GPIO_OType = GPIO_OType_PP;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(LEDGREEN1_GPIO_PORT, &GPIO_Initstruct);
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <Led_Init+0x34>)
 80010de:	f7ff f9e5 	bl	80004ac <GPIO_Init>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020000 	.word	0x40020000

080010f0 <Button_Init>:
 * @func   Button_Init
 * @brief  Initialize the Button
 * @param  None
 * @retval None
 */
static void Button_Init(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	//Khai bao kieu du lieu
	GPIO_InitTypeDef GPIO_Initstruct2;

	//Bat Clock cho GPIOB
	RCC_AHB1PeriphClockCmd(BUTTON_GPIO_RCC, ENABLE);
 80010f6:	2101      	movs	r1, #1
 80010f8:	2002      	movs	r0, #2
 80010fa:	f7ff fb95 	bl	8000828 <RCC_AHB1PeriphClockCmd>

	//Khoi tao ngat cho nut nhan 2
	//Khoi tao cac gia tri ban dau cho chan GPIO
	GPIO_Initstruct2.GPIO_Pin = BUTTON_GPIO_PIN;
 80010fe:	2308      	movs	r3, #8
 8001100:	603b      	str	r3, [r7, #0]
	GPIO_Initstruct2.GPIO_Mode = GPIO_Mode_IN;
 8001102:	2300      	movs	r3, #0
 8001104:	713b      	strb	r3, [r7, #4]
	GPIO_Initstruct2.GPIO_Speed = GPIO_Speed_50MHz;
 8001106:	2302      	movs	r3, #2
 8001108:	717b      	strb	r3, [r7, #5]
	GPIO_Initstruct2.GPIO_PuPd = GPIO_PuPd_UP;
 800110a:	2301      	movs	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_Initstruct2);
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <Button_Init+0x30>)
 8001114:	f7ff f9ca 	bl	80004ac <GPIO_Init>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020400 	.word	0x40020400

08001124 <Calculate_time>:
 * @func   CalculateTime
 * @brief  Calculate the time betwen 2 time.
 * @param  Time now, Time Miles
 * @retval Timenow - Time Miles
 */
static uint32_t Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent){
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	uint32_t TimeTotal;
	if (TimeInit >= TimeCurrent){
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d304      	bcc.n	8001140 <Calculate_time+0x1c>
		TimeTotal = TimeCurrent - TimeInit;
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	e004      	b.n	800114a <Calculate_time+0x26>
	}else {
		TimeTotal = 0xFFFFFFFFU + TimeCurrent - TimeInit;
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	3b01      	subs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
	}
	return TimeTotal;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <Delay>:
 * @func   Delay
 * @brief  Delay the time
 * @param  Time delay
 * @retval None
 */
void Delay(uint32_t ms){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	uint32_t buff = GetMilSecTick();
 8001160:	f7ff fdda 	bl	8000d18 <GetMilSecTick>
 8001164:	60f8      	str	r0, [r7, #12]
	while (Calculate_time(buff, GetMilSecTick()) <= ms);
 8001166:	bf00      	nop
 8001168:	f7ff fdd6 	bl	8000d18 <GetMilSecTick>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ffd7 	bl	8001124 <Calculate_time>
 8001176:	4602      	mov	r2, r0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4293      	cmp	r3, r2
 800117c:	d2f4      	bcs.n	8001168 <Delay+0x10>
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <SPI_TransmitData>:
 * @func   SPI_TransmitData
 * @brief  Start transmit the data
 * @param  SPIx, Data transmit
 * @retval None
 */
void SPI_TransmitData(SPI_TypeDef *SPIx, uint8_t data){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	//Bat chan NSS de bao tin hieu truyen
	GPIO_SetBits(SPI_MASTER_GPIO_PORT, SPI_MASTER_NSS_PIN);
 8001194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <SPI_TransmitData+0x44>)
 800119a:	f7ff fa30 	bl	80005fe <GPIO_SetBits>

	SPI_I2S_SendData(SPIx, data);
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fc10 	bl	80009ca <SPI_I2S_SendData>

	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET);
 80011aa:	bf00      	nop
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fc4b 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d0f8      	beq.n	80011ac <SPI_TransmitData+0x24>

	//Tat chan NSS de ket thuc truyen
	GPIO_ResetBits(SPI_MASTER_GPIO_PORT, SPI_MASTER_NSS_PIN);
 80011ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <SPI_TransmitData+0x44>)
 80011c0:	f7ff fa2c 	bl	800061c <GPIO_ResetBits>

}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020400 	.word	0x40020400

080011d0 <Button_GetLogic>:
 * @func   Button_GetLogic
 * @brief  Start transmit the data
 * @param  GPIOx, GPIO_Pin
 * @retval Logic of button(0 or 1)
 */
static uint8_t Button_GetLogic(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
	return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin);
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	4619      	mov	r1, r3
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff f9f2 	bl	80005ca <GPIO_ReadInputDataBit>
 80011e6:	4603      	mov	r3, r0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Led_control>:
 * @func   Led_control
 * @brief  Control the status of LED
 * @param  GPIOx, GPIO_Pin, status of led
 * @retval None
 */
void Led_control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
	if (status == GPIO_PIN_SET){
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d105      	bne.n	8001212 <Led_control+0x22>
		GPIO_SetBits(GPIOx, GPIO_Pin);
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	4619      	mov	r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff f9f7 	bl	80005fe <GPIO_SetBits>
	}else if(status == GPIO_PIN_RESET){
		GPIO_ResetBits(GPIOx, GPIO_Pin);
	}
}
 8001210:	e007      	b.n	8001222 <Led_control+0x32>
	}else if(status == GPIO_PIN_RESET){
 8001212:	787b      	ldrb	r3, [r7, #1]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d104      	bne.n	8001222 <Led_control+0x32>
		GPIO_ResetBits(GPIOx, GPIO_Pin);
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff f9fd 	bl	800061c <GPIO_ResetBits>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <Green_control>:
 * @func   Green_control
 * @brief  Control all the Green Led
 * @param  status of led
 * @retval None
 */
void Green_control(uint8_t status){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	if (status == GPIO_PIN_SET){
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10b      	bne.n	8001254 <Green_control+0x28>
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2101      	movs	r1, #1
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <Green_control+0x4c>)
 8001242:	f7ff ffd5 	bl	80011f0 <Led_control>
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <Green_control+0x4c>)
 800124e:	f7ff ffcf 	bl	80011f0 <Led_control>
	}else if(status == GPIO_PIN_RESET){
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_RESET);
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_RESET);
	}
}
 8001252:	e00d      	b.n	8001270 <Green_control+0x44>
	}else if(status == GPIO_PIN_RESET){
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10a      	bne.n	8001270 <Green_control+0x44>
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2101      	movs	r1, #1
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <Green_control+0x4c>)
 8001260:	f7ff ffc6 	bl	80011f0 <Led_control>
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <Green_control+0x4c>)
 800126c:	f7ff ffc0 	bl	80011f0 <Led_control>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40020000 	.word	0x40020000

0800127c <SPI1_IRQHandler>:
 * @func   SPI1_IRQHandler
 * @brief  The Interupt function of the SPI1. If get a IT signal from SPI1, all Command in this function will run.
 * @param  None
 * @retval None
 */
void SPI1_IRQHandler(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	if (SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) == SET){
 8001280:	2160      	movs	r1, #96	; 0x60
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <SPI1_IRQHandler+0x2c>)
 8001284:	f7ff fbfd 	bl	8000a82 <SPI_I2S_GetITStatus>
 8001288:	4603      	mov	r3, r0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d106      	bne.n	800129c <SPI1_IRQHandler+0x20>
		reciveDataSlave = SPI_I2S_ReceiveData(SPI1);
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <SPI1_IRQHandler+0x2c>)
 8001290:	f7ff fb8e 	bl	80009b0 <SPI_I2S_ReceiveData>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SPI1_IRQHandler+0x30>)
 800129a:	801a      	strh	r2, [r3, #0]
	}
	SPI_I2S_ClearITPendingBit(SPI1, SPI_I2S_IT_RXNE);
 800129c:	2160      	movs	r1, #96	; 0x60
 800129e:	4802      	ldr	r0, [pc, #8]	; (80012a8 <SPI1_IRQHandler+0x2c>)
 80012a0:	f7ff fc2a 	bl	8000af8 <SPI_I2S_ClearITPendingBit>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40013000 	.word	0x40013000
 80012ac:	200001cc 	.word	0x200001cc

080012b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b4:	f7fe ff8e 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012de:	f000 f811 	bl	8001304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e2:	f7ff fddb 	bl	8000e9c <main>

080012e6 <LoopForever>:

LoopForever:
  b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   r0, =_estack
 80012e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80012f4:	0800136c 	.word	0x0800136c
  ldr r2, =_sbss
 80012f8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80012fc:	200001d0 	.word	0x200001d0

08001300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <__libc_init_array>:
 8001304:	b570      	push	{r4, r5, r6, lr}
 8001306:	4d0d      	ldr	r5, [pc, #52]	; (800133c <__libc_init_array+0x38>)
 8001308:	4c0d      	ldr	r4, [pc, #52]	; (8001340 <__libc_init_array+0x3c>)
 800130a:	1b64      	subs	r4, r4, r5
 800130c:	10a4      	asrs	r4, r4, #2
 800130e:	2600      	movs	r6, #0
 8001310:	42a6      	cmp	r6, r4
 8001312:	d109      	bne.n	8001328 <__libc_init_array+0x24>
 8001314:	4d0b      	ldr	r5, [pc, #44]	; (8001344 <__libc_init_array+0x40>)
 8001316:	4c0c      	ldr	r4, [pc, #48]	; (8001348 <__libc_init_array+0x44>)
 8001318:	f000 f818 	bl	800134c <_init>
 800131c:	1b64      	subs	r4, r4, r5
 800131e:	10a4      	asrs	r4, r4, #2
 8001320:	2600      	movs	r6, #0
 8001322:	42a6      	cmp	r6, r4
 8001324:	d105      	bne.n	8001332 <__libc_init_array+0x2e>
 8001326:	bd70      	pop	{r4, r5, r6, pc}
 8001328:	f855 3b04 	ldr.w	r3, [r5], #4
 800132c:	4798      	blx	r3
 800132e:	3601      	adds	r6, #1
 8001330:	e7ee      	b.n	8001310 <__libc_init_array+0xc>
 8001332:	f855 3b04 	ldr.w	r3, [r5], #4
 8001336:	4798      	blx	r3
 8001338:	3601      	adds	r6, #1
 800133a:	e7f2      	b.n	8001322 <__libc_init_array+0x1e>
 800133c:	08001364 	.word	0x08001364
 8001340:	08001364 	.word	0x08001364
 8001344:	08001364 	.word	0x08001364
 8001348:	08001368 	.word	0x08001368

0800134c <_init>:
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	bf00      	nop
 8001350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001352:	bc08      	pop	{r3}
 8001354:	469e      	mov	lr, r3
 8001356:	4770      	bx	lr

08001358 <_fini>:
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135a:	bf00      	nop
 800135c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135e:	bc08      	pop	{r3}
 8001360:	469e      	mov	lr, r3
 8001362:	4770      	bx	lr
