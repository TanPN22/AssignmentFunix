
Assignment01.IoT303x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000afc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c90  08000c98  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c90  08000c90  00010c98  2**0
                  CONTENTS
  4 .ARM          00000000  08000c90  08000c90  00010c98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c90  08000c98  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c90  08000c90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000c98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000c98  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c98  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003bf6  00000000  00000000  00010d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001162  00000000  00000000  00014901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000420  00000000  00000000  00015a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000305  00000000  00000000  00015e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000b18d  00000000  00000000  0001618d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000477c  00000000  00000000  0002131a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003f45b  00000000  00000000  00025a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fd8  00000000  00000000  00064ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00065ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c78 	.word	0x08000c78

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000c78 	.word	0x08000c78

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f80d 	bl	8000240 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <SetSysClock+0x94>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000248:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <SetSysClock+0x94>)
 800024a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800024e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000250:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <SetSysClock+0x98>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <SetSysClock+0x98>)
 8000256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800025a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <SetSysClock+0x94>)
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <SetSysClock+0x94>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <SetSysClock+0x94>)
 8000266:	4a1b      	ldr	r2, [pc, #108]	; (80002d4 <SetSysClock+0x94>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800026c:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <SetSysClock+0x94>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <SetSysClock+0x94>)
 8000272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000276:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <SetSysClock+0x94>)
 800027a:	4a18      	ldr	r2, [pc, #96]	; (80002dc <SetSysClock+0x9c>)
 800027c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <SetSysClock+0x94>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <SetSysClock+0x94>)
 8000284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000288:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800028a:	bf00      	nop
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <SetSysClock+0x94>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <SetSysClock+0xa0>)
 800029a:	f240 6202 	movw	r2, #1538	; 0x602
 800029e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <SetSysClock+0x94>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <SetSysClock+0x94>)
 80002a6:	f023 0303 	bic.w	r3, r3, #3
 80002aa:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <SetSysClock+0x94>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <SetSysClock+0x94>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002b8:	bf00      	nop
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <SetSysClock+0x94>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f003 030c 	and.w	r3, r3, #12
 80002c2:	2b08      	cmp	r3, #8
 80002c4:	d1f9      	bne.n	80002ba <SetSysClock+0x7a>
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40007000 	.word	0x40007000
 80002dc:	08015410 	.word	0x08015410
 80002e0:	40023c00 	.word	0x40023c00

080002e4 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80002ec:	2300      	movs	r3, #0
 80002ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <EXTI_GetFlagStatus+0x30>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80002fc:	2301      	movs	r3, #1
 80002fe:	73fb      	strb	r3, [r7, #15]
 8000300:	e001      	b.n	8000306 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8000302:	2300      	movs	r3, #0
 8000304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000306:	7bfb      	ldrb	r3, [r7, #15]
}
 8000308:	4618      	mov	r0, r3
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40013c00 	.word	0x40013c00

08000318 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI_ClearFlag+0x1c>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	6153      	str	r3, [r2, #20]
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40013c00 	.word	0x40013c00

08000338 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	691a      	ldr	r2, [r3, #16]
 800034c:	887b      	ldrh	r3, [r7, #2]
 800034e:	4013      	ands	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000354:	2301      	movs	r3, #1
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e001      	b.n	800035e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800035a:	2300      	movs	r3, #0
 800035c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800035e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000360:	4618      	mov	r0, r3
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	887a      	ldrh	r2, [r7, #2]
 800037c:	831a      	strh	r2, [r3, #24]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	460b      	mov	r3, r1
 8000394:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	887a      	ldrh	r2, [r7, #2]
 800039a:	835a      	strh	r2, [r3, #26]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	889b      	ldrh	r3, [r3, #4]
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80003ba:	b29b      	uxth	r3, r3
}
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b087      	sub	sp, #28
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80003e4:	887b      	ldrh	r3, [r7, #2]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	095b      	lsrs	r3, r3, #5
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80003ee:	887b      	ldrh	r3, [r7, #2]
 80003f0:	f003 031f 	and.w	r3, r3, #31
 80003f4:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80003f6:	2201      	movs	r2, #1
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d107      	bne.n	8000416 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	899b      	ldrh	r3, [r3, #12]
 800040a:	b29b      	uxth	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	4013      	ands	r3, r2
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	e011      	b.n	800043a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d107      	bne.n	800042c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	8a1b      	ldrh	r3, [r3, #16]
 8000420:	b29b      	uxth	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	4013      	ands	r3, r2
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e006      	b.n	800043a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	8a9b      	ldrh	r3, [r3, #20]
 8000430:	b29b      	uxth	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	4013      	ands	r3, r2
 8000438:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800043a:	887b      	ldrh	r3, [r7, #2]
 800043c:	0a1b      	lsrs	r3, r3, #8
 800043e:	b29b      	uxth	r3, r3
 8000440:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000442:	2201      	movs	r2, #1
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fa02 f303 	lsl.w	r3, r2, r3
 800044a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	b29b      	uxth	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	4013      	ands	r3, r2
 8000458:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d005      	beq.n	800046c <USART_GetITStatus+0xa4>
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d002      	beq.n	800046c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000466:	2301      	movs	r3, #1
 8000468:	74fb      	strb	r3, [r7, #19]
 800046a:	e001      	b.n	8000470 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000470:	7cfb      	ldrb	r3, [r7, #19]
}
 8000472:	4618      	mov	r0, r3
 8000474:	371c      	adds	r7, #28
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800047e:	b480      	push	{r7}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
 8000486:	460b      	mov	r3, r1
 8000488:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800048a:	2300      	movs	r3, #0
 800048c:	81fb      	strh	r3, [r7, #14]
 800048e:	2300      	movs	r3, #0
 8000490:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000492:	887b      	ldrh	r3, [r7, #2]
 8000494:	0a1b      	lsrs	r3, r3, #8
 8000496:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	2201      	movs	r2, #1
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80004a2:	89bb      	ldrh	r3, [r7, #12]
 80004a4:	43db      	mvns	r3, r3
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	801a      	strh	r2, [r3, #0]
}
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <GetMilSecTick+0x14>)
 80004be:	681b      	ldr	r3, [r3, #0]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	2000001c 	.word	0x2000001c

080004d0 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <SysTick_Handler+0x18>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a03      	ldr	r2, [pc, #12]	; (80004e8 <SysTick_Handler+0x18>)
 80004dc:	6013      	str	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	2000001c 	.word	0x2000001c

080004ec <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f2:	b672      	cpsid	i
}
 80004f4:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 80004f6:	f240 5125 	movw	r1, #1317	; 0x525
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <USART2_IRQHandler+0x4c>)
 80004fc:	f7ff ff64 	bl	80003c8 <USART_GetITStatus>
 8000500:	4603      	mov	r3, r0
 8000502:	2b01      	cmp	r3, #1
 8000504:	d112      	bne.n	800052c <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <USART2_IRQHandler+0x50>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 800050c:	480a      	ldr	r0, [pc, #40]	; (8000538 <USART2_IRQHandler+0x4c>)
 800050e:	f7ff ff4b 	bl	80003a8 <USART_ReceiveData>
 8000512:	4603      	mov	r3, r0
 8000514:	b2db      	uxtb	r3, r3
 8000516:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000518:	1cfb      	adds	r3, r7, #3
 800051a:	4619      	mov	r1, r3
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f822 	bl	8000566 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000522:	f240 5125 	movw	r1, #1317	; 0x525
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <USART2_IRQHandler+0x4c>)
 8000528:	f7ff ffa9 	bl	800047e <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 800052c:	b662      	cpsie	i
}
 800052e:	bf00      	nop
    }
    __enable_irq();
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40004400 	.word	0x40004400
 800053c:	20000020 	.word	0x20000020

08000540 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	885a      	ldrh	r2, [r3, #2]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	bf2c      	ite	cs
 8000554:	2301      	movcs	r3, #1
 8000556:	2300      	movcc	r3, #0
 8000558:	b2db      	uxtb	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000566:	b580      	push	{r7, lr}
 8000568:	b084      	sub	sp, #16
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]
 8000578:	e021      	b.n	80005be <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	441a      	add	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	88c9      	ldrh	r1, [r1, #6]
 8000588:	440b      	add	r3, r1
 800058a:	7812      	ldrb	r2, [r2, #0]
 800058c:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	88db      	ldrh	r3, [r3, #6]
 8000592:	3301      	adds	r3, #1
 8000594:	b29b      	uxth	r3, r3
 8000596:	b21a      	sxth	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	3b01      	subs	r3, #1
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	4013      	ands	r3, r2
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	885b      	ldrh	r3, [r3, #2]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	3301      	adds	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	7bfa      	ldrb	r2, [r7, #15]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d3d8      	bcc.n	800057a <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff ffb9 	bl	8000540 <bufIsFull>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d011      	beq.n	80005f8 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	891a      	ldrh	r2, [r3, #8]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	4413      	add	r3, r2
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	4013      	ands	r3, r2
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80005f8:	b662      	cpsie	i
}
 80005fa:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <main>:
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

int main(void)
{
 8000608:	b598      	push	{r3, r4, r7, lr}
 800060a:	af00      	add	r7, sp, #0
	//--------------Init cac gia tri-------------


	//-------------Khoi dong---------------------
	LedGreen_blink(4);
 800060c:	2004      	movs	r0, #4
 800060e:	f000 f8ef 	bl	80007f0 <LedGreen_blink>
    /* Loop forever */
	while (1){
		statusOfButton2 = !Button_GetLogic(BUTTON2_IT_GPIO_PORT, BUTTON2_IT_GPIO_PIN);
 8000612:	2108      	movs	r1, #8
 8000614:	4840      	ldr	r0, [pc, #256]	; (8000718 <main+0x110>)
 8000616:	f000 f9bf 	bl	8000998 <Button_GetLogic>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	4b3c      	ldr	r3, [pc, #240]	; (800071c <main+0x114>)
 800062a:	701a      	strb	r2, [r3, #0]
		statusOfButton4 = !Button_GetLogic(BUTTON4_IT_GPIO_PORT, BUTTON4_IT_GPIO_PIN);
 800062c:	2101      	movs	r1, #1
 800062e:	483a      	ldr	r0, [pc, #232]	; (8000718 <main+0x110>)
 8000630:	f000 f9b2 	bl	8000998 <Button_GetLogic>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	bf0c      	ite	eq
 800063a:	2301      	moveq	r3, #1
 800063c:	2300      	movne	r3, #0
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	4b37      	ldr	r3, [pc, #220]	; (8000720 <main+0x118>)
 8000644:	701a      	strb	r2, [r3, #0]
		if (staB3 == 1){
 8000646:	4b37      	ldr	r3, [pc, #220]	; (8000724 <main+0x11c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d108      	bne.n	8000660 <main+0x58>
			LedGreen_blink(5);
 800064e:	2005      	movs	r0, #5
 8000650:	f000 f8ce 	bl	80007f0 <LedGreen_blink>
			Buzzer_blink(2);
 8000654:	2002      	movs	r0, #2
 8000656:	f000 f8a3 	bl	80007a0 <Buzzer_blink>
			staB3 = 0;
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <main+0x11c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		}
		if ((statusOfButton4 == 1) && (Calculate_time(timeStartpressB4, GetMilSecTick())>500)){
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <main+0x118>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b01      	cmp	r3, #1
 8000668:	d113      	bne.n	8000692 <main+0x8a>
 800066a:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <main+0x120>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	461c      	mov	r4, r3
 8000670:	f7ff ff22 	bl	80004b8 <GetMilSecTick>
 8000674:	4603      	mov	r3, r0
 8000676:	4619      	mov	r1, r3
 8000678:	4620      	mov	r0, r4
 800067a:	f000 f85f 	bl	800073c <Calculate_time>
 800067e:	4603      	mov	r3, r0
 8000680:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000684:	d905      	bls.n	8000692 <main+0x8a>
			Red_control(1);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 f90c 	bl	80008a4 <Red_control>
			statusTerminalB4 = 1;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <main+0x124>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
		}
		if ((statusTerminalB4 == 1) && (statusOfButton4 == 0)){
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <main+0x124>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10a      	bne.n	80006b0 <main+0xa8>
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <main+0x118>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d105      	bne.n	80006b0 <main+0xa8>
			Red_control(0);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f8fd 	bl	80008a4 <Red_control>
			statusTerminalB4 = 0;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <main+0x124>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
		}
		if (statusOfButton3 == 1) {
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <main+0x128>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d105      	bne.n	80006c6 <main+0xbe>
		Green_control(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 f91c 	bl	80008f8 <Green_control>
		statusOfButton3 = 0;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <main+0x128>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
		}
		if ((statusOfButton2 == 1) && (Calculate_time(timeStartPressB2, GetMilSecTick())>500)) {
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <main+0x114>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d113      	bne.n	80006f8 <main+0xf0>
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <main+0x12c>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	461c      	mov	r4, r3
 80006d6:	f7ff feef 	bl	80004b8 <GetMilSecTick>
 80006da:	4603      	mov	r3, r0
 80006dc:	4619      	mov	r1, r3
 80006de:	4620      	mov	r0, r4
 80006e0:	f000 f82c 	bl	800073c <Calculate_time>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006ea:	d905      	bls.n	80006f8 <main+0xf0>

			Blue_control(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 f92b 	bl	8000948 <Blue_control>
			statusTerminalB2 = 1;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <main+0x130>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
		}

		if ((statusTerminalB2 == 1) && (statusOfButton2 == 0)){
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <main+0x130>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d188      	bne.n	8000612 <main+0xa>
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <main+0x114>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d183      	bne.n	8000612 <main+0xa>
			Blue_control(0);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f91c 	bl	8000948 <Blue_control>
			statusTerminalB2 = 0;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <main+0x130>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
		statusOfButton2 = !Button_GetLogic(BUTTON2_IT_GPIO_PORT, BUTTON2_IT_GPIO_PIN);
 8000716:	e77c      	b.n	8000612 <main+0xa>
 8000718:	40020400 	.word	0x40020400
 800071c:	20000028 	.word	0x20000028
 8000720:	2000002a 	.word	0x2000002a
 8000724:	20000030 	.word	0x20000030
 8000728:	20000034 	.word	0x20000034
 800072c:	20000037 	.word	0x20000037
 8000730:	20000029 	.word	0x20000029
 8000734:	20000032 	.word	0x20000032
 8000738:	20000036 	.word	0x20000036

0800073c <Calculate_time>:
 * @brief  Calculate the time betwen 2 time.
 * @param  Time now, Time Miles
 * @retval Timenow - Time Miles
 */
//Tinh toan thoi gian
uint32_t Calculate_time(uint32_t TimeInit, uint32_t TimeCurrent){
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	uint32_t TimeTotal;
	if (TimeInit >= TimeCurrent){
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	429a      	cmp	r2, r3
 800074c:	d304      	bcc.n	8000758 <Calculate_time+0x1c>
		TimeTotal = TimeCurrent - TimeInit;
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e004      	b.n	8000762 <Calculate_time+0x26>
	}else {
		TimeTotal = 0xFFFFFFFFU + TimeCurrent - TimeInit;
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	3b01      	subs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
	}
	return TimeTotal;
 8000762:	68fb      	ldr	r3, [r7, #12]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <Delay>:
 * @brief  Delay the time
 * @param  Time delay
 * @retval None
 */
//Khoi tao ham Delay
void Delay(uint32_t ms){
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	uint32_t buff = GetMilSecTick();
 8000778:	f7ff fe9e 	bl	80004b8 <GetMilSecTick>
 800077c:	60f8      	str	r0, [r7, #12]
	while (Calculate_time(buff, GetMilSecTick()) <= ms);
 800077e:	bf00      	nop
 8000780:	f7ff fe9a 	bl	80004b8 <GetMilSecTick>
 8000784:	4603      	mov	r3, r0
 8000786:	4619      	mov	r1, r3
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f7ff ffd7 	bl	800073c <Calculate_time>
 800078e:	4602      	mov	r2, r0
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4293      	cmp	r3, r2
 8000794:	d2f4      	bcs.n	8000780 <Delay+0x10>
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <Buzzer_blink>:
 * @func   BuzzerBlink
 * @brief  Blink the buzzer
 * @param  None
 * @retval None
 */
void Buzzer_blink(uint8_t BuzzerBlink){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < BuzzerBlink; i++){
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e014      	b.n	80007da <Buzzer_blink+0x3a>
		Buzzer_control(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <Buzzer_blink+0x4c>)
 80007b8:	f000 f83a 	bl	8000830 <Buzzer_control>
		Delay(100);
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f7ff ffd7 	bl	8000770 <Delay>
		Buzzer_control(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <Buzzer_blink+0x4c>)
 80007ca:	f000 f831 	bl	8000830 <Buzzer_control>
		Delay(100);
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f7ff ffce 	bl	8000770 <Delay>
	for (int i = 0; i < BuzzerBlink; i++){
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbe6      	blt.n	80007b0 <Buzzer_blink+0x10>
	}
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020800 	.word	0x40020800

080007f0 <LedGreen_blink>:
 * @func   LedGreenBlink
 * @brief  Blink all Green Led
 * @param  Number of blinking
 * @retval None
 */
void LedGreen_blink(uint8_t NumBlink){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < NumBlink; i++){
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	e00e      	b.n	800081e <LedGreen_blink+0x2e>
		Green_control(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f000 f879 	bl	80008f8 <Green_control>
		Delay(100);
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f7ff ffb2 	bl	8000770 <Delay>
		Green_control(0);
 800080c:	2000      	movs	r0, #0
 800080e:	f000 f873 	bl	80008f8 <Green_control>
		Delay(100);
 8000812:	2064      	movs	r0, #100	; 0x64
 8000814:	f7ff ffac 	bl	8000770 <Delay>
	for (int i = 0; i < NumBlink; i++){
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	429a      	cmp	r2, r3
 8000824:	dbec      	blt.n	8000800 <LedGreen_blink+0x10>
	}
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Buzzer_control>:
 * @func   BuzzerControl
 * @brief  Control the Buzzer.(On or Off)
 * @param  Port, Pin, Status of Buzzer.
 * @retval None
 */
static void Buzzer_control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
 800083c:	4613      	mov	r3, r2
 800083e:	707b      	strb	r3, [r7, #1]
	if (status == GPIO_PIN_SET){
 8000840:	787b      	ldrb	r3, [r7, #1]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d105      	bne.n	8000852 <Buzzer_control+0x22>
		GPIO_SetBits(GPIOx, GPIO_Pin);
 8000846:	887b      	ldrh	r3, [r7, #2]
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fd8e 	bl	800036c <GPIO_SetBits>
	}else if(status == GPIO_PIN_RESET){
		GPIO_ResetBits(GPIOx, GPIO_Pin);
	}
}
 8000850:	e007      	b.n	8000862 <Buzzer_control+0x32>
	}else if(status == GPIO_PIN_RESET){
 8000852:	787b      	ldrb	r3, [r7, #1]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d104      	bne.n	8000862 <Buzzer_control+0x32>
		GPIO_ResetBits(GPIOx, GPIO_Pin);
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	4619      	mov	r1, r3
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fd94 	bl	800038a <GPIO_ResetBits>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <Led_control>:
 * @func   LedControl
 * @brief  Control the Led.(On or Off)
 * @param  Port, Pin, Status of Led.
 * @retval None
 */
void Led_control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status){
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	807b      	strh	r3, [r7, #2]
 8000876:	4613      	mov	r3, r2
 8000878:	707b      	strb	r3, [r7, #1]
	if (status == GPIO_PIN_SET){
 800087a:	787b      	ldrb	r3, [r7, #1]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d105      	bne.n	800088c <Led_control+0x22>
		GPIO_SetBits(GPIOx, GPIO_Pin);
 8000880:	887b      	ldrh	r3, [r7, #2]
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fd71 	bl	800036c <GPIO_SetBits>
	}else if(status == GPIO_PIN_RESET){
		GPIO_ResetBits(GPIOx, GPIO_Pin);
	}
}
 800088a:	e007      	b.n	800089c <Led_control+0x32>
	}else if(status == GPIO_PIN_RESET){
 800088c:	787b      	ldrb	r3, [r7, #1]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d104      	bne.n	800089c <Led_control+0x32>
		GPIO_ResetBits(GPIOx, GPIO_Pin);
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	4619      	mov	r1, r3
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fd77 	bl	800038a <GPIO_ResetBits>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Red_control>:
 * @func   RedControl
 * @brief  Control the Red Led.(On or Off)
 * @param  Status of Led.
 * @retval None
 */
void Red_control(uint8_t status){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	if (status == GPIO_PIN_SET){
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10b      	bne.n	80008cc <Red_control+0x28>
		Led_control(LEDRED1_GPIO_PORT, LEDRED1_GPIO_PIN, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2102      	movs	r1, #2
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <Red_control+0x4c>)
 80008ba:	f7ff ffd6 	bl	800086a <Led_control>
		Led_control(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <Red_control+0x50>)
 80008c6:	f7ff ffd0 	bl	800086a <Led_control>
	}else if(status == GPIO_PIN_RESET){
		Led_control(LEDRED1_GPIO_PORT, LEDRED1_GPIO_PIN, GPIO_PIN_RESET);
		Led_control(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN, GPIO_PIN_RESET);
	}
}
 80008ca:	e00d      	b.n	80008e8 <Red_control+0x44>
	}else if(status == GPIO_PIN_RESET){
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10a      	bne.n	80008e8 <Red_control+0x44>
		Led_control(LEDRED1_GPIO_PORT, LEDRED1_GPIO_PIN, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2102      	movs	r1, #2
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <Red_control+0x4c>)
 80008d8:	f7ff ffc7 	bl	800086a <Led_control>
		Led_control(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <Red_control+0x50>)
 80008e4:	f7ff ffc1 	bl	800086a <Led_control>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020400 	.word	0x40020400

080008f8 <Green_control>:
 * @func   GreenControl
 * @brief  Control the Green Led.(On or Off)
 * @param  Status of Led.
 * @retval None
 */
void Green_control(uint8_t status){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	if (status == GPIO_PIN_SET){
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d10b      	bne.n	8000920 <Green_control+0x28>
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2101      	movs	r1, #1
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <Green_control+0x4c>)
 800090e:	f7ff ffac 	bl	800086a <Led_control>
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000918:	480a      	ldr	r0, [pc, #40]	; (8000944 <Green_control+0x4c>)
 800091a:	f7ff ffa6 	bl	800086a <Led_control>
	}else if(status == GPIO_PIN_RESET){
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_RESET);
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_RESET);
	}
}
 800091e:	e00d      	b.n	800093c <Green_control+0x44>
	}else if(status == GPIO_PIN_RESET){
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10a      	bne.n	800093c <Green_control+0x44>
		Led_control(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2101      	movs	r1, #1
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <Green_control+0x4c>)
 800092c:	f7ff ff9d 	bl	800086a <Led_control>
		Led_control(LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <Green_control+0x4c>)
 8000938:	f7ff ff97 	bl	800086a <Led_control>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40020000 	.word	0x40020000

08000948 <Blue_control>:
 * @func   BlueControl
 * @brief  Control the Blue Led.(On or Off)
 * @param  Status of Led.
 * @retval None
 */
void Blue_control(uint8_t status){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	if (status == GPIO_PIN_SET){
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d10b      	bne.n	8000970 <Blue_control+0x28>
		Led_control(LEDBLUE1_GPIO_PORT, LEDBLUE1_GPIO_PIN, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2108      	movs	r1, #8
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <Blue_control+0x4c>)
 800095e:	f7ff ff84 	bl	800086a <Led_control>
		Led_control(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <Blue_control+0x4c>)
 800096a:	f7ff ff7e 	bl	800086a <Led_control>
	}else if(status == GPIO_PIN_RESET){
		Led_control(LEDBLUE1_GPIO_PORT, LEDBLUE1_GPIO_PIN, GPIO_PIN_RESET);
		Led_control(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN, GPIO_PIN_RESET);
	}
}
 800096e:	e00d      	b.n	800098c <Blue_control+0x44>
	}else if(status == GPIO_PIN_RESET){
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10a      	bne.n	800098c <Blue_control+0x44>
		Led_control(LEDBLUE1_GPIO_PORT, LEDBLUE1_GPIO_PIN, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <Blue_control+0x4c>)
 800097c:	f7ff ff75 	bl	800086a <Led_control>
		Led_control(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <Blue_control+0x4c>)
 8000988:	f7ff ff6f 	bl	800086a <Led_control>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020000 	.word	0x40020000

08000998 <Button_GetLogic>:
 * @func   ButtonGetLogic
 * @brief  Get the logic form Button.(On or Off)
 * @param  Port of Button, Pin of Button
 * @retval On or Off. (O or 1)
 */
static uint8_t Button_GetLogic(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]
	return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin);
 80009a4:	887b      	ldrh	r3, [r7, #2]
 80009a6:	4619      	mov	r1, r3
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fcc5 	bl	8000338 <GPIO_ReadInputDataBit>
 80009ae:	4603      	mov	r3, r0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <EXTI3_IRQHandler>:
 * @func   EXTI3 IT Handler
 * @brief  When get Interupt from EXTI3. This code in function will running.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void){
 80009b8:	b598      	push	{r3, r4, r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus(EXTI_Line3) == SET){
 80009bc:	2008      	movs	r0, #8
 80009be:	f7ff fc91 	bl	80002e4 <EXTI_GetFlagStatus>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d148      	bne.n	8000a5a <EXTI3_IRQHandler+0xa2>
		//Button 2;
		if (countB2 == 0){
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <EXTI3_IRQHandler+0xac>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10c      	bne.n	80009ea <EXTI3_IRQHandler+0x32>
			timeStartPressB2 = GetMilSecTick();
 80009d0:	f7ff fd72 	bl	80004b8 <GetMilSecTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <EXTI3_IRQHandler+0xb0>)
 80009da:	801a      	strh	r2, [r3, #0]
			countB2 ++;
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <EXTI3_IRQHandler+0xac>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <EXTI3_IRQHandler+0xac>)
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e037      	b.n	8000a5a <EXTI3_IRQHandler+0xa2>
		}else if (countB2 == 1){
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <EXTI3_IRQHandler+0xac>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d127      	bne.n	8000a42 <EXTI3_IRQHandler+0x8a>
			if (Calculate_time(timeStartPressB2, GetMilSecTick()) <= 400){
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <EXTI3_IRQHandler+0xb0>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	461c      	mov	r4, r3
 80009f8:	f7ff fd5e 	bl	80004b8 <GetMilSecTick>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4619      	mov	r1, r3
 8000a00:	4620      	mov	r0, r4
 8000a02:	f7ff fe9b 	bl	800073c <Calculate_time>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a0c:	d80f      	bhi.n	8000a2e <EXTI3_IRQHandler+0x76>
				Blue_control(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff ff9a 	bl	8000948 <Blue_control>
				timeStartPressB2 = GetMilSecTick();
 8000a14:	f7ff fd50 	bl	80004b8 <GetMilSecTick>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <EXTI3_IRQHandler+0xb0>)
 8000a1e:	801a      	strh	r2, [r3, #0]
				countB2 ++;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <EXTI3_IRQHandler+0xac>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <EXTI3_IRQHandler+0xac>)
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e015      	b.n	8000a5a <EXTI3_IRQHandler+0xa2>
			}else {
				timeStartPressB2 = GetMilSecTick();
 8000a2e:	f7ff fd43 	bl	80004b8 <GetMilSecTick>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <EXTI3_IRQHandler+0xb0>)
 8000a38:	801a      	strh	r2, [r3, #0]
				countB2 = 0;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <EXTI3_IRQHandler+0xac>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	e00b      	b.n	8000a5a <EXTI3_IRQHandler+0xa2>
			}
		}else {
			timeStartPressB2 = GetMilSecTick();
 8000a42:	f7ff fd39 	bl	80004b8 <GetMilSecTick>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <EXTI3_IRQHandler+0xb0>)
 8000a4c:	801a      	strh	r2, [r3, #0]
			Blue_control(0);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff ff7a 	bl	8000948 <Blue_control>
			countB2 = 0;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <EXTI3_IRQHandler+0xac>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
		}
	}
	EXTI_ClearFlag(EXTI_Line3);
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f7ff fc5c 	bl	8000318 <EXTI_ClearFlag>
}
 8000a60:	bf00      	nop
 8000a62:	bd98      	pop	{r3, r4, r7, pc}
 8000a64:	2000002c 	.word	0x2000002c
 8000a68:	20000032 	.word	0x20000032

08000a6c <EXTI4_IRQHandler>:
 * @func   EXTI4 IT Handler
 * @brief  When get Interupt from EXTI4. This code in function will running.
 * @param  None
 * @retval None
 */
void EXTI4_IRQHandler(void){
 8000a6c:	b598      	push	{r3, r4, r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus(EXTI_Line4) == SET){
 8000a70:	2010      	movs	r0, #16
 8000a72:	f7ff fc37 	bl	80002e4 <EXTI_GetFlagStatus>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d149      	bne.n	8000b10 <EXTI4_IRQHandler+0xa4>
		//Button 3
		if (countB3 == 0){
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10c      	bne.n	8000a9e <EXTI4_IRQHandler+0x32>
			countB3 ++;
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000a8e:	701a      	strb	r2, [r3, #0]
			timePressB3 = GetMilSecTick();
 8000a90:	f7ff fd12 	bl	80004b8 <GetMilSecTick>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <EXTI4_IRQHandler+0xb4>)
 8000a9a:	801a      	strh	r2, [r3, #0]
 8000a9c:	e01d      	b.n	8000ada <EXTI4_IRQHandler+0x6e>
		}else if(countB3 >= 1 && (Calculate_time(timePressB3, GetMilSecTick()) <= 400)){
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d019      	beq.n	8000ada <EXTI4_IRQHandler+0x6e>
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <EXTI4_IRQHandler+0xb4>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	461c      	mov	r4, r3
 8000aac:	f7ff fd04 	bl	80004b8 <GetMilSecTick>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f7ff fe41 	bl	800073c <Calculate_time>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ac0:	d80b      	bhi.n	8000ada <EXTI4_IRQHandler+0x6e>
			timePressB3 = GetMilSecTick();
 8000ac2:	f7ff fcf9 	bl	80004b8 <GetMilSecTick>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <EXTI4_IRQHandler+0xb4>)
 8000acc:	801a      	strh	r2, [r3, #0]
			countB3 ++;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000ad8:	701a      	strb	r2, [r3, #0]
		}
		if (Calculate_time(timePressB3, GetMilSecTick()) > 400){
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <EXTI4_IRQHandler+0xb4>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	461c      	mov	r4, r3
 8000ae0:	f7ff fcea 	bl	80004b8 <GetMilSecTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f7ff fe27 	bl	800073c <Calculate_time>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000af4:	d902      	bls.n	8000afc <EXTI4_IRQHandler+0x90>
			countB3 = 0;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
		}
		if (countB3 == 5){
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b05      	cmp	r3, #5
 8000b02:	d105      	bne.n	8000b10 <EXTI4_IRQHandler+0xa4>
			staB3 = 1;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <EXTI4_IRQHandler+0xb8>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
			countB3 = 0;
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <EXTI4_IRQHandler+0xb0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		}
	}
	EXTI_ClearFlag(EXTI_Line4);
 8000b10:	2010      	movs	r0, #16
 8000b12:	f7ff fc01 	bl	8000318 <EXTI_ClearFlag>
}
 8000b16:	bf00      	nop
 8000b18:	bd98      	pop	{r3, r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000002b 	.word	0x2000002b
 8000b20:	2000002e 	.word	0x2000002e
 8000b24:	20000030 	.word	0x20000030

08000b28 <EXTI0_IRQHandler>:
 * @func   EXTI0 IT Handler
 * @brief  When get Interupt from EXTI0. This code in function will running.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void){
 8000b28:	b598      	push	{r3, r4, r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus(EXTI_Line0) == SET){
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff fbd9 	bl	80002e4 <EXTI_GetFlagStatus>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d148      	bne.n	8000bca <EXTI0_IRQHandler+0xa2>
		//Button 4
		if (countB4 == 0){
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <EXTI0_IRQHandler+0xac>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10c      	bne.n	8000b5a <EXTI0_IRQHandler+0x32>
			timeStartpressB4 = GetMilSecTick();
 8000b40:	f7ff fcba 	bl	80004b8 <GetMilSecTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <EXTI0_IRQHandler+0xb0>)
 8000b4a:	801a      	strh	r2, [r3, #0]
			countB4 ++;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <EXTI0_IRQHandler+0xac>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <EXTI0_IRQHandler+0xac>)
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	e037      	b.n	8000bca <EXTI0_IRQHandler+0xa2>
		}else if (countB4 == 1){
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <EXTI0_IRQHandler+0xac>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d127      	bne.n	8000bb2 <EXTI0_IRQHandler+0x8a>
			if (Calculate_time(timeStartpressB4, GetMilSecTick()) <= 400){
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <EXTI0_IRQHandler+0xb0>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	461c      	mov	r4, r3
 8000b68:	f7ff fca6 	bl	80004b8 <GetMilSecTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4620      	mov	r0, r4
 8000b72:	f7ff fde3 	bl	800073c <Calculate_time>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b7c:	d80f      	bhi.n	8000b9e <EXTI0_IRQHandler+0x76>
				Red_control(1);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fe90 	bl	80008a4 <Red_control>
				timeStartpressB4 = GetMilSecTick();
 8000b84:	f7ff fc98 	bl	80004b8 <GetMilSecTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <EXTI0_IRQHandler+0xb0>)
 8000b8e:	801a      	strh	r2, [r3, #0]
				countB4 ++;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <EXTI0_IRQHandler+0xac>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <EXTI0_IRQHandler+0xac>)
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e015      	b.n	8000bca <EXTI0_IRQHandler+0xa2>
			}else {
				timeStartpressB4 = GetMilSecTick();
 8000b9e:	f7ff fc8b 	bl	80004b8 <GetMilSecTick>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <EXTI0_IRQHandler+0xb0>)
 8000ba8:	801a      	strh	r2, [r3, #0]
				countB4 = 0;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <EXTI0_IRQHandler+0xac>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e00b      	b.n	8000bca <EXTI0_IRQHandler+0xa2>
			}
		}else {
			timeStartpressB4 = GetMilSecTick();
 8000bb2:	f7ff fc81 	bl	80004b8 <GetMilSecTick>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <EXTI0_IRQHandler+0xb0>)
 8000bbc:	801a      	strh	r2, [r3, #0]
			Red_control(0);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fe70 	bl	80008a4 <Red_control>
			countB4 = 0;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <EXTI0_IRQHandler+0xac>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
		}
	}
	EXTI_ClearFlag(EXTI_Line0);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fba4 	bl	8000318 <EXTI_ClearFlag>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd98      	pop	{r3, r4, r7, pc}
 8000bd4:	2000002d 	.word	0x2000002d
 8000bd8:	20000034 	.word	0x20000034

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f7ff faf8 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f000 f811 	bl	8000c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff fcfb 	bl	8000608 <main>

08000c12 <LoopForever>:

LoopForever:
  b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c20:	08000c98 	.word	0x08000c98
  ldr r2, =_sbss
 8000c24:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c28:	20000038 	.word	0x20000038

08000c2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <__libc_init_array>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	4d0d      	ldr	r5, [pc, #52]	; (8000c68 <__libc_init_array+0x38>)
 8000c34:	4c0d      	ldr	r4, [pc, #52]	; (8000c6c <__libc_init_array+0x3c>)
 8000c36:	1b64      	subs	r4, r4, r5
 8000c38:	10a4      	asrs	r4, r4, #2
 8000c3a:	2600      	movs	r6, #0
 8000c3c:	42a6      	cmp	r6, r4
 8000c3e:	d109      	bne.n	8000c54 <__libc_init_array+0x24>
 8000c40:	4d0b      	ldr	r5, [pc, #44]	; (8000c70 <__libc_init_array+0x40>)
 8000c42:	4c0c      	ldr	r4, [pc, #48]	; (8000c74 <__libc_init_array+0x44>)
 8000c44:	f000 f818 	bl	8000c78 <_init>
 8000c48:	1b64      	subs	r4, r4, r5
 8000c4a:	10a4      	asrs	r4, r4, #2
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	42a6      	cmp	r6, r4
 8000c50:	d105      	bne.n	8000c5e <__libc_init_array+0x2e>
 8000c52:	bd70      	pop	{r4, r5, r6, pc}
 8000c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c58:	4798      	blx	r3
 8000c5a:	3601      	adds	r6, #1
 8000c5c:	e7ee      	b.n	8000c3c <__libc_init_array+0xc>
 8000c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c62:	4798      	blx	r3
 8000c64:	3601      	adds	r6, #1
 8000c66:	e7f2      	b.n	8000c4e <__libc_init_array+0x1e>
 8000c68:	08000c90 	.word	0x08000c90
 8000c6c:	08000c90 	.word	0x08000c90
 8000c70:	08000c90 	.word	0x08000c90
 8000c74:	08000c94 	.word	0x08000c94

08000c78 <_init>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	bf00      	nop
 8000c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7e:	bc08      	pop	{r3}
 8000c80:	469e      	mov	lr, r3
 8000c82:	4770      	bx	lr

08000c84 <_fini>:
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	bf00      	nop
 8000c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8a:	bc08      	pop	{r3}
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	4770      	bx	lr
